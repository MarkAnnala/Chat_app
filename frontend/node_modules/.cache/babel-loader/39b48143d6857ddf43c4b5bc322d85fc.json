{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Chat/Chat.js\";\nimport React from \"react\";\nimport \"../../assets/main.css\";\nimport Message from \"./Message\";\n/**\n * Chat holds the layout of all messages and the input/sent\n * @property messages the state containing list of chat messages\n * @returns a div containing all messages \n */\n\nconst Chat = ({\n  messages\n}) => {\n  /* Using ref to makes sure that we scroll to end of chat area if it overflows */\n  const messagesEndRef = React.useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  React.useEffect(scrollToBottom, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-area\",\n    className: \" h-screen75 w-full pl-2 pr-2 mt-10 overflow-y-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Message, {\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Chat/Chat.js"],"names":["React","Message","Chat","messages","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","behavior","useEffect","map","message","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA;;;;;;AAKA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAE7B;AACA,QAAMC,cAAc,GAAGJ,KAAK,CAACK,MAAN,CAAa,IAAb,CAAvB;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,cAAc,CAACG,OAAf,CAAuBC,cAAvB,CAAsC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAtC;AACD,GAFD;;AAGAT,EAAAA,KAAK,CAACU,SAAN,CAAgBJ,cAAhB,EAAgC,CAACH,QAAD,CAAhC;AAGA,sBACE;AAAK,IAAA,EAAE,EAAE,WAAT;AAAqB,IAAA,SAAS,EAAC,sDAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGA,QAAQ,CAACQ,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,kBACZ;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAED,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CAFH,CADF,eASE;AAAK,IAAA,GAAG,EAAER,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CAvBD;;AAyBA,eAAeF,IAAf","sourcesContent":["import React from \"react\";\nimport \"../../assets/main.css\";\nimport Message from \"./Message\";\n/**\n * Chat holds the layout of all messages and the input/sent\n * @property messages the state containing list of chat messages\n * @returns a div containing all messages \n */\nconst Chat = ({ messages }) => {\n\n  /* Using ref to makes sure that we scroll to end of chat area if it overflows */\n  const messagesEndRef = React.useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  React.useEffect(scrollToBottom, [messages]);\n\n  \n  return (\n    <div id =\"chat-area\" className=\" h-screen75 w-full pl-2 pr-2 mt-10 overflow-y-scroll\">\n      <div id=\"messages\">\n        {/* Loop through the state messages and print a message component for each message  */}\n        {messages.map((message, index) => (\n          <div key={index}>\n            <Message message={message} />\n          </div>\n        ))}\n      </div>\n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}