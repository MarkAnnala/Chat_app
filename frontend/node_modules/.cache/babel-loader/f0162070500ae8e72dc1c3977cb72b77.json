{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Container/Container.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/**\n * Container is the component that makes sure to route to specific component on start page\n * TODO more functionality when we can use user objects etc\n * @returns returns the actuall component that should be rendered depending on pathname\n */\n\nconst Container = () => {\n  /**\n   * HANDLING AND INITIALISATION OF WEBSOCKET EFFECTS\n   */\n  const ws = useSelector(state => state.socketState.socket);\n  /* used in useEffect to check if we need to refire useEffect() */\n\n  const wsOnline = useSelector(state => state.socketState.wsOnline);\n  /* used in useEffect to check if disconnect is by our own accord */\n\n  const url = useSelector(state => state.socketState.socketServer);\n  /* websocket url - will contain address when we call SETSERVER action */\n\n  const dispatch = useDispatch(); // used to keep a mutable ref object - in this case the websocket\n\n  const wsRef = useRef(); // Initiates the websocket client on mount (everything in useEffect is called on mount - like created/mounted in Vue)\n\n  useEffect(() => {\n    // if current prop of ref is null and ws url is set -> initialize new websocket connection (this happens first time)\n    if (!wsRef.current && url !== null) {\n      wsRef.current = new WebSocket(url);\n      dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n    }\n\n    if (wsRef.current != null) {\n      /* listening on messages received - response handled by the reducer?? */\n      wsRef.current.onmessage = msg => {\n        console.log(msg.data);\n        dispatch(actions.response(msg));\n      };\n      /* our websocket disconnected */\n\n\n      wsRef.current.onclose = () => {\n        if (wsOnline) {\n          /* trigger a reconnect */\n          console.log(\"reconnect to new ws\");\n          wsRef.current = new WebSocket(url);\n          dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n        } else {\n          /* disconnect the ws */\n          console.log(\"ws disconnected\");\n          dispatch(actions.disconnected(null));\n        }\n      };\n    }\n  }, [ws, url]);\n  /* dependency list includes ws - when ws is changed we refire the useEffect hook */\n\n  const loginSuccess = useSelector(state => state.loginState.loginSuccess);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, loginSuccess ? /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, loginSuccess ? /*#__PURE__*/React.createElement(LandingPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 45\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(Route, {\n    path: \"/register\",\n    render: props => /*#__PURE__*/React.createElement(Register, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 52\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Container;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Container/Container.js"],"names":["React","useRef","useEffect","BrowserRouter","Route","Switch","Redirect","LandingPage","Login","Register","actions","useDispatch","useSelector","Container","ws","state","socketState","socket","wsOnline","url","socketServer","dispatch","wsRef","current","WebSocket","connect","onmessage","msg","console","log","data","response","onclose","disconnected","loginSuccess","loginState","props"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\n\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/**\n * Container is the component that makes sure to route to specific component on start page\n * TODO more functionality when we can use user objects etc\n * @returns returns the actuall component that should be rendered depending on pathname\n */\nconst Container = () => {\n  /**\n   * HANDLING AND INITIALISATION OF WEBSOCKET EFFECTS\n   */\n\n  const ws = useSelector(\n    (state) => state.socketState.socket\n  ); /* used in useEffect to check if we need to refire useEffect() */\n  const wsOnline = useSelector(\n    (state) => state.socketState.wsOnline\n  ); /* used in useEffect to check if disconnect is by our own accord */\n  const url = useSelector(\n    (state) => state.socketState.socketServer\n  ); /* websocket url - will contain address when we call SETSERVER action */\n  const dispatch = useDispatch();\n\n  // used to keep a mutable ref object - in this case the websocket\n  const wsRef = useRef();\n\n  // Initiates the websocket client on mount (everything in useEffect is called on mount - like created/mounted in Vue)\n  useEffect(() => {\n    // if current prop of ref is null and ws url is set -> initialize new websocket connection (this happens first time)\n    if (!wsRef.current && url !== null) {\n      wsRef.current = new WebSocket(url);\n      dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n    }\n\n    if (wsRef.current != null) {\n      /* listening on messages received - response handled by the reducer?? */\n      wsRef.current.onmessage = (msg) => {\n        console.log(msg.data);\n        dispatch(actions.response(msg));\n      };\n      /* our websocket disconnected */\n      wsRef.current.onclose = () => {\n        if (wsOnline) {\n          /* trigger a reconnect */\n          console.log(\"reconnect to new ws\");\n          wsRef.current = new WebSocket(url);\n          dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n        } else {\n          /* disconnect the ws */\n          console.log(\"ws disconnected\");\n          dispatch(actions.disconnected(null));\n        }\n      };\n    }\n  }, [\n    ws,\n    url,\n  ]); /* dependency list includes ws - when ws is changed we refire the useEffect hook */\n\n  const loginSuccess = useSelector((state) => state.loginState.loginSuccess);\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          {loginSuccess ? <Redirect to=\"/start\" /> : <Login />}\n        </Route>\n        <Route path=\"/start\">\n          {loginSuccess ? <LandingPage /> : <Redirect to=\"/\" />}{\" \"}\n        </Route>\n        <Route path=\"/register\" render={(props) => <Register {...props} />} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}