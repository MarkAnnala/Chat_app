{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Container/Container.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/**\n * Container is the component that makes sure to route to specific component on start page\n * TODO more functionality when we can use user objects etc\n * @returns returns the actuall component that should be rendered depending on pathname\n */\n\nconst Container = () => {\n  /**\n   * HANDLING AND INITIALISATION OF WEBSOCKET EFFECTS\n   */\n  const ws = useSelector(state => state.socket);\n  /* used in useEffect to check if we need to refire useEffect() */\n\n  const wsOnline = useSelector(state => state.wsOnline);\n  /* used in useEffect to check if disconnect is by our own accord */\n  // so we can dispatch actions to the store\n\n  const dispatch = useDispatch(); // used to keep a mutable ref object - in this case the websocket\n\n  const wsRef = useRef();\n  /* websocket url */\n\n  const url = \"ws://localhost:8080/websocket\"; // Initiates the websocket client on mount (everything in useEffect is called on mount - like created/mounted in Vue)\n\n  useEffect(() => {\n    // if current prop of ref is null -> initialize new websocket connection (this happens first time)\n    if (!wsRef.current) {\n      wsRef.current = new WebSocket(url);\n      dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n    }\n    /* listening on messages received - response handled by the reducer?? */\n\n\n    wsRef.current.onmessage = msg => {\n      console.log(msg.data);\n      dispatch(actions.response(msg));\n    };\n    /* our websocket disconnected */\n\n\n    wsRef.current.onclose = () => {\n      if (wsOnline) {\n        /* trigger a reconnect */\n        console.log(\"reconnect to new ws\");\n        wsRef.current = new WebSocket(url);\n        dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n      } else {\n        /* disconnect the ws */\n        console.log(\"ws disconnected\");\n        dispatch(actions.disconnected(null));\n      }\n    };\n  }, [ws]);\n  /* dependency list includes ws - when ws is changed we refire the useEffect hook */\n\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    render: props => /*#__PURE__*/React.createElement(Login, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 50\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/start\",\n    render: props => /*#__PURE__*/React.createElement(LandingPage, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 49\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/register\",\n    render: props => /*#__PURE__*/React.createElement(Register, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 52\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Container;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Container/Container.js"],"names":["React","useRef","useEffect","BrowserRouter","Route","Switch","LandingPage","Login","Register","actions","useDispatch","useSelector","Container","ws","state","socket","wsOnline","dispatch","wsRef","url","current","WebSocket","connect","onmessage","msg","console","log","data","response","onclose","disconnected","props"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\n\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/**\n * Container is the component that makes sure to route to specific component on start page\n * TODO more functionality when we can use user objects etc\n * @returns returns the actuall component that should be rendered depending on pathname\n */\nconst Container = () => {\n\n  /**\n   * HANDLING AND INITIALISATION OF WEBSOCKET EFFECTS\n   */\n\n  const ws = useSelector((state) => state.socket) /* used in useEffect to check if we need to refire useEffect() */\n  const wsOnline = useSelector((state) => state.wsOnline); /* used in useEffect to check if disconnect is by our own accord */\n\n  // so we can dispatch actions to the store\n  const dispatch = useDispatch();\n\n  // used to keep a mutable ref object - in this case the websocket\n  const wsRef = useRef();\n  /* websocket url */\n  const url = \"ws://localhost:8080/websocket\";\n\n  // Initiates the websocket client on mount (everything in useEffect is called on mount - like created/mounted in Vue)\n  useEffect(() => {\n    // if current prop of ref is null -> initialize new websocket connection (this happens first time)\n    if (!wsRef.current) {\n      wsRef.current = new WebSocket(url);\n      dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n    }\n\n    /* listening on messages received - response handled by the reducer?? */\n    wsRef.current.onmessage = (msg) => {\n      console.log(msg.data);\n      dispatch(actions.response(msg));\n    };\n    /* our websocket disconnected */\n    wsRef.current.onclose = () => {\n      if (wsOnline) {\n        /* trigger a reconnect */\n        console.log(\"reconnect to new ws\");\n        wsRef.current = new WebSocket(url);\n        dispatch(actions.connect(wsRef.current)); // add the ref to the redux store\n      } else {\n        /* disconnect the ws */\n        console.log(\"ws disconnected\");\n        dispatch(actions.disconnected(null));\n      }\n    };\n  },[ws]); /* dependency list includes ws - when ws is changed we refire the useEffect hook */\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact render={(props) => <Login {...props} />} />\n        <Route path=\"/start\" render={(props) => <LandingPage {...props} />} />\n        <Route path=\"/register\" render={(props) => <Register {...props} />} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}