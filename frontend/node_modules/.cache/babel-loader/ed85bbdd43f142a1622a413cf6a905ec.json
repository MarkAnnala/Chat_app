{"ast":null,"code":"/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst LOGOUT = \"LOGOUT\";\nconst RESET = \"RESET\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst ADD_REPLY = \"ADD_REPLY\";\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\",\n      // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: null\n    }\n  };\n}\nexport function addComment(data) {\n  return {\n    type: ADD_COMMENT,\n    payload: {\n      thread_id: data.thread_id,\n      user_id: data.username,\n      comment: data.comment,\n      reply: data.reply\n    }\n  };\n}\nexport function addReply(data) {\n  return {\n    type: ADD_REPLY,\n    payload: {\n      thread_id: data.thread_id,\n      user_id: data.username,\n      comment: data.comment,\n      reply: {\n        user_id: data.reply.user_id,\n        comment: data.reply.comment\n      }\n    }\n  };\n}\nexport function addFriend(data) {\n  return {\n    type: ADDFRIEND,\n    payload: {\n      username: data.username\n    }\n  };\n}\nexport function connect() {\n  return {\n    type: CONNECT,\n    payload: null\n  };\n}\nexport function disconnected(data) {\n  return {\n    type: DISCONNECTED,\n    payload: data\n  };\n}\nexport function logOut(data) {\n  return {\n    type: LOGOUT\n  };\n}\nexport function login({\n  values\n}) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members\n    }\n  };\n}\nexport function loginSuccess(data) {\n  return {\n    type: SUCCESS,\n    payload: data\n  };\n}\nexport function createThread(values) {\n  return {\n    type: CREATE_THREAD,\n    payload: {\n      serverName: values.server,\n      thread_id: null,\n      //TODO: ? kanske todo, kanske rätt\n      username: values.user,\n      root_post: {\n        root_header: values.summary,\n        root_cooment: values.details\n      },\n      //TODO: Vet inte om detta är ok eller ej, tänkte initialt att det kanske är lättare att sätta timestamp i backend\n      timestamp: null,\n      comments: []\n    }\n  };\n}\nexport function loginFailure(data) {\n  return {\n    type: FAILURE,\n    payload: data\n  };\n}\nexport function response(data) {\n  return {\n    type: RESPONSE,\n    payload: data\n  };\n}\nexport function setServer(server) {\n  return {\n    type: SET,\n    payload: server\n  };\n}\nexport function resetLoginState() {\n  return {\n    type: RESET\n  };\n}","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/actions/actions.js"],"names":["CONNECT","LOGIN","RESPONSE","REGISTER","DISCONNECTED","SET","SUCCESS","FAILURE","SENDMESSAGE","ADDFRIEND","CHAT_REQUEST","LOGOUT","RESET","CREATE_THREAD","ADD_COMMENT","ADD_REPLY","sendMessage","data","type","payload","action","chat_id","chatID","user_id","username","message","timestamp","addComment","thread_id","comment","reply","addReply","addFriend","connect","disconnected","logOut","login","values","console","log","Username","password","Password","register","startChat","chat_name","chatName","from","members","loginSuccess","createThread","serverName","server","user","root_post","root_header","summary","root_cooment","details","comments","loginFailure","response","setServer","resetLoginState"],"mappings":"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","sourcesContent":["/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst LOGOUT = \"LOGOUT\";\nconst RESET = \"RESET\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst ADD_REPLY = \"ADD_REPLY\";\n\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\", // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: null,\n    },\n  };\n}\n\nexport function addComment(data) {\n  return {\n    type: ADD_COMMENT,\n    payload: {\n      thread_id: data.thread_id,\n      user_id: data.username,\n      comment: data.comment,\n      reply: data.reply,\n    },\n  };\n}\nexport function addReply(data) {\n  return {\n    type: ADD_REPLY,\n    payload: {\n      thread_id: data.thread_id,\n      user_id: data.username,\n      comment: data.comment,\n      reply: {\n        user_id: data.reply.user_id,\n        comment: data.reply.comment,\n      },\n    },\n  };\n}\n\nexport function addFriend(data) {\n  return { type: ADDFRIEND, payload: { username: data.username } };\n}\n\nexport function connect() {\n  return { type: CONNECT, payload: null };\n}\n\nexport function disconnected(data) {\n  return { type: DISCONNECTED, payload: data };\n}\n\nexport function logOut(data) {\n  return { type: LOGOUT };\n}\n\nexport function login({ values }) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members,\n    },\n  };\n}\nexport function loginSuccess(data) {\n  return { type: SUCCESS, payload: data };\n}\nexport function createThread(values) {\n  return {\n    type: CREATE_THREAD,\n    payload: {\n      serverName: values.server,\n      thread_id: null, //TODO: ? kanske todo, kanske rätt\n      username: values.user,\n      root_post: { root_header: values.summary, root_cooment: values.details },\n      //TODO: Vet inte om detta är ok eller ej, tänkte initialt att det kanske är lättare att sätta timestamp i backend\n      timestamp: null,\n      comments: [],\n    },\n  };\n}\n\nexport function loginFailure(data) {\n  return { type: FAILURE, payload: data };\n}\n\nexport function response(data) {\n  return { type: RESPONSE, payload: data };\n}\n\nexport function setServer(server) {\n  return { type: SET, payload: server };\n}\n\nexport function resetLoginState() {\n  return { type: RESET };\n}\n"]},"metadata":{},"sourceType":"module"}