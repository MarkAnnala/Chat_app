{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/ThreadList.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport plus from \"../../img/plus.svg\";\nimport CreateThread from \"./CreateThread\";\nimport { useSelector } from \"react-redux\";\n/**\n * ThreadList is the component which lists all threads the user has access to\n * @property {String} focusedPage - a string used to check what page we are focusing on\n * @property {string} username  username of the logged in user\n * @returns A div containing all threads that the logged in user can access\n */\n\nconst ThreadList = ({\n  focusedPage,\n  username,\n  handleFocusedThread\n}) => {\n  /* used for the hover effect on + sign */\n  const [hovered, setHovered] = React.useState(false);\n  const [showCreateThread, setShowCreateThread] = React.useState(false);\n  /* used for mapping threads in the threadlist component so they are displayed*/\n\n  const [threads, setThreads] = React.useState([{\n    name: \"hej\",\n    id: 5\n  }]); // list of all threads in server object from redux store\n\n  const listOfThreads = useSelector(state => state.socketState.server.listOfThreads); //if listOfThreads changes add it to threads state so it can be displayed\n  //React.useEffect(() => {\n  //  if (listOfThreads != null) {\n  //    setThreads(listOfThreads);\n  //  }\n  //}, [listOfThreads]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"threadListHeader\",\n    className: \"text-white text-xl h-auto border-solid border-b-2 border-gray-700  mt-4 flex flex-row justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Threads\", /*#__PURE__*/React.createElement(\"img\", {\n    src: plus,\n    onMouseEnter: () => {\n      setHovered(!hovered);\n    },\n    onMouseLeave: () => {\n      setHovered(!hovered);\n    },\n    alt: \"Create a new thread!\",\n    className: hovered ? \"plusIcon-custom-hover h-6 w-6 cursor-pointer\" : \"h-6 w-6 cursor-pointer\",\n    onClick: () => {\n      setShowCreateThread(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, showCreateThread ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-1/2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CreateThread, {\n    showCreateThread: showCreateThread,\n    setShowCreateThread: setShowCreateThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"threadList\",\n    className: \"text-white pt-1 h-screen25 overflow-y-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, threads.map((thread, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-white text-xl hover:bg-gray-500 cursor-pointer\",\n      onClick: handleFocusedThread,\n      id: thread.id,\n      value: thread,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, thread);\n  })));\n};\n\nexport default ThreadList;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/ThreadList.js"],"names":["React","useRef","useEffect","CreateThread","useSelector","ThreadList","focusedPage","username","handleFocusedThread","hovered","setHovered","useState","showCreateThread","setShowCreateThread","threads","setThreads","name","id","listOfThreads","state","socketState","server","plus","map","thread","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;;;;;;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA;AAAzB,CAAD,KAAoD;AACrE;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,KAAK,CAACW,QAAN,CAAe,KAAf,CAA9B;AAEA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0Cb,KAAK,CAACW,QAAN,CAAe,KAAf,CAAhD;AAEA;;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBf,KAAK,CAACW,QAAN,CAAe,CAAC;AAACK,IAAAA,IAAI,EAAE,KAAP;AAAcC,IAAAA,EAAE,EAAE;AAAlB,GAAD,CAAf,CAA9B,CAPqE,CASrE;;AACA,QAAMC,aAAa,GAAGd,WAAW,CAC9Be,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBH,aADL,CAAjC,CAVqE,CAcrE;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAC,kBADL;AAEE,IAAA,SAAS,EAAC,uGAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAKE;AACE,IAAA,GAAG,EAAEI,IADP;AAEE,IAAA,YAAY,EAAE,MAAM;AAClBZ,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,KAJH;AAKE,IAAA,YAAY,EAAE,MAAM;AAClBC,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,KAPH;AAQE,IAAA,GAAG,EAAC,sBARN;AASE,IAAA,SAAS,EACPA,OAAO,GACH,8CADG,GAEH,wBAZR;AAcE,IAAA,OAAO,EAAE,MAAM;AACbI,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,KAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,eAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,gBAAgB,gBACf;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,gBAAgB,EAAEA,gBADpB;AAEE,IAAA,mBAAmB,EAAEC,mBAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADe,GASb,IAVN,CAzBF,eAqCE;AACE,IAAA,EAAE,EAAC,YADL;AAEE,IAAA,SAAS,EAAC,8CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGC,OAAO,CAACS,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,wBACE;AACE,MAAA,SAAS,EAAC,qDADZ;AAEE,MAAA,OAAO,EAAEjB,mBAFX;AAGE,MAAA,EAAE,EAAEgB,MAAM,CAACP,EAHb;AAIE,MAAA,KAAK,EAAEO,MAJT;AAKE,MAAA,GAAG,EAAEC,KALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGD,MAPH,CADF;AAWD,GAZA,CANH,CArCF,CADF;AA4DD,CAjFD;;AAmFA,eAAenB,UAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport plus from \"../../img/plus.svg\";\nimport CreateThread from \"./CreateThread\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * ThreadList is the component which lists all threads the user has access to\n * @property {String} focusedPage - a string used to check what page we are focusing on\n * @property {string} username  username of the logged in user\n * @returns A div containing all threads that the logged in user can access\n */\nconst ThreadList = ({ focusedPage, username, handleFocusedThread }) => {\n  /* used for the hover effect on + sign */\n  const [hovered, setHovered] = React.useState(false);\n\n  const [showCreateThread, setShowCreateThread] = React.useState(false);\n\n  /* used for mapping threads in the threadlist component so they are displayed*/\n  const [threads, setThreads] = React.useState([{name: \"hej\", id: 5}]);\n\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(\n    (state) => state.socketState.server.listOfThreads\n  );\n\n  //if listOfThreads changes add it to threads state so it can be displayed\n  //React.useEffect(() => {\n  //  if (listOfThreads != null) {\n  //    setThreads(listOfThreads);\n  //  }\n  //}, [listOfThreads]);\n\n  return (\n    <div className=\"flex flex-col ml-2\">\n      <div\n        id=\"threadListHeader\"\n        className=\"text-white text-xl h-auto border-solid border-b-2 border-gray-700  mt-4 flex flex-row justify-between\"\n      >\n        Threads\n        <img\n          src={plus}\n          onMouseEnter={() => {\n            setHovered(!hovered);\n          }}\n          onMouseLeave={() => {\n            setHovered(!hovered);\n          }}\n          alt=\"Create a new thread!\"\n          className={\n            hovered\n              ? \"plusIcon-custom-hover h-6 w-6 cursor-pointer\"\n              : \"h-6 w-6 cursor-pointer\"\n          }\n          onClick={() => {\n            setShowCreateThread(true);\n          }}\n        />\n      </div>\n      <div>\n        {showCreateThread ? (\n          <div className=\"addFriend-custom-overlay\">\n            <div className=\"w-1/2\">\n              <CreateThread\n                showCreateThread={showCreateThread}\n                setShowCreateThread={setShowCreateThread}\n              />\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <div\n        id=\"threadList\"\n        className=\"text-white pt-1 h-screen25 overflow-y-scroll\"\n      >\n        \n        {/* MAP a list of thread components that exist in the server object  */}\n        {threads.map((thread, index) => {\n          return (\n            <div\n              className=\"text-white text-xl hover:bg-gray-500 cursor-pointer\"\n              onClick={handleFocusedThread}\n              id={thread.id}\n              value={thread}\n              key={index}\n            >\n              {thread}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}