{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Logout/Logout.js\";\nimport React from \"react\";\nimport * as actions from \"../../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logout from \"../../../img/logout.svg\";\nimport LogoutMonad from \"./LogoutMonad\";\nimport ReactTooltip from \"react-tooltip\";\n\nconst axios = require(\"axios\");\n/**\n * Handle the logout http response with backend\n * @param {String} username the username of the user\n * @param {String} magicToken the magictoken used for authentication on websocket connection\n * @param {function} setLogoutSuccess callback function used to set state of bool upon logout\n */\n\n\nconst logoutHandler = async (username, magicToken, setLogoutSuccess) => {\n  try {\n    const response = await axios.post(\"/\", JSON.stringify({\n      action: \"logout\",\n      username: username,\n      magic_token: magicToken\n    }));\n    const data = await response;\n\n    switch (data.status) {\n      case 200:\n        {\n          setLogoutSuccess(true);\n          break;\n        }\n\n      case 404:\n        {\n          break;\n        }\n\n      default:\n        break;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n/**\n * Component that handles the logout functionality\n * @returns clickable button that will logout the user\n */\n\n\nconst Logout = () => {\n  const dispatch = useDispatch();\n  const magicToken = useSelector(state => state.socketState.magicToken);\n  const username = useSelector(state => state.socketState.username);\n  const [logoutSuccess, setLogoutSuccess] = React.useState(false);\n  const [hovered, setHovered] = React.useState(false);\n  const [logoutMonad, setLogoutMonad] = React.useState(false);\n  React.useEffect(() => {\n    if (logoutSuccess === true) {\n      dispatch(actions.logOut());\n      /* Reset socketState */\n\n      dispatch(actions.resetLoginState());\n      /* Reset loginState  -- this will trigger redirect to login page! */\n\n      console.log(\"Successfuly logged out!\");\n    }\n  }, [logoutSuccess, dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-white cursor-pointer flex flex-row justify-center  mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: logout,\n    \"data-tip\": true,\n    \"data-for\": \"logoutUser\",\n    src: logout,\n    onMouseEnter: () => {\n      setHovered(!hovered);\n    },\n    onMouseLeave: () => {\n      setHovered(!hovered);\n    },\n    className: hovered ? \"plusIcon-custom-hover h-8 w-8 cursor-pointer\" : \"h-8 w-8 cursor-pointer\",\n    onClick: () => {\n      setLogoutMonad(true);\n    },\n    alt: \"logout button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"logoutUser\",\n    place: \"right\",\n    effect: \"solid\",\n    backgroundColor: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Logout\"), logoutMonad ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LogoutMonad, {\n    logoutHandler: logoutHandler,\n    setLogoutMonad: setLogoutMonad,\n    username: username,\n    magicToken: magicToken,\n    setLogoutSuccess: setLogoutSuccess,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  })) : null);\n};\n\nexport default Logout;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Logout/Logout.js"],"names":["React","actions","useDispatch","useSelector","LogoutMonad","ReactTooltip","axios","require","logoutHandler","username","magicToken","setLogoutSuccess","response","post","JSON","stringify","action","magic_token","data","status","error","console","log","Logout","dispatch","state","socketState","logoutSuccess","useState","hovered","setHovered","logoutMonad","setLogoutMonad","useEffect","logOut","resetLoginState","logout"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as actions from \"../../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport logout from \"../../../img/logout.svg\";\nimport LogoutMonad from \"./LogoutMonad\";\nimport ReactTooltip from \"react-tooltip\";\nconst axios = require(\"axios\");\n\n/**\n * Handle the logout http response with backend\n * @param {String} username the username of the user\n * @param {String} magicToken the magictoken used for authentication on websocket connection\n * @param {function} setLogoutSuccess callback function used to set state of bool upon logout\n */\nconst logoutHandler = async (username, magicToken, setLogoutSuccess) => {\n  try {\n    const response = await axios.post(\n      \"/\",\n      JSON.stringify({\n        action: \"logout\",\n        username: username,\n        magic_token: magicToken,\n      })\n    );\n    const data = await response;\n    switch (data.status) {\n      case 200: {\n        setLogoutSuccess(true);\n        break;\n      }\n      case 404: {\n        break;\n      }\n      default:\n        break;\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n/**\n * Component that handles the logout functionality\n * @returns clickable button that will logout the user\n */\nconst Logout = () => {\n  const dispatch = useDispatch();\n  const magicToken = useSelector((state) => state.socketState.magicToken);\n  const username = useSelector((state) => state.socketState.username);\n  const [logoutSuccess, setLogoutSuccess] = React.useState(false);\n  const [hovered, setHovered] = React.useState(false);\n\n  const [logoutMonad, setLogoutMonad] = React.useState(false);\n\n  React.useEffect(() => {\n    if (logoutSuccess === true) {\n      dispatch(actions.logOut()); /* Reset socketState */\n      dispatch(\n        actions.resetLoginState()\n      ); /* Reset loginState  -- this will trigger redirect to login page! */\n      console.log(\"Successfuly logged out!\");\n    }\n  }, [logoutSuccess, dispatch]);\n\n  return (\n    <div className=\"text-white cursor-pointer flex flex-row justify-center  mb-2\">\n      <img\n        alt={logout}\n        data-tip\n        data-for=\"logoutUser\"\n        src={logout}\n        onMouseEnter={() => {\n          setHovered(!hovered);\n        }}\n        onMouseLeave={() => {\n          setHovered(!hovered);\n        }}\n        className={\n          hovered\n            ? \"plusIcon-custom-hover h-8 w-8 cursor-pointer\"\n            : \"h-8 w-8 cursor-pointer\"\n        }\n        onClick={() => {\n          setLogoutMonad(true);\n        }}\n        alt=\"logout button\"\n      />\n      <ReactTooltip\n        id=\"logoutUser\"\n        place=\"right\"\n        effect=\"solid\"\n        backgroundColor=\"black\"\n      >\n        Logout\n      </ReactTooltip>\n      {logoutMonad ? (\n        <div className=\"addFriend-custom-overlay\">\n          <LogoutMonad\n            logoutHandler={logoutHandler}\n            setLogoutMonad={setLogoutMonad}\n            username={username}\n            magicToken={magicToken}\n            setLogoutSuccess={setLogoutSuccess}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Logout;\n"]},"metadata":{},"sourceType":"module"}