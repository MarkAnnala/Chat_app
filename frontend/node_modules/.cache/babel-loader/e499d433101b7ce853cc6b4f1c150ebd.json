{"ast":null,"code":"const initialState = {\n  socket: null,\n  test: \"ok\"\n};\n/**\n * perform a task depending on the action dispatched\n * \n * @property {*} state the current state that is being held by the redux store\n * @property {*} action contains the type and payload\n */\n\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      //don't reconnect if it's already connected\n      return { ...state,\n        socket: action.payload\n      };\n\n    case \"LOGIN\":\n      /* Handle LOGIN -- store user somewhere? */\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return;\n\n    case \"REGISTER\":\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return state;\n\n    case \"SEND_MESSAGE\":\n      /* TODO handle sending on socket messages */\n      return state;\n\n    case \"RESPONSE\"\n    /* TODO decipher and handle response here!! */\n    :\n      console.log(\"handle the response bro pls\");\n      console.log(action.payload);\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/reducers/socketReducer.js"],"names":["initialState","socket","test","socketReducer","state","action","type","payload","console","log","send"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAE,IAAV;AAAgBC,EAAAA,IAAI,EAAE;AAAtB,CAArB;AAGA;;;;;;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE;AACA,aAAO,EAAE,GAAGF,KAAL;AAAYH,QAAAA,MAAM,EAAEI,MAAM,CAACE;AAA3B,OAAP;;AACF,SAAK,OAAL;AACE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,OAAnB;AACAH,MAAAA,KAAK,CAACH,MAAN,CAAaS,IAAb,CAAkBL,MAAM,CAACE,OAAzB;AACA;;AACF,SAAK,UAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,OAAnB;AACAH,MAAAA,KAAK,CAACH,MAAN,CAAaS,IAAb,CAAkBL,MAAM,CAACE,OAAzB;AACA,aAAOH,KAAP;;AACF,SAAK,cAAL;AACE;AACA,aAAOA,KAAP;;AACF,SAAK;AAAW;AAAhB;AACEI,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,OAAnB;AACA,aAAOH,KAAP;;AACF;AACE,aAAOA,KAAP;AArBJ;AAuBD,CAxBD;;AA0BA,eAAeD,aAAf","sourcesContent":["const initialState = { socket: null, test: \"ok\" };\n\n\n/**\n * perform a task depending on the action dispatched\n * \n * @property {*} state the current state that is being held by the redux store\n * @property {*} action contains the type and payload\n */\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      //don't reconnect if it's already connected\n      return { ...state, socket: action.payload };\n    case \"LOGIN\":\n      /* Handle LOGIN -- store user somewhere? */\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return;\n    case \"REGISTER\":\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return state;\n    case \"SEND_MESSAGE\":\n      /* TODO handle sending on socket messages */\n      return state;\n    case \"RESPONSE\" /* TODO decipher and handle response here!! */:\n      console.log(\"handle the response bro pls\");\n      console.log(action.payload);\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;\n"]},"metadata":{},"sourceType":"module"}