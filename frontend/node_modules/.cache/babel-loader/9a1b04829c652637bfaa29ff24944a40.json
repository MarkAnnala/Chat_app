{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadContainer.js\";\nimport React from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport OriginalPost from \"./OriginalPost\";\n/**\n * ThreadContainer holds all information about a thread; rootpost, comments etc\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\n\nconst ThreadContainer = ({\n  focusedThread\n}) => {\n  /* State and callback functions for the SearchBar */\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n\n  const handleSearchInput = event => {\n    setSearchTerm(event.target.value);\n  };\n  /**\n   * Trigger the search of the searchTerm in the actuall focused chat\n   * event parameter is displayed only to prevent he windows default action when pressing a submit button\n   * @param event the event object of the window\n   */\n\n\n  const handleSearchSubmit = event => {\n    /* TODO Actually search for threads containing the text in searchTerm and only allow that\n     to be displayed in the threadContainer\n    */\n    console.log(searchTerm);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n  /* TODO! fix that we display a certain thread here or all threads of server to pick from?? */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"focused-view-custom-bg text-white flex flex-col content-center \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    id: \"search-chat\",\n    value: searchTerm,\n    onButtonClick: handleSearchSubmit,\n    onInputChange: handleSearchInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), focusedThread ? /*#__PURE__*/React.createElement(OriginalPost, {\n    focusedThread: focusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 24\n    }\n  }) : null);\n};\n\nexport default ThreadContainer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadContainer.js"],"names":["React","SearchBar","OriginalPost","ThreadContainer","focusedThread","searchTerm","setSearchTerm","useState","handleSearchInput","event","target","value","handleSearchSubmit","console","log","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA;;;;;AAIA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAsB;AAC5C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,KAAK,CAACO,QAAN,CAAe,EAAf,CAApC;AAEA;;;;;AAIA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnCH,IAAAA,aAAa,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;AAIA;;;;;;;AAKA,QAAMC,kBAAkB,GAAIH,KAAD,IAAW;AACpC;;;AAGAI,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAG,IAAAA,KAAK,CAACM,cAAN;AACD,GAPD;AASA;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,iEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,EAAE,EAAC,aADL;AAEE,IAAA,KAAK,EAAEV,UAFT;AAGE,IAAA,aAAa,EAAEO,kBAHjB;AAIE,IAAA,aAAa,EAAEJ,iBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGJ,aAAa,gBAAG,oBAAC,YAAD;AAAc,IAAA,aAAa,EAAEA,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAoD,IAPpE,CADF;AAWD,CAvCD;;AAyCA,eAAeD,eAAf","sourcesContent":["import React from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport OriginalPost from \"./OriginalPost\";\n\n/**\n * ThreadContainer holds all information about a thread; rootpost, comments etc\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\nconst ThreadContainer = ({focusedThread }) => {\n  /* State and callback functions for the SearchBar */\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n  const handleSearchInput = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  /**\n   * Trigger the search of the searchTerm in the actuall focused chat\n   * event parameter is displayed only to prevent he windows default action when pressing a submit button\n   * @param event the event object of the window\n   */\n  const handleSearchSubmit = (event) => {\n    /* TODO Actually search for threads containing the text in searchTerm and only allow that\n     to be displayed in the threadContainer\n  */\n    console.log(searchTerm);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n\n  /* TODO! fix that we display a certain thread here or all threads of server to pick from?? */\n\n  return (\n    <div className=\"focused-view-custom-bg text-white flex flex-col content-center \">\n      <SearchBar\n        id=\"search-chat\"\n        value={searchTerm}\n        onButtonClick={handleSearchSubmit}\n        onInputChange={handleSearchInput}\n      />\n      {focusedThread ? <OriginalPost focusedThread={focusedThread} /> : null}\n    </div>\n  );\n};\n\nexport default ThreadContainer;\n"]},"metadata":{},"sourceType":"module"}