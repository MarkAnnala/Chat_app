{"ast":null,"code":"/**\n * Contains actions that can be called by a dispatcher\n * \n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\",\n      // type of action \n      chat_id: \"0001\",\n      // chat id . kan skippas nu för alla hamnar i samma chat i prototypen\n      user_id: data.username,\n      message: data.message,\n      timestamp: null\n    }\n  };\n}\n/* action functions */\n\nexport function connect(ws) {\n  return {\n    type: CONNECT,\n    payload: ws\n  };\n}\n/* action functions */\n\nexport function disconnected(data) {\n  return {\n    type: DISCONNECTED,\n    payload: data\n  };\n}\nexport function login({\n  values\n}) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function loginSuccess({\n  response\n}) {\n  return {\n    type: SUCCESS,\n    payload: response\n  };\n}\nexport function loginFailure({\n  response\n}) {\n  return {\n    type: FAILURE,\n    payload: response\n  };\n}\nexport function response(data) {\n  return {\n    type: RESPONSE,\n    payload: data\n  };\n}\nexport function setServer(server) {\n  return {\n    type: SET,\n    payload: server\n  };\n}","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/actions/actions.js"],"names":["CONNECT","LOGIN","RESPONSE","REGISTER","DISCONNECTED","SET","SUCCESS","FAILURE","SENDMESSAGE","sendMessage","data","type","payload","action","chat_id","user_id","username","message","timestamp","connect","ws","disconnected","login","values","console","log","Username","password","Password","register","loginSuccess","response","loginFailure","setServer","server"],"mappings":"AACA;;;;;AAKC;AACD,MAAMA,OAAO,GAAG,SAAhB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,GAAG,GAAG,WAAZ;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEH,WADD;AAELI,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,cADH;AAC0C;AAC/CC,MAAAA,OAAO,EAAE,MAFJ;AAEkD;AACvDC,MAAAA,OAAO,EAAEL,IAAI,CAACM,QAHT;AAILC,MAAAA,OAAO,EAAEP,IAAI,CAACO,OAJT;AAKLC,MAAAA,SAAS,EAAE;AALN;AAFJ,GAAP;AAUD;AACD;;AACA,OAAO,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;AAC1B,SAAO;AAAET,IAAAA,IAAI,EAAEX,OAAR;AAAiBY,IAAAA,OAAO,EAAEQ;AAA1B,GAAP;AACD;AAED;;AACA,OAAO,SAASC,YAAT,CAAsBX,IAAtB,EAA4B;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEP,YAAR;AAAsBQ,IAAAA,OAAO,EAAEF;AAA/B,GAAP;AACD;AAED,OAAO,SAASY,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA2B;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO;AACLZ,IAAAA,IAAI,EAAEV,KADD;AAELW,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,OADD;AAEPG,MAAAA,QAAQ,EAAEO,MAAM,CAACG,QAFV;AAGPC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK;AAHV;AAFJ,GAAP;AAQD;AAED,OAAO,SAASC,QAAT,CAAmBN,MAAnB,EAA4B;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO;AACLZ,IAAAA,IAAI,EAAER,QADD;AAELS,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,UADD;AAEPG,MAAAA,QAAQ,EAAEO,MAAM,CAACG,QAFV;AAGPC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK;AAHV;AAFJ,GAAP;AAQD;AAED,OAAO,SAASE,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAiC;AACtC,SAAO;AAAEpB,IAAAA,IAAI,EAAEL,OAAR;AAAiBM,IAAAA,OAAO,EAAEmB;AAA1B,GAAP;AACD;AACD,OAAO,SAASC,YAAT,CAAsB;AAACD,EAAAA;AAAD,CAAtB,EAAiC;AACtC,SAAO;AAACpB,IAAAA,IAAI,EAAEJ,OAAP;AAAgBK,IAAAA,OAAO,EAAEmB;AAAzB,GAAP;AACD;AAED,OAAO,SAASA,QAAT,CAAkBrB,IAAlB,EAAwB;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAET,QAAR;AAAkBU,IAAAA,OAAO,EAAEF;AAA3B,GAAP;AACD;AAED,OAAO,SAASuB,SAAT,CAAmBC,MAAnB,EAA0B;AAC/B,SAAO;AAACvB,IAAAA,IAAI,EAAEN,GAAP;AAAYO,IAAAA,OAAO,EAAEsB;AAArB,GAAP;AACD","sourcesContent":["\n/**\n * Contains actions that can be called by a dispatcher\n * \n */\n\n /* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\"\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\n\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n        action: \"send_message\",                        // type of action \n        chat_id: \"0001\",                                       // chat id . kan skippas nu för alla hamnar i samma chat i prototypen\n        user_id: data.username ,\n        message: data.message , \n        timestamp: null\n    },\n  };\n}\n/* action functions */\nexport function connect(ws) {\n  return { type: CONNECT, payload: ws };\n}  \n\n/* action functions */\nexport function disconnected(data) {\n  return { type: DISCONNECTED, payload: data };\n}  \n\nexport function login({ values }) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function register( values ) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function loginSuccess({response}){\n  return { type: SUCCESS, payload: response}\n}\nexport function loginFailure({response}){\n  return {type: FAILURE, payload: response}\n}\n\nexport function response(data) {\n  return { type: RESPONSE, payload: data};\n}\n\nexport function setServer(server){\n  return {type: SET, payload: server};\n}\n\n"]},"metadata":{},"sourceType":"module"}