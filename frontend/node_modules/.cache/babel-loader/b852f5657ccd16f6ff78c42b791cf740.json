{"ast":null,"code":"/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\",\n      // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: null\n    }\n  };\n}\nexport function addFriend(data) {\n  return {\n    type: ADDFRIEND,\n    payload: {\n      username: data.username\n    }\n  };\n}\n;\nexport function connect() {\n  return {\n    type: CONNECT,\n    payload: null\n  };\n}\nexport function disconnected(data) {\n  return {\n    type: DISCONNECTED,\n    payload: data\n  };\n}\nexport function login({\n  values\n}) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members\n    }\n  };\n}\nexport function loginSuccess(data) {\n  return {\n    type: SUCCESS,\n    payload: data\n  };\n}\nexport function loginFailure(data) {\n  return {\n    type: FAILURE,\n    payload: data\n  };\n}\nexport function response(data) {\n  return {\n    type: RESPONSE,\n    payload: data\n  };\n}\nexport function setServer(server) {\n  return {\n    type: SET,\n    payload: server\n  };\n}","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/actions/actions.js"],"names":["CONNECT","LOGIN","RESPONSE","REGISTER","DISCONNECTED","SET","SUCCESS","FAILURE","SENDMESSAGE","ADDFRIEND","CHAT_REQUEST","CREATE_THREAD","sendMessage","data","type","payload","action","chat_id","chatID","user_id","username","message","timestamp","addFriend","connect","disconnected","login","values","console","log","Username","password","Password","register","startChat","chat_name","chatName","from","members","loginSuccess","loginFailure","response","setServer","server"],"mappings":"AAAA;;;;;AAKA;AACA,MAAMA,OAAO,GAAG,SAAhB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,GAAG,GAAG,WAAZ;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,aAAa,GAAG,eAAtB;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEN,WADD;AAELO,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,cADD;AACiB;AACxBC,MAAAA,OAAO,EAAEJ,IAAI,CAACK,MAFP;AAGPC,MAAAA,OAAO,EAAEN,IAAI,CAACO,QAHP;AAIPC,MAAAA,OAAO,EAAER,IAAI,CAACQ,OAJP;AAKPC,MAAAA,SAAS,EAAE;AALJ;AAFJ,GAAP;AAUD;AACD,OAAO,SAASC,SAAT,CAAmBV,IAAnB,EAAyB;AAC9B,SAAM;AAAIC,IAAAA,IAAI,EAAEL,SAAV;AAAqBM,IAAAA,OAAO,EAAC;AAAEK,MAAAA,QAAQ,EAAEP,IAAI,CAACO;AAAjB;AAA7B,GAAN;AACD;AAAA;AAGD,OAAO,SAASI,OAAT,GAAmB;AACxB,SAAO;AAAEV,IAAAA,IAAI,EAAEd,OAAR;AAAiBe,IAAAA,OAAO,EAAE;AAA1B,GAAP;AACD;AAED,OAAO,SAASU,YAAT,CAAsBZ,IAAtB,EAA4B;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEV,YAAR;AAAsBW,IAAAA,OAAO,EAAEF;AAA/B,GAAP;AACD;AAED,OAAO,SAASa,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA2B;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO;AACLb,IAAAA,IAAI,EAAEb,KADD;AAELc,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,OADD;AAEPI,MAAAA,QAAQ,EAAEO,MAAM,CAACG,QAFV;AAGPC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK;AAHV;AAFJ,GAAP;AAQD;AAED,OAAO,SAASC,QAAT,CAAkBN,MAAlB,EAA0B;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO;AACLb,IAAAA,IAAI,EAAEX,QADD;AAELY,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,UADD;AAEPI,MAAAA,QAAQ,EAAEO,MAAM,CAACG,QAFV;AAGPC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK;AAHV;AAFJ,GAAP;AAQD;AAED,OAAO,SAASE,SAAT,CAAmBP,MAAnB,EAA0B;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAO;AACLb,IAAAA,IAAI,EAAEJ,YADD;AAELK,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,cADD;AAEPmB,MAAAA,SAAS,EAAER,MAAM,CAACS,QAFX;AAGPC,MAAAA,IAAI,EAAEV,MAAM,CAACU,IAHN;AAIPC,MAAAA,OAAO,EAAEX,MAAM,CAACW;AAJT;AAFJ,GAAP;AASD;AACD,OAAO,SAASC,YAAT,CAAsB1B,IAAtB,EAA2B;AAChC,SAAO;AAAEC,IAAAA,IAAI,EAAER,OAAR;AAAiBS,IAAAA,OAAO,EAAEF;AAA1B,GAAP;AACD;AAED,OAAO,SAAS2B,YAAT,CAAsB3B,IAAtB,EAA4B;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEP,OAAR;AAAiBQ,IAAAA,OAAO,EAAEF;AAA1B,GAAP;AACD;AAED,OAAO,SAAS4B,QAAT,CAAkB5B,IAAlB,EAAwB;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAEZ,QAAR;AAAkBa,IAAAA,OAAO,EAAEF;AAA3B,GAAP;AACD;AAED,OAAO,SAAS6B,SAAT,CAAmBC,MAAnB,EAA2B;AAChC,SAAO;AAAE7B,IAAAA,IAAI,EAAET,GAAR;AAAaU,IAAAA,OAAO,EAAE4B;AAAtB,GAAP;AACD","sourcesContent":["/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\n\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\", // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: null,\n    }\n  };\n}\nexport function addFriend(data) {\n  return{   type: ADDFRIEND, payload:{ username: data.username }}\n};\n\n\nexport function connect() {\n  return { type: CONNECT, payload: null };\n}\n\nexport function disconnected(data) {\n  return { type: DISCONNECTED, payload: data };\n}\n\nexport function login({ values }) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function startChat(values){\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from, \n      members: values.members,\n    },\n  };\n}\nexport function loginSuccess(data){\n  return { type: SUCCESS, payload: data}\n}\n  \nexport function loginFailure(data) {\n  return { type: FAILURE, payload: data };\n}\n\nexport function response(data) {\n  return { type: RESPONSE, payload: data };\n}\n\nexport function setServer(server) {\n  return { type: SET, payload: server };\n}\n\n"]},"metadata":{},"sourceType":"module"}