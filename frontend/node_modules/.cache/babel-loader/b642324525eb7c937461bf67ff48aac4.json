{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/FriendsList.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport add_friend from \"../../img/add_friend.webp\";\nimport AddFriend from \"./AddFriend\";\nimport * as actions from \"../../actions/actions\";\n/**\n * FriendsList holds the logged in members name and his friends\n * @property username of the logged in user\n * @returns a div containing all friends for the logged in user\n */\n\nconst FriendsList = () => {\n  /* Get friendslist from redux store */\n  const currentFriends = useSelector(state => state.socketState.listOfFriends);\n  const [friends, setFriends] = useState([]);\n  /* state to toggle modal, state should preferably probably be handled\n   inside modal for scalability and safety. Also refactor to use createPortal when as it is recommended.. */\n\n  const [show, setShow] = useState(false);\n  /* State that contains the username of the user we're trying to add */\n\n  const [username, setUsername] = useState(\"\");\n  /* state controlling if the friend request was successful or not, TODO: addSuccessful must be set to false and username false once friend is added */\n\n  const [addSuccessful, setAddSuccessful] = useState(false);\n  /* Gets the username of the user doing the friend request */\n\n  const requester = useSelector(state => state.socketState.username);\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    setUsername(event.target.value);\n  };\n  /* when addSuccesful changes and username is not null, refire and add a friend into the array of friends */\n\n\n  React.useEffect(() => {\n    if (addSuccessful && username) {\n      dispatch(actions.addFriend({\n        username\n      }));\n      setUsername(\"\");\n      setAddSuccessful(false);\n    }\n  }, [addSuccessful]);\n  /* when currentFriends changes - refire useEffect and add the new friends to friends state */\n\n  React.useEffect(() => {\n    console.log(\"potato\");\n\n    if (currentFriends != null) {\n      setFriends(currentFriends);\n    }\n  }, [currentFriends]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"friends\",\n    className: \"text-white text-xl h-auto border-solid border-b-2 border-gray-700 flex flex-row justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, \"Friends\", /*#__PURE__*/React.createElement(\"img\", {\n    src: add_friend,\n    alt: \"\",\n    className: \"h-6 w-6\",\n    onClick: () => setShow(true),\n    onMouseEnter: () => {\n      setHovered(!hovered);\n    },\n    onMouseLeave: () => {\n      setHovered(!hovered);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), \" \", /*#__PURE__*/React.createElement(AddFriend, {\n    userInput: username,\n    handleInputChange: handleInputChange,\n    setAddSuccessful: setAddSuccessful,\n    show: show,\n    setShow: setShow,\n    from: requester,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, friends.map((friend, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-white text-xl hover:bg-gray-500\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \" \", friend);\n  })));\n};\n\nexport default FriendsList;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/FriendsList.js"],"names":["React","useState","useDispatch","useSelector","add_friend","AddFriend","actions","FriendsList","currentFriends","state","socketState","listOfFriends","friends","setFriends","show","setShow","username","setUsername","addSuccessful","setAddSuccessful","requester","dispatch","handleInputChange","event","target","value","useEffect","addFriend","console","log","setHovered","hovered","map","friend","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport add_friend from \"../../img/add_friend.webp\";\nimport AddFriend from \"./AddFriend\";\nimport * as actions from \"../../actions/actions\";\n\n/**\n * FriendsList holds the logged in members name and his friends\n * @property username of the logged in user\n * @returns a div containing all friends for the logged in user\n */\n\nconst FriendsList = () => {\n  /* Get friendslist from redux store */\n  const currentFriends = useSelector(\n    (state) => state.socketState.listOfFriends\n  );\n\n  const [friends, setFriends] = useState([]);\n\n  /* state to toggle modal, state should preferably probably be handled\n   inside modal for scalability and safety. Also refactor to use createPortal when as it is recommended.. */\n  const [show, setShow] = useState(false);\n  /* State that contains the username of the user we're trying to add */\n  const [username, setUsername] = useState(\"\");\n  /* state controlling if the friend request was successful or not, TODO: addSuccessful must be set to false and username false once friend is added */\n  const [addSuccessful, setAddSuccessful] = useState(false);\n  /* Gets the username of the user doing the friend request */\n  const requester = useSelector((state) => state.socketState.username);\n  const dispatch = useDispatch();\n\n  const handleInputChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  /* when addSuccesful changes and username is not null, refire and add a friend into the array of friends */\n  React.useEffect(() => {\n    if (addSuccessful && username) {\n      dispatch(actions.addFriend({username}))\n      setUsername(\"\");\n      setAddSuccessful(false);\n    }\n  }, [addSuccessful]); \n  /* when currentFriends changes - refire useEffect and add the new friends to friends state */\n  React.useEffect(() => {\n    console.log(\"potato\");\n    if (currentFriends != null) {\n      setFriends(currentFriends);\n    }\n  }, [currentFriends]);\n\n  return (\n    <div className=\"flex flex-col ml-2\">\n      <div\n        id=\"friends\"\n        className=\"text-white text-xl h-auto border-solid border-b-2 border-gray-700 flex flex-row justify-between\"\n      >\n        Friends\n        <img\n          src={add_friend}\n          alt=\"\"\n          className=\"h-6 w-6\"\n          onClick={() => setShow(true)}\n          onMouseEnter= {()=>{setHovered(!hovered)}}\n          onMouseLeave = {()=>{setHovered(!hovered)}}\n        />{\" \"}\n        {/*TODO ON CLICK, lägg till bild  */}\n        <AddFriend\n          userInput={username}\n          handleInputChange={handleInputChange}\n          setAddSuccessful={setAddSuccessful}\n          show={show}\n          setShow={setShow}\n          from={requester}\n        ></AddFriend>\n      </div>\n      <div className=\"flex flex-col\">\n        {friends.map((friend, index) => {\n          return (\n            <div className=\"text-white text-xl hover:bg-gray-500\" key={index}>\n              {\" \"}\n              {friend}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default FriendsList;\n"]},"metadata":{},"sourceType":"module"}