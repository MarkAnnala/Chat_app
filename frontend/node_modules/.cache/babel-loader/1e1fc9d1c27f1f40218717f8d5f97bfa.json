{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ChatContainer/ChatContainer.js\";\nimport React from \"react\";\nimport \"../../assets/main.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Chat from \"../Chat/Chat\";\nimport ChatInput from \"../ChatInput/ChatInput\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/**\n * ChatContainer holds the layout of the focused view of a selected chat\n * @property {string} focusedChat the name of the chat that we are currently focusing on\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\n\nconst ChatContainer = ({\n  focusedChat\n}) => {\n  const dispatch = useDispatch();\n  /* State and callback functions for the SearchBar */\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n\n  const handleSearchInput = event => {\n    setSearchTerm(event.target.value);\n  };\n  /**\n   * TODO Trigger the search of the searchTerm in the actuall focused chat\n   * @param event the event object of the window\n   */\n\n\n  const handleSearchSubmit = event => {\n    /* TODO Actually search for chat messages containing the text in searchTerm and only allow that\n       to be displayed in the chat\n    */\n    console.log(searchTerm);\n    /* OBS OBS !! IF YOU WANT TO TRY OUT THE PYTHON SEARCH API UNCOMMENT THE FETCH STATEMENT BELOW */\n    // Send the same request\n\n    /*     fetch(\"http://localhost:5000/search\", {\n      // Specify the method\n      method: \"POST\",\n      // A JSON payload\n      body: JSON.stringify({\n        \"search_term\": searchTerm,\n      }),\n    })\n      .then(function (response) {\n        return response.json(); //parse result as JSON\n      })\n      .then(function (json) {\n        console.log(\"Search results: \");\n        console.log(json); // Here’s our JSON object\n      }); */\n\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n\n  const myUsername = useSelector(state => state.socketState.username);\n  const listOfDms = useSelector(state => state.socketState.listOfDms);\n  /**\n   * Check for the right DM object chatID wich matches the focusedChat prop\n   * @param {array} list the list containing Dm objects\n   * @return {array} array containing the list of message objects from the corresponding DM object\n   */\n\n  const rightChat = list => {\n    for (const chat of list) {\n      if (chat.chatID === focusedChat) {\n        return chat.messages;\n      }\n    }\n\n    return [];\n  };\n\n  const [messages, setMessages] = React.useState([]);\n  const [newMessage, setNewMessage] = React.useState(\"\");\n  /**\n   * Set the messages state setting it to include the \"newMessage\" message\n   * @param event the event object of the window\n   */\n\n  const sendMessage = event => {\n    event.preventDefault();\n    setMessages([...messages, {\n      message: newMessage,\n      username: myUsername\n    }]);\n    dispatch(actions.sendMessage({\n      message: newMessage,\n      username: myUsername,\n      chatID: focusedChat\n    }));\n    setNewMessage(\"\");\n  };\n  /**\n   * Set the newMessage state to whatever value is in event target\n   * @param event the event object of the window\n   */\n\n\n  const handleMessage = event => {\n    setNewMessage(event.target.value);\n  };\n  /* HANDLING THE DISPLAY OF NEW MESSAGES AND NEW FOCUSED CHAT */\n\n\n  React.useEffect(() => {\n    if (listOfDms != null) {\n      setMessages(rightChat(listOfDms));\n    }\n  }, [focusedChat, listOfDms]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col content-center focused-view-custom-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    id: \"search-chat\",\n    value: searchTerm,\n    onButtonClick: handleSearchSubmit,\n    onInputChange: handleSearchInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chat, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), focusedChat ? /*#__PURE__*/React.createElement(ChatInput, {\n    message: newMessage,\n    handleInputChange: handleMessage,\n    handleButtonClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nexport default ChatContainer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ChatContainer/ChatContainer.js"],"names":["React","SearchBar","Chat","ChatInput","actions","useDispatch","useSelector","ChatContainer","focusedChat","dispatch","searchTerm","setSearchTerm","useState","handleSearchInput","event","target","value","handleSearchSubmit","console","log","preventDefault","myUsername","state","socketState","username","listOfDms","rightChat","list","chat","chatID","messages","setMessages","newMessage","setNewMessage","sendMessage","message","handleMessage","useEffect"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../../assets/main.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Chat from \"../Chat/Chat\";\nimport ChatInput from \"../ChatInput/ChatInput\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/**\n * ChatContainer holds the layout of the focused view of a selected chat\n * @property {string} focusedChat the name of the chat that we are currently focusing on\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\nconst ChatContainer = ({ focusedChat }) => {\n  const dispatch = useDispatch();\n\n  /* State and callback functions for the SearchBar */\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n  const handleSearchInput = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  /**\n   * TODO Trigger the search of the searchTerm in the actuall focused chat\n   * @param event the event object of the window\n   */\n  const handleSearchSubmit = (event) => {\n    /* TODO Actually search for chat messages containing the text in searchTerm and only allow that\n       to be displayed in the chat\n    */\n    console.log(searchTerm);\n\n    /* OBS OBS !! IF YOU WANT TO TRY OUT THE PYTHON SEARCH API UNCOMMENT THE FETCH STATEMENT BELOW */\n    // Send the same request\n    /*     fetch(\"http://localhost:5000/search\", {\n      // Specify the method\n      method: \"POST\",\n      // A JSON payload\n      body: JSON.stringify({\n        \"search_term\": searchTerm,\n      }),\n    })\n      .then(function (response) {\n        return response.json(); //parse result as JSON\n      })\n      .then(function (json) {\n        console.log(\"Search results: \");\n        console.log(json); // Here’s our JSON object\n      }); */\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n\n  const myUsername = useSelector((state) => state.socketState.username);\n  const listOfDms = useSelector((state) => state.socketState.listOfDms);\n\n  /**\n   * Check for the right DM object chatID wich matches the focusedChat prop\n   * @param {array} list the list containing Dm objects\n   * @return {array} array containing the list of message objects from the corresponding DM object\n   */\n  const rightChat = (list) => {\n    for (const chat of list) {\n      if (chat.chatID === focusedChat) {\n        return chat.messages;\n      }\n    }\n    return [];\n  };\n\n  const [messages, setMessages] = React.useState([]);\n\n  const [newMessage, setNewMessage] = React.useState(\"\");\n\n  /**\n   * Set the messages state setting it to include the \"newMessage\" message\n   * @param event the event object of the window\n   */\n  const sendMessage = (event) => {\n    event.preventDefault();\n    setMessages([...messages, { message: newMessage, username: myUsername }]);\n    dispatch(\n      actions.sendMessage({\n        message: newMessage,\n        username: myUsername,\n        chatID: focusedChat,\n      })\n    );\n    setNewMessage(\"\");\n  };\n\n  /**\n   * Set the newMessage state to whatever value is in event target\n   * @param event the event object of the window\n   */\n  const handleMessage = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  /* HANDLING THE DISPLAY OF NEW MESSAGES AND NEW FOCUSED CHAT */\n  \n  React.useEffect(() => {\n    if (listOfDms != null) {\n      setMessages(rightChat(listOfDms));\n    }\n  }, [focusedChat, listOfDms]);\n\n  return (\n    <div className=\"flex flex-col content-center focused-view-custom-bg\">\n      <SearchBar\n        id=\"search-chat\"\n        value={searchTerm}\n        onButtonClick={handleSearchSubmit}\n        onInputChange={handleSearchInput}\n      />\n\n      <Chat messages={messages} />\n      {focusedChat ? (\n        <ChatInput\n          message={newMessage}\n          handleInputChange={handleMessage}\n          handleButtonClick={sendMessage}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default ChatContainer;\n"]},"metadata":{},"sourceType":"module"}