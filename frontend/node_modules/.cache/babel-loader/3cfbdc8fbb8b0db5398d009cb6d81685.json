{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadContainer.js\";\nimport React from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport OriginalPost from \"./OriginalPost\";\nimport { useSelector } from \"react-redux\";\nimport CommentContainer from \"../CommentContainer/CommentContainer\";\nimport ThreadInfo from \"./ThreadInfo\";\n/**\n * ThreadContainer holds all information about a thread; rootpost, comments etc\n * @property {string} focusedThread the threadId of the thread we're currently focusing on \n * @property {Function} handleFocusedThread - callback funktion for setting the focused thread\n * @property {function} resetFocusedThread callback for resetting the focused thread\n * @property {boolean} threadLock used for conditional rendering of threads\n * @returns a div with the Originalpost and comments\n */\n\nconst ThreadContainer = ({\n  focusedThread,\n  handleFocusedThread,\n  resetFocusedThread,\n  threadLock\n}) => {\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(state => state.socketState.server.listOfThreads); //helper function for retrieving the right thread from state\n\n  const rightThread = list => {\n    for (const thread of list) {\n      if (thread.id === focusedThread) {\n        return thread;\n      }\n    }\n\n    return null;\n  };\n  /*local state for actual thread object*/\n\n\n  const [thread, setThread] = React.useState(rightThread(listOfThreads));\n  /* state for thread comments */\n\n  /*update the focused thread when clicked, refire when focusedThread or state's thread is updated */\n\n  React.useEffect(() => {\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      setThread(actual);\n    }\n  }, [focusedThread, listOfThreads]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"focused-view-custom-bg text-white flex flex-col content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h-screen75  ml-5 mr-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, !focusedThread && threadLock ? listOfThreads.map((thread, index) => {\n    return /*#__PURE__*/React.createElement(ThreadInfo, {\n      handleFocusedThread: handleFocusedThread,\n      thread: thread,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 18\n      }\n    });\n  }) : null, focusedThread && thread ? /*#__PURE__*/React.createElement(OriginalPost, {\n    handleFocusedThread: handleFocusedThread,\n    thread: thread,\n    focusedThread: focusedThread,\n    resetFocusedThread: resetFocusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 34\n    }\n  }) : null, focusedThread && thread ? /*#__PURE__*/React.createElement(CommentContainer, {\n    thread: thread,\n    focusedThread: focusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 34\n    }\n  }) : null));\n};\n\nexport default ThreadContainer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadContainer.js"],"names":["React","SearchBar","OriginalPost","useSelector","CommentContainer","ThreadInfo","ThreadContainer","focusedThread","handleFocusedThread","resetFocusedThread","threadLock","listOfThreads","state","socketState","server","rightThread","list","thread","id","setThread","useState","useEffect","actual","map","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,OAAOC,gBAAP,MAA6B,sCAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA;;;;;;;;;AAQA,MAAMC,eAAe,GAAG,CAAC;AAACC,EAAAA,aAAD;AAAgBC,EAAAA,mBAAhB;AAAqCC,EAAAA,kBAArC;AAAyDC,EAAAA;AAAzD,CAAD,KAA2E;AAE/F;AACA,QAAMC,aAAa,GAAGR,WAAW,CAC9BS,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBH,aADL,CAAjC,CAH+F,CAO/F;;AACA,QAAMI,WAAW,GAAIC,IAAD,IAAU;AAC1B,SAAK,MAAMC,MAAX,IAAqBD,IAArB,EAA2B;AACzB,UAAIC,MAAM,CAACC,EAAP,KAAcX,aAAlB,EAAiC;AAC/B,eAAOU,MAAP;AACD;AACF;;AACH,WAAO,IAAP;AACD,GAPD;AASA;;;AACA,QAAM,CAACA,MAAD,EAASE,SAAT,IAAsBnB,KAAK,CAACoB,QAAN,CAAeL,WAAW,CAACJ,aAAD,CAA1B,CAA5B;AACA;;AAEA;;AACAX,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAIV,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAMW,MAAM,GAAGP,WAAW,CAACJ,aAAD,CAA1B;AACAQ,MAAAA,SAAS,CAACG,MAAD,CAAT;AACD;AACF,GALD,EAKG,CAACf,aAAD,EAAgBI,aAAhB,CALH;AAMF,sBACE;AAAK,IAAA,SAAS,EAAC,gEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,CAACJ,aAAD,IAAkBG,UAAlB,GACAC,aAAa,CAACY,GAAd,CAAkB,CAACN,MAAD,EAASO,KAAT,KAAmB;AACnC,wBAAO,oBAAC,UAAD;AAAY,MAAA,mBAAmB,EAAEhB,mBAAjC;AAAqD,MAAA,MAAM,EAAES,MAA7D;AAAqE,MAAA,GAAG,EAAEO,KAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFC,CADA,GAGC,IAJH,EAMCjB,aAAa,IAAIU,MAAjB,gBAA0B,oBAAC,YAAD;AAAc,IAAA,mBAAmB,EAAET,mBAAnC;AAAwD,IAAA,MAAM,EAAES,MAAhE;AAAwE,IAAA,aAAa,EAAEV,aAAvF;AAAsG,IAAA,kBAAkB,EAAEE,kBAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,GAA6K,IAN9K,EAOCF,aAAa,IAAIU,MAAjB,gBAA0B,oBAAC,gBAAD;AAAkB,IAAA,MAAM,EAAEA,MAA1B;AAAkC,IAAA,aAAa,EAAEV,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,GAA+F,IAPhG,CAFF,CADF;AAcD,CA1CD;;AA4CA,eAAeD,eAAf","sourcesContent":["import React from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport OriginalPost from \"./OriginalPost\";\nimport {useSelector} from \"react-redux\"\nimport CommentContainer from \"../CommentContainer/CommentContainer\"\nimport ThreadInfo from \"./ThreadInfo\";\n/**\n * ThreadContainer holds all information about a thread; rootpost, comments etc\n * @property {string} focusedThread the threadId of the thread we're currently focusing on \n * @property {Function} handleFocusedThread - callback funktion for setting the focused thread\n * @property {function} resetFocusedThread callback for resetting the focused thread\n * @property {boolean} threadLock used for conditional rendering of threads\n * @returns a div with the Originalpost and comments\n */\nconst ThreadContainer = ({focusedThread, handleFocusedThread, resetFocusedThread, threadLock }) => {\n    \n    // list of all threads in server object from redux store\n    const listOfThreads = useSelector(\n      (state) => state.socketState.server.listOfThreads\n    );\n  \n    //helper function for retrieving the right thread from state\n    const rightThread = (list) => {\n        for (const thread of list) {\n          if (thread.id === focusedThread) {\n            return thread;\n          }\n        }\n      return null;\n    };\n  \n    /*local state for actual thread object*/\n    const [thread, setThread] = React.useState(rightThread(listOfThreads));\n    /* state for thread comments */\n  \n    /*update the focused thread when clicked, refire when focusedThread or state's thread is updated */\n    React.useEffect(() => {\n      if (listOfThreads != null) {\n        const actual = rightThread(listOfThreads);\n        setThread(actual);\n      }\n    }, [focusedThread, listOfThreads]);\n  return (\n    <div className=\"focused-view-custom-bg text-white flex flex-col content-center\">\n      \n      <div className=\"h-screen75  ml-5 mr-5\">\n      { !focusedThread && threadLock ? \n        listOfThreads.map((thread, index) => {\n          return <ThreadInfo handleFocusedThread={handleFocusedThread}thread={thread} key={index}/>\n      }):null }\n  \n      {focusedThread && thread ? <OriginalPost handleFocusedThread={handleFocusedThread} thread={thread} focusedThread={focusedThread} resetFocusedThread={resetFocusedThread} /> : null}\n      {focusedThread && thread ? <CommentContainer thread={thread} focusedThread={focusedThread} /> : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ThreadContainer;\n"]},"metadata":{},"sourceType":"module"}