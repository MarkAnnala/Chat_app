{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/ThreadList.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport plus from \"../../img/plus.svg\";\nimport CreateThread from \"./CreateThread\";\n/**\n * ThreadList is the component which lists all threads the user has access to\n * @property {String} focusedPage - a string used to check what page we are focusing on\n * @property {string} username  username of the logged in user\n * @returns A div containing all threads that the logged in user can access\n */\n\nconst ThreadList = ({\n  focusedPage,\n  username\n}) => {\n  const createThread = useRef(null);\n  /* Add event listener so we can detect clicks outside create thread modal */\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n  /*Handle click outside createThread modal */\n\n  const handleClick = e => {\n    if (showCreateThread && createThread.current.contains(e.target)) {\n      // inside click\n      return;\n    } else {\n      console.log(e.current);\n      setShowCreateThread(false);\n    }\n  };\n  /* used for the hover effect on + sign */\n\n\n  const [hovered, setHovered] = React.useState(false);\n  const [showCreateThread, setShowCreateThread] = React.useState(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"threadListHeader\",\n    className: \"text-white text-xl h-auto border-solid border-b-2 border-gray-700  mt-4 flex flex-row justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Your Threads\", /*#__PURE__*/React.createElement(\"img\", {\n    src: plus,\n    onMouseEnter: () => {\n      setHovered(!hovered);\n    },\n    onMouseLeave: () => {\n      setHovered(!hovered);\n    },\n    alt: \"Create a new thread!\",\n    className: hovered ? \"plusIcon-custom-hover h-6 w-6 cursor-pointer\" : \"h-6 w-6 cursor-pointer\",\n    onClick: () => {\n      setShowCreateThread(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, showCreateThread ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: createThread,\n    className: \"w-1/2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CreateThread, {\n    setShowCreateThread: setShowCreateThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }))) : null), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"threadList\",\n    className: \"text-white pt-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, \"list of threads created by you\"));\n};\n\nexport default ThreadList;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/ThreadList.js"],"names":["React","useRef","useEffect","CreateThread","ThreadList","focusedPage","username","createThread","document","addEventListener","handleClick","removeEventListener","e","showCreateThread","current","contains","target","console","log","setShowCreateThread","hovered","setHovered","useState","plus"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA;;;;;;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA+B;AAChD,QAAMC,YAAY,GAAGN,MAAM,CAAC,IAAD,CAA3B;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCC,WAAvC;AACA,WAAO,MAAM;AACXF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0CD,WAA1C;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA;;AACA,QAAMA,WAAW,GAAIE,CAAD,IAAO;AACzB,QAAIC,gBAAgB,IAAIN,YAAY,CAACO,OAAb,CAAqBC,QAArB,CAA8BH,CAAC,CAACI,MAAhC,CAAxB,EAAiE;AAC/D;AACA;AACD,KAHD,MAGO;AACLC,MAAAA,OAAO,CAACC,GAAR,CAAYN,CAAC,CAACE,OAAd;AACAK,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD;AACF,GARD;AASA;;;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBrB,KAAK,CAACsB,QAAN,CAAe,KAAf,CAA9B;AACA,QAAM,CAACT,gBAAD,EAAmBM,mBAAnB,IAA0CnB,KAAK,CAACsB,QAAN,CAAe,KAAf,CAAhD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,EAAE,EAAC,kBADL;AAEE,IAAA,SAAS,EAAC,uGAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAKE;AACE,IAAA,GAAG,EAAEC,IADP;AAEE,IAAA,YAAY,EAAE,MAAM;AAClBF,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,KAJH;AAKE,IAAA,YAAY,EAAE,MAAM;AAClBC,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,KAPH;AAQE,IAAA,GAAG,EAAC,sBARN;AASE,IAAA,SAAS,EACPA,OAAO,GACH,8CADG,GAEH,wBAZR;AAcE,IAAA,OAAO,EAAE,MAAM;AACbD,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,KAhBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,eAyBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,gBAAgB,gBACf;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAEN,YAAV;AAAwB,IAAA,SAAS,EAAE,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAc,IAAA,mBAAmB,EAAEY,mBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADe,GAMb,IAPN,CAzBF,eAkCE;AAAK,IAAA,EAAE,EAAC,YAAR;AAAqB,IAAA,SAAS,EAAC,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAlCF,CADF;AAyCD,CAlED;;AAoEA,eAAef,UAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport plus from \"../../img/plus.svg\";\nimport CreateThread from \"./CreateThread\";\n\n/**\n * ThreadList is the component which lists all threads the user has access to\n * @property {String} focusedPage - a string used to check what page we are focusing on\n * @property {string} username  username of the logged in user\n * @returns A div containing all threads that the logged in user can access\n */\nconst ThreadList = ({ focusedPage, username }) => {\n  const createThread = useRef(null);\n\n  /* Add event listener so we can detect clicks outside create thread modal */\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  /*Handle click outside createThread modal */\n  const handleClick = (e) => {\n    if (showCreateThread && createThread.current.contains(e.target)) {\n      // inside click\n      return;\n    } else {\n      console.log(e.current);\n      setShowCreateThread(false);\n    }\n  };\n  /* used for the hover effect on + sign */\n  const [hovered, setHovered] = React.useState(false);\n  const [showCreateThread, setShowCreateThread] = React.useState(false);\n \n  return (\n    <div className=\"flex flex-col ml-2\">\n      <div\n        id=\"threadListHeader\"\n        className=\"text-white text-xl h-auto border-solid border-b-2 border-gray-700  mt-4 flex flex-row justify-between\"\n      >\n        Your Threads\n        <img\n          src={plus}\n          onMouseEnter={() => {\n            setHovered(!hovered);\n          }}\n          onMouseLeave={() => {\n            setHovered(!hovered);\n          }}\n          alt=\"Create a new thread!\"\n          className={\n            hovered\n              ? \"plusIcon-custom-hover h-6 w-6 cursor-pointer\"\n              : \"h-6 w-6 cursor-pointer\"\n          }\n          onClick={() => {\n            setShowCreateThread(true);\n          }}\n        />\n      </div>\n      <div>\n        {showCreateThread ? (\n          <div className=\"addFriend-custom-overlay\">\n            <div ref={createThread} className =\"w-1/2\">\n              <CreateThread setShowCreateThread={setShowCreateThread} />\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <div id=\"threadList\" className=\"text-white pt-1\">\n        list of threads created by you\n        {/* MAP a list of thread components here */}\n      </div>\n    </div>\n  );\n};\n\nexport default ThreadList;\n"]},"metadata":{},"sourceType":"module"}