{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Server.js\";\nimport React from 'react';\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch } from \"react-redux\";\n\nconst axios = require(\"axios\");\n/**\n * Component for displaying the global server\n * @property {function} handleFocusedPage Callback function passed down from LandingPage - Used to get id of what page we click on\n * @property {object} server the global server object\n * @property {Function} resetFocusedThread - callback for resetting the currently focused thread\n * @returns the button of the global server\n */\n\n\nconst Server = ({\n  server,\n  handleFocusedPage,\n  resetFocusedThread\n}) => {\n  /* useDispatch from dispatch function from store */\n  const dispatch = useDispatch();\n  /*Reset the focused thread, so we show all threads in focusedview */\n\n  const handle = e => {\n    resetFocusedThread();\n    handleFocusedPage(e);\n    axios.post(\"/\", JSON.stringify({\n      action: \"thread_INFO\",\n      server: server.serverName\n    })).then(function (response) {\n      console.log(response);\n      /* The response contains: status and a payload data: server/token */\n\n      switch (response.status) {\n        /* Login accepted */\n        case 200:\n          {\n            const data = {\n              threads: response.data\n            };\n            dispatch(actions.addThreads(data));\n            break;\n          }\n\n        case 404:\n          {\n            const data = response.data;\n            console.log(data);\n            break;\n          }\n\n        default:\n          alert(\"cannot fetch threads from server\");\n          break;\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: server.serverName,\n    onClick: handle,\n    className: \"rounded-full h-16 w-16 mb-2 mt-2 input-box-custom-bg hover:bg-gray-500 flex items-center justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, server.serverName);\n};\n\nexport default Server;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Server.js"],"names":["React","actions","useDispatch","axios","require","Server","server","handleFocusedPage","resetFocusedThread","dispatch","handle","e","post","JSON","stringify","action","serverName","then","response","console","log","status","data","threads","addThreads","alert","catch","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;AAEA;;;;;;;;;AAOA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,iBAAV;AAA6BC,EAAAA;AAA7B,CAAD,KAAuD;AAElE;AACA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA;;AACA,QAAMQ,MAAM,GAAIC,CAAD,IAAK;AAChBH,IAAAA,kBAAkB;AAClBD,IAAAA,iBAAiB,CAACI,CAAD,CAAjB;AAEAR,IAAAA,KAAK,CACJS,IADD,CAEE,GAFF,EAGEC,IAAI,CAACC,SAAL,CAAe;AACbC,MAAAA,MAAM,EAAE,aADK;AAEbT,MAAAA,MAAM,EAAEA,MAAM,CAACU;AAFF,KAAf,CAHF,EAQCC,IARD,CAQM,UAAUC,QAAV,EAAoB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA;;AACA,cAAQA,QAAQ,CAACG,MAAjB;AACE;AACA,aAAK,GAAL;AAAU;AACR,kBAAMC,IAAI,GAAG;AAACC,cAAAA,OAAO,EAAEL,QAAQ,CAACI;AAAnB,aAAb;AACAb,YAAAA,QAAQ,CAACR,OAAO,CAACuB,UAAR,CAAmBF,IAAnB,CAAD,CAAR;AACA;AACD;;AACD,aAAK,GAAL;AAAU;AACR,kBAAMA,IAAI,GAAGJ,QAAQ,CAACI,IAAtB;AACAH,YAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA;AACD;;AACD;AACEG,UAAAA,KAAK,CAAC,kCAAD,CAAL;AACA;AAdJ;AAgBD,KA5BD,EA6BCC,KA7BD,CA6BO,UAAUC,KAAV,EAAiB;AACtBR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD,KA/BD;AAiCH,GArCD;;AAwCA,sBACI;AAAK,IAAA,EAAE,EAAErB,MAAM,CAACU,UAAhB;AAA4B,IAAA,OAAO,EAAEN,MAArC;AAA6C,IAAA,SAAS,EAAC,yGAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,MAAM,CAACU,UADZ,CADJ;AAKH,CAlDD;;AAoDA,eAAeX,MAAf","sourcesContent":["import React from 'react';\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch } from \"react-redux\";\n\nconst axios = require(\"axios\");\n\n/**\n * Component for displaying the global server\n * @property {function} handleFocusedPage Callback function passed down from LandingPage - Used to get id of what page we click on\n * @property {object} server the global server object\n * @property {Function} resetFocusedThread - callback for resetting the currently focused thread\n * @returns the button of the global server\n */\nconst Server = ({ server, handleFocusedPage, resetFocusedThread }) => {\n\n    /* useDispatch from dispatch function from store */\n    const dispatch = useDispatch();\n    /*Reset the focused thread, so we show all threads in focusedview */\n    const handle = (e)=>{\n        resetFocusedThread();\n        handleFocusedPage(e);\n\n        axios\n        .post(\n          \"/\",\n          JSON.stringify({\n            action: \"thread_INFO\",\n            server: server.serverName,\n          })\n        )\n        .then(function (response) {\n          console.log(response);\n          \n          /* The response contains: status and a payload data: server/token */\n          switch (response.status) {\n            /* Login accepted */\n            case 200: {\n              const data = {threads: response.data};\n              dispatch(actions.addThreads(data));\n              break;\n            }\n            case 404: {\n              const data = response.data;\n              console.log(data);\n              break;\n            }\n            default:\n              alert(\"cannot fetch threads from server\");\n              break;\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n\n    }\n\n\n    return (\n        <div id={server.serverName} onClick={handle} className=\"rounded-full h-16 w-16 mb-2 mt-2 input-box-custom-bg hover:bg-gray-500 flex items-center justify-center\"> \n            {server.serverName}\n        </div>\n    )\n}\n\nexport default Server;"]},"metadata":{},"sourceType":"module"}