{"ast":null,"code":"/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst LOGOUT = \"LOGOUT\";\nconst RESET = \"RESET\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\nconst ADD_THREADS = \"ADD_THREADS\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst RESET_LAST_SEEN = \"RESET_LAST_SEEN\";\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\",\n      // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: data.timestamp\n    }\n  };\n}\nexport function addComment(data) {\n  console.log(data);\n  return {\n    type: ADD_COMMENT,\n    payload: {\n      thread_id: data.thread_id,\n      index: data.index,\n      reply_index: data.reply_index,\n      username: data.username,\n      comment: data.comment\n    }\n  };\n}\nexport function addFriend(data) {\n  return {\n    type: ADDFRIEND,\n    payload: {\n      username: data.username\n    }\n  };\n}\nexport function connect() {\n  return {\n    type: CONNECT,\n    payload: null\n  };\n}\nexport function disconnected(data) {\n  return {\n    type: DISCONNECTED,\n    payload: data\n  };\n}\nexport function logOut(data) {\n  return {\n    type: LOGOUT\n  };\n}\nexport function login({\n  values\n}) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members\n    }\n  };\n}\nexport function loginSuccess(data) {\n  return {\n    type: SUCCESS,\n    payload: data\n  };\n}\nexport function createThread(values) {\n  return {\n    type: CREATE_THREAD,\n    payload: {\n      serverName: values.server.serverName,\n      thread_id: null,\n      username: values.user,\n      root_post: {\n        root_header: values.summary,\n        root_cooment: values.details\n      },\n      timestamp: null,\n      comments: []\n    }\n  };\n}\nexport function addThreads(data) {\n  return {\n    type: ADD_THREADS,\n    payload: {\n      threads: data.threads\n    }\n  };\n}\nexport function loginFailure(data) {\n  return {\n    type: FAILURE,\n    payload: data\n  };\n}\nexport function response(data) {\n  return {\n    type: RESPONSE,\n    payload: data\n  };\n}\nexport function setServer(server) {\n  return {\n    type: SET,\n    payload: server\n  };\n}\nexport function resetLoginState() {\n  return {\n    type: RESET\n  };\n}\nexport function resetLastSeen(data) {\n  return {\n    type: RESET_LAST_SEEN,\n    payload: data\n  };\n}","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/actions/actions.js"],"names":["CONNECT","LOGIN","RESPONSE","REGISTER","DISCONNECTED","SET","SUCCESS","FAILURE","SENDMESSAGE","ADDFRIEND","CHAT_REQUEST","LOGOUT","RESET","CREATE_THREAD","ADD_THREADS","ADD_COMMENT","RESET_LAST_SEEN","sendMessage","data","type","payload","action","chat_id","chatID","user_id","username","message","timestamp","addComment","console","log","thread_id","index","reply_index","comment","addFriend","connect","disconnected","logOut","login","values","Username","password","Password","register","startChat","chat_name","chatName","from","members","loginSuccess","createThread","serverName","server","user","root_post","root_header","summary","root_cooment","details","comments","addThreads","threads","loginFailure","response","setServer","resetLoginState","resetLastSeen"],"mappings":"AAAA;;;;;AAKA;AACA,MAAMA,OAAO,GAAG,SAAhB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,GAAG,GAAG,WAAZ;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,OAAO,GAAG,SAAhB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,SAAS,GAAG,WAAlB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,MAAM,GAAG,QAAf;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAGA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAEX,WADD;AAELY,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,cADD;AACiB;AACxBC,MAAAA,OAAO,EAAEJ,IAAI,CAACK,MAFP;AAGPC,MAAAA,OAAO,EAAEN,IAAI,CAACO,QAHP;AAIPC,MAAAA,OAAO,EAAER,IAAI,CAACQ,OAJP;AAKPC,MAAAA,SAAS,EAAET,IAAI,CAACS;AALT;AAFJ,GAAP;AAUD;AAED,OAAO,SAASC,UAAT,CAAoBV,IAApB,EAA0B;AAC/BW,EAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACA,SAAO;AACLC,IAAAA,IAAI,EAAEJ,WADD;AAELK,IAAAA,OAAO,EAAE;AACPW,MAAAA,SAAS,EAAEb,IAAI,CAACa,SADT;AAEPC,MAAAA,KAAK,EAAEd,IAAI,CAACc,KAFL;AAGPC,MAAAA,WAAW,EAAEf,IAAI,CAACe,WAHX;AAIPR,MAAAA,QAAQ,EAAEP,IAAI,CAACO,QAJR;AAKPS,MAAAA,OAAO,EAAEhB,IAAI,CAACgB;AALP;AAFJ,GAAP;AAUD;AAED,OAAO,SAASC,SAAT,CAAmBjB,IAAnB,EAAyB;AAC9B,SAAO;AAAEC,IAAAA,IAAI,EAAEV,SAAR;AAAmBW,IAAAA,OAAO,EAAE;AAAEK,MAAAA,QAAQ,EAAEP,IAAI,CAACO;AAAjB;AAA5B,GAAP;AACD;AAED,OAAO,SAASW,OAAT,GAAmB;AACxB,SAAO;AAAEjB,IAAAA,IAAI,EAAEnB,OAAR;AAAiBoB,IAAAA,OAAO,EAAE;AAA1B,GAAP;AACD;AAED,OAAO,SAASiB,YAAT,CAAsBnB,IAAtB,EAA4B;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEf,YAAR;AAAsBgB,IAAAA,OAAO,EAAEF;AAA/B,GAAP;AACD;AAED,OAAO,SAASoB,MAAT,CAAgBpB,IAAhB,EAAsB;AAC3B,SAAO;AAAEC,IAAAA,IAAI,EAAER;AAAR,GAAP;AACD;AAED,OAAO,SAAS4B,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA2B;AAChCX,EAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ;AACA,SAAO;AACLrB,IAAAA,IAAI,EAAElB,KADD;AAELmB,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,OADD;AAEPI,MAAAA,QAAQ,EAAEe,MAAM,CAACC,QAFV;AAGPC,MAAAA,QAAQ,EAAEF,MAAM,CAACG;AAHV;AAFJ,GAAP;AAQD;AAED,OAAO,SAASC,QAAT,CAAkBJ,MAAlB,EAA0B;AAC/BX,EAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ;AACA,SAAO;AACLrB,IAAAA,IAAI,EAAEhB,QADD;AAELiB,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,UADD;AAEPI,MAAAA,QAAQ,EAAEe,MAAM,CAACC,QAFV;AAGPC,MAAAA,QAAQ,EAAEF,MAAM,CAACG;AAHV;AAFJ,GAAP;AAQD;AAED,OAAO,SAASE,SAAT,CAAmBL,MAAnB,EAA2B;AAChCX,EAAAA,OAAO,CAACC,GAAR,CAAYU,MAAZ;AACA,SAAO;AACLrB,IAAAA,IAAI,EAAET,YADD;AAELU,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE,cADD;AAEPyB,MAAAA,SAAS,EAAEN,MAAM,CAACO,QAFX;AAGPC,MAAAA,IAAI,EAAER,MAAM,CAACQ,IAHN;AAIPC,MAAAA,OAAO,EAAET,MAAM,CAACS;AAJT;AAFJ,GAAP;AASD;AACD,OAAO,SAASC,YAAT,CAAsBhC,IAAtB,EAA4B;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEb,OAAR;AAAiBc,IAAAA,OAAO,EAAEF;AAA1B,GAAP;AACD;AACD,OAAO,SAASiC,YAAT,CAAsBX,MAAtB,EAA8B;AACnC,SAAO;AACLrB,IAAAA,IAAI,EAAEN,aADD;AAELO,IAAAA,OAAO,EAAE;AACPgC,MAAAA,UAAU,EAAEZ,MAAM,CAACa,MAAP,CAAcD,UADnB;AAEPrB,MAAAA,SAAS,EAAE,IAFJ;AAGPN,MAAAA,QAAQ,EAAEe,MAAM,CAACc,IAHV;AAIPC,MAAAA,SAAS,EAAE;AAAEC,QAAAA,WAAW,EAAEhB,MAAM,CAACiB,OAAtB;AAA+BC,QAAAA,YAAY,EAAElB,MAAM,CAACmB;AAApD,OAJJ;AAKPhC,MAAAA,SAAS,EAAE,IALJ;AAMPiC,MAAAA,QAAQ,EAAE;AANH;AAFJ,GAAP;AAWD;AACD,OAAO,SAASC,UAAT,CAAoB3C,IAApB,EAA0B;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAEL,WADD;AAELM,IAAAA,OAAO,EAAE;AACP0C,MAAAA,OAAO,EAAE5C,IAAI,CAAC4C;AADP;AAFJ,GAAP;AAMD;AAED,OAAO,SAASC,YAAT,CAAsB7C,IAAtB,EAA4B;AACjC,SAAO;AAAEC,IAAAA,IAAI,EAAEZ,OAAR;AAAiBa,IAAAA,OAAO,EAAEF;AAA1B,GAAP;AACD;AAED,OAAO,SAAS8C,QAAT,CAAkB9C,IAAlB,EAAwB;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAEjB,QAAR;AAAkBkB,IAAAA,OAAO,EAAEF;AAA3B,GAAP;AACD;AAED,OAAO,SAAS+C,SAAT,CAAmBZ,MAAnB,EAA2B;AAChC,SAAO;AAAElC,IAAAA,IAAI,EAAEd,GAAR;AAAae,IAAAA,OAAO,EAAEiC;AAAtB,GAAP;AACD;AAED,OAAO,SAASa,eAAT,GAA2B;AAChC,SAAO;AAAE/C,IAAAA,IAAI,EAAEP;AAAR,GAAP;AACD;AAED,OAAO,SAASuD,aAAT,CAAuBjD,IAAvB,EAA6B;AAClC,SAAO;AAAEC,IAAAA,IAAI,EAAEH,eAAR;AAAyBI,IAAAA,OAAO,EAACF;AAAjC,GAAP;AACD","sourcesContent":["/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst LOGOUT = \"LOGOUT\";\nconst RESET = \"RESET\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\nconst ADD_THREADS = \"ADD_THREADS\";\nconst ADD_COMMENT = \"ADD_COMMENT\";\nconst RESET_LAST_SEEN = \"RESET_LAST_SEEN\";\n\n\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\", // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: data.timestamp,\n    },\n  };\n}\n\nexport function addComment(data) {\n  console.log(data);\n  return {\n    type: ADD_COMMENT,\n    payload: {\n      thread_id: data.thread_id,\n      index: data.index,\n      reply_index: data.reply_index,\n      username: data.username,\n      comment: data.comment,\n    },\n  };\n}\n\nexport function addFriend(data) {\n  return { type: ADDFRIEND, payload: { username: data.username } };\n}\n\nexport function connect() {\n  return { type: CONNECT, payload: null };\n}\n\nexport function disconnected(data) {\n  return { type: DISCONNECTED, payload: data };\n}\n\nexport function logOut(data) {\n  return { type: LOGOUT };\n}\n\nexport function login({ values }) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members,\n    },\n  };\n}\nexport function loginSuccess(data) {\n  return { type: SUCCESS, payload: data };\n}\nexport function createThread(values) {\n  return {\n    type: CREATE_THREAD,\n    payload: {\n      serverName: values.server.serverName,\n      thread_id: null,\n      username: values.user,\n      root_post: { root_header: values.summary, root_cooment: values.details },\n      timestamp: null,\n      comments: [],\n    },\n  };\n}\nexport function addThreads(data) {\n  return { \n    type: ADD_THREADS,\n    payload: {\n      threads: data.threads, \n    }\n  };\n}\n\nexport function loginFailure(data) {\n  return { type: FAILURE, payload: data };\n}\n\nexport function response(data) {\n  return { type: RESPONSE, payload: data };\n}\n\nexport function setServer(server) {\n  return { type: SET, payload: server };\n}\n\nexport function resetLoginState() {\n  return { type: RESET };\n}\n\nexport function resetLastSeen(data) {\n  return { type: RESET_LAST_SEEN, payload:data };\n}\n"]},"metadata":{},"sourceType":"module"}