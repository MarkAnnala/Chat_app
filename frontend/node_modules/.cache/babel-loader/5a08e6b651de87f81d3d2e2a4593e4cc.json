{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/CreateThread.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\n/**\n * CreateThread is the component which is seen when pressing '+' icon next to active threads\n * @param {bool} showCreateThread a Boolean indicating if this monad is visible or not\n * @param {function} setShowCreateThread callback is used to show/hide the createThread modal\n * @returns A div where user can create a new Thread\n */\n\nconst CreateThread = ({\n  showCreateThread,\n  setShowCreateThread\n}) => {\n  /* Add event listener so we can detect clicks outside create thread modal */\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n  /*Handle click outside createThread modal */\n\n  const handleClick = e => {\n    if (showCreateThread == true) {\n      if (monad.current.contains(e.target)) {\n        // inside click\n        return;\n      } else {\n        setShowCreateThread(false);\n      }\n    }\n  };\n\n  const monad = useRef();\n  /*get the current server */\n\n  const server = useSelector(state => state.socketState.server);\n  /*get the currently logged in user*/\n\n  const username = useSelector(state => state.socketState.username);\n  /*Local state for the summary*/\n\n  const [summary, setSummary] = useState(\"\");\n  /*Local state for the details */\n\n  const [details, setDetails] = useState(\"\");\n  /* useDispatch from dispatch function from store */\n\n  const dispatch = useDispatch();\n\n  const createThread = () => {\n    if (summary != \"\" && details != \"\") {\n      const data = {\n        server: server,\n        user: username,\n        summary: summary,\n        details: details\n      };\n      dispatch(actions.createThread(data));\n    } else {\n      setShowCreateThread(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-modal\",\n    ref: monad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"AddFriend\",\n    className: \"text-base\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, \"Enter the header for your thread: \")), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"Summary\",\n    placeholder: \"Summary...\",\n    onChange: e => {\n      setSummary(e.target.value);\n    },\n    className: \" flex flex-wrap shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Enter a detailed description:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: e => {\n      setDetails(e.target.value);\n    },\n    placeholder: \"Details..\",\n    type: \"text\",\n    className: \"mb-2 h-20 flex flex-warp shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createThread,\n    className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border border-green-700 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-red-900 hover:bg-red-700 text-white font-bold py-2 px-4 border border-red-700 rounded\",\n    onClick: () => {\n      setShowCreateThread(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Close\")));\n};\n\nexport default CreateThread;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/CreateThread.js"],"names":["React","useState","useRef","useEffect","useDispatch","useSelector","actions","CreateThread","showCreateThread","setShowCreateThread","document","addEventListener","handleClick","removeEventListener","e","monad","current","contains","target","server","state","socketState","username","summary","setSummary","details","setDetails","dispatch","createThread","data","user","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\n\n/**\n * CreateThread is the component which is seen when pressing '+' icon next to active threads\n * @param {bool} showCreateThread a Boolean indicating if this monad is visible or not\n * @param {function} setShowCreateThread callback is used to show/hide the createThread modal\n * @returns A div where user can create a new Thread\n */\nconst CreateThread = ({ showCreateThread, setShowCreateThread }) => {\n  /* Add event listener so we can detect clicks outside create thread modal */\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  /*Handle click outside createThread modal */\n  const handleClick = (e) => {\n    if (showCreateThread == true) {\n      if (monad.current.contains(e.target)) {\n        // inside click\n        return;\n      } else {\n        setShowCreateThread(false);\n      }\n    }\n  };\n\n  const monad = useRef();\n\n  /*get the current server */\n  const server = useSelector((state) => state.socketState.server);\n\n  /*get the currently logged in user*/\n  const username = useSelector((state) => state.socketState.username);\n\n  /*Local state for the summary*/\n  const [summary, setSummary] = useState(\"\");\n\n  /*Local state for the details */\n  const [details, setDetails] = useState(\"\");\n\n  /* useDispatch from dispatch function from store */\n  const dispatch = useDispatch();\n\n  const createThread = () => {\n    if (summary != \"\" && details != \"\") {\n      const data = {\n        server: server,\n        user: username,\n        summary: summary,\n        details: details,\n      };\n      dispatch(actions.createThread(data));\n    } else {\n      setShowCreateThread(false);\n    }\n  };\n\n  return (\n    <div className=\"addFriend-custom-modal\" ref={monad}>\n      <div className=\"addFriend-custom-modal-body\">\n        <label htmlFor=\"AddFriend\" className=\"text-base\">\n          {\" \"}\n          <h1 className=\"text-white\">Enter the header for your thread: </h1>\n        </label>\n        <input\n          id=\"Summary\"\n          placeholder=\"Summary...\"\n          onChange={(e) => {\n            setSummary(e.target.value);\n          }}\n          className=\" flex flex-wrap shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          type=\"text\"\n        ></input>\n        <h1 className=\"mt-2\">Enter a detailed description:</h1>\n\n        <textarea\n          onChange={(e) => {\n            setDetails(e.target.value);\n          }}\n          placeholder=\"Details..\"\n          type=\"text\"\n          className=\"mb-2 h-20 flex flex-warp shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n        ></textarea>\n        <button\n          onClick={createThread}\n          className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border border-green-700 rounded\"\n        >\n          Create\n        </button>\n        <button\n          className=\"bg-red-900 hover:bg-red-700 text-white font-bold py-2 px-4 border border-red-700 rounded\"\n          onClick={() => {\n            setShowCreateThread(false);\n          }}\n        >\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateThread;\n"]},"metadata":{},"sourceType":"module"}