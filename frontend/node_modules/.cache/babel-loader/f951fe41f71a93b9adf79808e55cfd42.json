{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Server.js\";\nimport React from \"react\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ReactTooltip from \"react-tooltip\";\nimport globalButton from \"../../img/global.svg\";\nimport globalButtonHover from \"../../img/globalHover.svg\";\n\nconst axios = require(\"axios\");\n/**\n * Component for displaying the global server\n * @property {function} handleFocusedPage Callback function passed down from LandingPage - Used to get id of what page we click on\n * @property {object} server the global server object\n * @property {Function} resetFocusedThread - callback for resetting the currently focused thread\n * @property {function} setThreadLock used for locking the rendering of threads\n * @returns the button of the global server\n */\n\n\nconst Server = ({\n  server,\n  handleFocusedPage,\n  resetFocusedThread,\n  setThreadLock\n}) => {\n  /* useDispatch from dispatch function from store */\n  const dispatch = useDispatch();\n  /*Get the username, magictoken and list of threads from store */\n\n  const username = useSelector(state => state.socketState.username);\n  const magic_token = useSelector(state => state.socketState.magicToken);\n  /*Reset the focused thread, so we show all threads in focusedview */\n\n  const handle = e => {\n    fetchThreads();\n    resetFocusedThread();\n    handleFocusedPage(e);\n  };\n\n  async function fetchThreads() {\n    setThreadLock(false);\n\n    try {\n      const response = await axios.post(\"/\", JSON.stringify({\n        action: \"fetch_server_contents\",\n        server_name: server.serverName,\n        magic_token: magic_token,\n        username: username\n      }));\n      const data = await response;\n\n      switch (data.status) {\n        case 200:\n          {\n            /*The threads in the list of threads recieced looks different, need to create new thredobjects from that information */\n            let threads = [];\n\n            for (const thread of data.data.threads) {\n              threads.push({\n                rootPost: {\n                  rootHeader: thread.header,\n                  rootComment: thread.text\n                },\n                username: thread.creator,\n                timestamp: thread.timestamp,\n                comments: thread.comment_list,\n                id: thread.thread_id\n              });\n            }\n\n            dispatch(actions.addThreads({\n              threads: threads\n            }));\n          }\n          setThreadLock(true);\n          break;\n\n        case 404:\n          {\n            console.log(data);\n            setThreadLock(true);\n            break;\n          }\n\n        default:\n          setThreadLock(true);\n          alert(\"cannot fetch threads from server\");\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n      setThreadLock(true);\n    }\n  }\n\n  const [hovered, setHovered] = React.useState(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-row justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    id: server.serverName,\n    onMouseEnter: () => {\n      setHovered(!hovered);\n    },\n    onMouseLeave: () => {\n      setHovered(!hovered);\n    },\n    \"data-tip\": true,\n    \"data-for\": \"goToGlobalServer\",\n    src: hovered ? globalButtonHover : globalButton,\n    onClick: handle,\n    className: \"cursor-pointer h-12 w-12 pt-2 mt-2 text-center\",\n    alt: \"global server button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"goToGlobalServer\",\n    place: \"right\",\n    effect: \"solid\",\n    backgroundColor: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"The Global Server\"));\n};\n\nexport default Server;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Server.js"],"names":["React","actions","useDispatch","useSelector","ReactTooltip","axios","require","Server","server","handleFocusedPage","resetFocusedThread","setThreadLock","dispatch","username","state","socketState","magic_token","magicToken","handle","e","fetchThreads","response","post","JSON","stringify","action","server_name","serverName","data","status","threads","thread","push","rootPost","rootHeader","header","rootComment","text","creator","timestamp","comments","comment_list","id","thread_id","addThreads","console","log","alert","error","hovered","setHovered","useState","globalButtonHover","globalButton"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ReactTooltip from \"react-tooltip\";\nimport globalButton from \"../../img/global.svg\";\nimport globalButtonHover from \"../../img/globalHover.svg\";\n\nconst axios = require(\"axios\");\n\n/**\n * Component for displaying the global server\n * @property {function} handleFocusedPage Callback function passed down from LandingPage - Used to get id of what page we click on\n * @property {object} server the global server object\n * @property {Function} resetFocusedThread - callback for resetting the currently focused thread\n * @property {function} setThreadLock used for locking the rendering of threads\n * @returns the button of the global server\n */\nconst Server = ({\n  server,\n  handleFocusedPage,\n  resetFocusedThread,\n  setThreadLock,\n}) => {\n  /* useDispatch from dispatch function from store */\n  const dispatch = useDispatch();\n\n  /*Get the username, magictoken and list of threads from store */\n  const username = useSelector((state) => state.socketState.username);\n  const magic_token = useSelector((state) => state.socketState.magicToken);\n\n  /*Reset the focused thread, so we show all threads in focusedview */\n  const handle = (e) => {\n    fetchThreads();\n    resetFocusedThread();\n    handleFocusedPage(e);\n  };\n\n  async function fetchThreads() {\n    setThreadLock(false);\n    try {\n      const response = await axios.post(\n        \"/\",\n        JSON.stringify({\n          action: \"fetch_server_contents\",\n          server_name: server.serverName,\n          magic_token: magic_token,\n          username: username,\n        })\n      );\n      const data = await response;\n      switch (data.status) {\n        case 200:\n          {\n            /*The threads in the list of threads recieced looks different, need to create new thredobjects from that information */\n            let threads = [];\n            for (const thread of data.data.threads) {\n              threads.push({\n                rootPost: {\n                  rootHeader: thread.header,\n                  rootComment: thread.text,\n                },\n                username: thread.creator,\n                timestamp: thread.timestamp,\n                comments: thread.comment_list,\n                id: thread.thread_id,\n              });\n            }\n            dispatch(actions.addThreads({ threads: threads }));\n          }\n          setThreadLock(true);\n          break;\n        case 404: {\n          console.log(data);\n          setThreadLock(true);\n          break;\n        }\n        default:\n          setThreadLock(true);\n          alert(\"cannot fetch threads from server\");\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n      setThreadLock(true);\n    }\n  }\n  const [hovered, setHovered] = React.useState(false);\n  return (\n    <div className=\"flex flex-row justify-center\">\n      <img\n        id={server.serverName}\n        onMouseEnter={() => {\n          setHovered(!hovered);\n        }}\n        onMouseLeave={() => {\n          setHovered(!hovered);\n        }}\n        data-tip\n        data-for=\"goToGlobalServer\"\n        src={hovered ? globalButtonHover : globalButton}\n        onClick={handle}\n        className=\"cursor-pointer h-12 w-12 pt-2 mt-2 text-center\"\n        alt=\"global server button\"\n      />\n      <ReactTooltip\n        id=\"goToGlobalServer\"\n        place=\"right\"\n        effect=\"solid\"\n        backgroundColor=\"black\"\n      >\n        The Global Server\n      </ReactTooltip>\n    </div>\n  );\n};\n\nexport default Server;\n"]},"metadata":{},"sourceType":"module"}