{"ast":null,"code":"/*\n initialState is the state object that we send into the redux store and can manipulate with the reducers\n */\nconst initialState = {\n  socket: null,\n  wsOnline: false,\n  socketServer: null,\n  firstWelcome: null,\n  username: null,\n  listOfDms: null,\n  listOfFriends: null,\n  server: null\n};\n/**\n * helper function used by action type \"RESPONSE\" and action \"send_message\" to locate the correct dm object index\n * @param {array} list containing all direct messages of the user\n * @param {string} chatID used to identify the correct dm object\n *\n * @returns the index of the correct dm object\n */\n\nconst getChatIndex = (list, chatID) => {\n  let index = 0;\n\n  for (const chat of list) {\n    if (chat.chatID === chatID) {\n      return index;\n    }\n\n    index++;\n  }\n\n  return -1; // this line will only be reached if we give an invalid chatID\n};\n/**\n * performs a task depending on the action.type dispatched - acts more as a middleware for socket handling\n *\n * !!! Reducers shouldn't do sideeffects which this one does - consider this one more as a middleware than a real reducer\n *\n * @param {object} state the current state that is being held by the redux store\n * @property {object} socket contains the actual socket that we communicate with\n * @property {bool} wsOnline is true when the socket is online (used to handle disconnects/time outs)\n * @property {string} socketServer the url of server that we create a websocket with\n * @property {bool} firstWelcome used to know if we've made our first repsonse to socket after login  (TODO maybe better way)\n * @property {array} listOfMessages holds all chatroom objects\n * @property {array} listOfFriends holds all friends usernames\n * @property {string} username holds the username of logged in user\n * @param {object} action contains the type and payload\n * @property {string} action.type what kind of action should the reducer do\n * @property {object} action.payload check actions.js for what it may contain\n *\n * @returns updated state\n */\n\n\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      var firstWelcome;\n\n      if (state.firstWelcome === null) {\n        firstWelcome = true;\n      } else {\n        firstWelcome = state.firstWelcome ? true : false;\n      }\n\n      return { ...state,\n        socket: new WebSocket(state.socketServer),\n        wsOnline: true,\n        firstWelcome: firstWelcome\n      };\n\n    case \"CREATE_THREAD\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    case \"ADDFRIEND\":\n      return { ...state,\n        listOfFriends: state.listOfFriends.concat(action.payload.username)\n      };\n\n    case \"CHAT_REQUEST\":\n      console.log(action.payload);\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    case \"RESPONSE\":\n      /* if data is ack or welcome there's nothning we need to do */\n      if (action.payload.data === \"Welcome\" || action.payload.data === \"ACK\") {\n        return state;\n        /* first response */\n      } else if (action.payload.action === \"login\") {\n        /* need to respond to socket with action = login, username, and magictoken to establish connection */\n        state.socket.send(JSON.stringify(action.payload));\n        /* TODO TODO\n          This if ann else cases handles the fact that we accidentely get 2 login responses from backend right now\n          not to trigger useEffect in ChatContainer we have this case here.. TODO remove it after backend fixes it\n        */\n\n        if (state.firstWelcome === false) {\n          console.log(\"Duplicate welcome login response...\");\n          return state;\n        } else {\n          console.log(\"first welcome login response\");\n          return { ...state,\n            firstWelcome: false,\n            // no longer first welcome..\n\n            /* \n            TESTING -- TODO - HARDCODED the login object that we should get in accordance with doc\n            in accordance with doc it should be a response with action \"init_login\" but we will do \n            it here right now\n             */\n            listOfDms: [],\n            listOfFriends: [],\n            username: action.payload.username,\n\n            /* set hardcoded server oject with name of GLOBAL, empty thread list and member list with only urself */\n            server: {\n              serverName: \"GLOBAL\",\n              serverInformation: \"This is the global server that everyone joins. Make threads, comment and be happy peeps.\",\n              listOfThreads: [{\n                rootPost: {\n                  rootHeader: \"Hjälp med linux!\",\n                  rootComment: \"Hej, har nån bra koll på mint??\"\n                },\n                username: \"Skooben\",\n                timestamp: \"2020-01-10\",\n                id: 1\n              }, {\n                rootPost: {\n                  rootHeader: \"Knarka i helgen?\",\n                  rootComment: \"Tjena, skulle vilja knarka med någon i helgen. Sugen?\"\n                },\n                username: \"Rövpannan\",\n                timestamp: \"2019-12-24\",\n                id: 2\n              }],\n              members: [action.payload.username]\n            }\n          };\n        }\n      } else {\n        const parsedData = JSON.parse(action.payload.data);\n        /* We respond differently depending on the action/type of received data */\n\n        switch (parsedData.action) {\n          case \"send_message\":\n            /* add the new msg object to the right dm object */\n            const index = getChatIndex(state.listOfDms, parsedData.chat_id);\n            return { ...state,\n              listOfDms: [...state.listOfDms, state.listOfDms[index].messages.push({\n                message: parsedData.message,\n                username: parsedData.user_id\n              })]\n            };\n\n          case \"chat_request\":\n            /* insert a new chat object to listOfDms */\n            if (parsedData.status === \"ok\") {\n              return { ...state,\n                listOfDms: [...state.listOfDms,\n                /* newly inserted object */\n                {\n                  chatName: parsedData.chat_name,\n                  chatID: parsedData.chat_id,\n                  messages: [],\n                  members: parsedData.members,\n                  creator: parsedData.creator\n                }]\n              };\n            }\n\n            return state;\n\n          default:\n            return state;\n        }\n      }\n\n    case \"DISCONNECTED\":\n      return { ...state,\n        socket: action.payload,\n        wsOnline: false,\n        firstWelcome: null,\n        listOfDms: null,\n        listOfFriends: null,\n        username: null\n      };\n\n    case \"SETSERVER\":\n      return { ...state,\n        socketServer: action.payload\n      };\n\n    case \"SENDMESSAGE\":\n      const index = getChatIndex(state.listOfDms, action.payload.chat_id);\n\n      if (index !== -1) {\n        const msgObject = action.payload;\n        state.socket.send(JSON.stringify(msgObject));\n        /* update listOfDms in state */\n\n        var updateListOfDms = state.listOfDms;\n        updateListOfDms[index].messages.push({\n          message: msgObject.message,\n          username: msgObject.user_id\n        });\n        return { ...state,\n          listOfDms: updateListOfDms\n        };\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/reducers/socketReducer.js"],"names":["initialState","socket","wsOnline","socketServer","firstWelcome","username","listOfDms","listOfFriends","server","getChatIndex","list","chatID","index","chat","socketReducer","state","action","type","console","log","WebSocket","send","JSON","stringify","payload","concat","data","serverName","serverInformation","listOfThreads","rootPost","rootHeader","rootComment","timestamp","id","members","parsedData","parse","chat_id","messages","push","message","user_id","status","chatName","chat_name","creator","msgObject","updateListOfDms"],"mappings":"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","sourcesContent":["/*\n initialState is the state object that we send into the redux store and can manipulate with the reducers\n */\nconst initialState = {\n  socket: null,\n  wsOnline: false,\n  socketServer: null,\n  firstWelcome: null,\n  username: null,\n  listOfDms: null,\n  listOfFriends: null,\n  server: null,\n};\n\n/**\n * helper function used by action type \"RESPONSE\" and action \"send_message\" to locate the correct dm object index\n * @param {array} list containing all direct messages of the user\n * @param {string} chatID used to identify the correct dm object\n *\n * @returns the index of the correct dm object\n */\nconst getChatIndex = (list, chatID) => {\n  let index = 0;\n  for (const chat of list) {\n    if (chat.chatID === chatID) {\n      return index;\n    }\n    index++;\n  }\n  return -1; // this line will only be reached if we give an invalid chatID\n};\n\n/**\n * performs a task depending on the action.type dispatched - acts more as a middleware for socket handling\n *\n * !!! Reducers shouldn't do sideeffects which this one does - consider this one more as a middleware than a real reducer\n *\n * @param {object} state the current state that is being held by the redux store\n * @property {object} socket contains the actual socket that we communicate with\n * @property {bool} wsOnline is true when the socket is online (used to handle disconnects/time outs)\n * @property {string} socketServer the url of server that we create a websocket with\n * @property {bool} firstWelcome used to know if we've made our first repsonse to socket after login  (TODO maybe better way)\n * @property {array} listOfMessages holds all chatroom objects\n * @property {array} listOfFriends holds all friends usernames\n * @property {string} username holds the username of logged in user\n * @param {object} action contains the type and payload\n * @property {string} action.type what kind of action should the reducer do\n * @property {object} action.payload check actions.js for what it may contain\n *\n * @returns updated state\n */\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      var firstWelcome;\n      if (state.firstWelcome === null) {\n        firstWelcome = true;\n      } else {\n        firstWelcome = state.firstWelcome ? true : false;\n      }\n      return {\n        ...state,\n        socket: new WebSocket(state.socketServer),\n        wsOnline: true,\n        firstWelcome: firstWelcome,\n      };\n    case \"CREATE_THREAD\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n    case \"ADDFRIEND\":\n      return {\n        ...state,\n        listOfFriends: state.listOfFriends.concat(action.payload.username),\n      };\n    case \"CHAT_REQUEST\":\n      console.log(action.payload);\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n    case \"RESPONSE\":\n      /* if data is ack or welcome there's nothning we need to do */\n      if (action.payload.data === \"Welcome\" || action.payload.data === \"ACK\") {\n        return state;\n\n        /* first response */\n      } else if (action.payload.action === \"login\") {\n        /* need to respond to socket with action = login, username, and magictoken to establish connection */\n        state.socket.send(JSON.stringify(action.payload));\n\n        /* TODO TODO\n          This if ann else cases handles the fact that we accidentely get 2 login responses from backend right now\n          not to trigger useEffect in ChatContainer we have this case here.. TODO remove it after backend fixes it\n        */\n        if (state.firstWelcome === false) {\n          console.log(\"Duplicate welcome login response...\");\n          return state;\n        } else {\n          console.log(\"first welcome login response\");\n          return {\n            ...state,\n            firstWelcome: false, // no longer first welcome..\n            /* \n            TESTING -- TODO - HARDCODED the login object that we should get in accordance with doc\n            in accordance with doc it should be a response with action \"init_login\" but we will do \n            it here right now\n\n            */\n            listOfDms: [],\n            listOfFriends: [],\n            username: action.payload.username,\n            /* set hardcoded server oject with name of GLOBAL, empty thread list and member list with only urself */\n            server: {\n              serverName: \"GLOBAL\",\n              serverInformation:\n                \"This is the global server that everyone joins. Make threads, comment and be happy peeps.\",\n              listOfThreads: [\n                {\n                  rootPost: {\n                    rootHeader: \"Hjälp med linux!\",\n                    rootComment: \"Hej, har nån bra koll på mint??\"\n                  },\n                  username: \"Skooben\",\n                  timestamp: \"2020-01-10\",\n                  id: 1\n                },\n                {\n                  rootPost: {\n                    rootHeader: \"Knarka i helgen?\",\n                    rootComment: \"Tjena, skulle vilja knarka med någon i helgen. Sugen?\"\n                  },\n                  username: \"Rövpannan\",\n                  timestamp: \"2019-12-24\",\n                  id: 2\n                }\n              ],\n              members: [action.payload.username],\n            },\n          };\n        }\n      } else {\n        const parsedData = JSON.parse(action.payload.data);\n\n        /* We respond differently depending on the action/type of received data */\n        switch (parsedData.action) {\n          case \"send_message\":\n            /* add the new msg object to the right dm object */\n            const index = getChatIndex(state.listOfDms, parsedData.chat_id);\n            return {\n              ...state,\n              listOfDms: [\n                ...state.listOfDms,\n                state.listOfDms[index].messages.push({\n                  message: parsedData.message,\n                  username: parsedData.user_id,\n                }),\n              ],\n            };\n          case \"chat_request\":\n            /* insert a new chat object to listOfDms */\n            if (parsedData.status === \"ok\") {\n              return {\n                ...state,\n                listOfDms: [\n                  ...state.listOfDms,\n                  /* newly inserted object */\n                  {\n                    chatName: parsedData.chat_name,\n                    chatID: parsedData.chat_id,\n                    messages: [],\n                    members: parsedData.members,\n                    creator: parsedData.creator,\n                  },\n                ],\n              };\n            }\n            return state;\n          default:\n            return state;\n        }\n      }\n\n    case \"DISCONNECTED\":\n      return {\n        ...state,\n        socket: action.payload,\n        wsOnline: false,\n        firstWelcome: null,\n        listOfDms: null,\n        listOfFriends: null,\n        username: null,\n      };\n\n    case \"SETSERVER\":\n      return { ...state, socketServer: action.payload };\n\n    case \"SENDMESSAGE\":\n      const index = getChatIndex(state.listOfDms, action.payload.chat_id);\n\n      if (index !== -1) {\n        const msgObject = action.payload;\n        state.socket.send(JSON.stringify(msgObject));\n\n        /* update listOfDms in state */\n        var updateListOfDms = state.listOfDms;\n        updateListOfDms[index].messages.push({\n          message: msgObject.message,\n          username: msgObject.user_id,\n        });\n\n        return {\n          ...state,\n          listOfDms: updateListOfDms,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;\n"]},"metadata":{},"sourceType":"module"}