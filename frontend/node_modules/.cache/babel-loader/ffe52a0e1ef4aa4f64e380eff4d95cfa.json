{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/CreateThread.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\n/**\n * CreateThread is the component which is seen when pressing '+' icon next to active threads\n * @param {function} setShowCreateThread callback is used to show/hide the createThread modal\n * @returns A div where user can create a new Thread\n */\n\nconst CreateThread = ({\n  showCreateThread,\n  setShowCreateThread\n}) => {\n  /* Add event listener so we can detect clicks outside create thread modal */\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n  /*Handle click outside createThread modal */\n\n  const handleClick = e => {\n    console.log(e.target);\n\n    if (showCreateThread == true) {\n      console.log(\"almost inside\");\n\n      if (monad.current.contains(e.target)) {\n        console.log(\"INSIDE \");\n        console.log(createThread.current); // inside click\n\n        return;\n      } else {\n        console.log(\"OUTSIDE\");\n        setShowCreateThread(false);\n      }\n    } else {\n      console.log(showCreateThread);\n      setShowCreateThread(!showCreateThread);\n      console.log(\"Kukens\");\n    }\n  };\n\n  const monad = useRef();\n  /*get the current server */\n\n  const server = useSelector(state => state.socketState.server);\n  /*get the currently logged in user*/\n\n  const username = useSelector(state => state.socketState.username);\n  /*Local state for the summary*/\n\n  const [summary, setSummary] = useState(\"\");\n  /*Local state for the details */\n\n  const [details, setDetails] = useState(\"\");\n  /* useDispatch from dispatch function from store */\n\n  const dispatch = useDispatch();\n\n  const createThread = () => {\n    if (summary != \"\" && details != \"\") {\n      const data = {\n        server: server,\n        user: username,\n        summary: summary,\n        details: details\n      };\n      dispatch(actions.createThread(data));\n    } else {\n      setShowCreateThread(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-modal\",\n    ref: monad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-modal-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"AddFriend\",\n    className: \"text-base\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \" \", \"Enter the header for your thread:\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"Summary\",\n    placeholder: \"Summary...\",\n    onChange: e => {\n      setSummary(e.target.value);\n    },\n    className: \" flex flex-wrap shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"Enter a detailed description:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: e => {\n      setDetails(e.target.value);\n    },\n    placeholder: \"Details..\",\n    type: \"text\",\n    className: \"mb-2 h-20 flex flex-warp shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createThread,\n    className: \"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border border-green-700 rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Create\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-red-900 hover:bg-red-700 text-white font-bold py-2 px-4 border border-red-700 rounded\" //onClick={() => {\n    //setShowCreateThread(false);\n    // }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Close\")));\n};\n\nexport default CreateThread;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/CreateThread.js"],"names":["React","useState","useRef","useEffect","useDispatch","useSelector","actions","CreateThread","showCreateThread","setShowCreateThread","document","addEventListener","handleClick","removeEventListener","e","console","log","target","monad","current","contains","createThread","server","state","socketState","username","summary","setSummary","details","setDetails","dispatch","data","user","value"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../actions/actions\";\n\n/**\n * CreateThread is the component which is seen when pressing '+' icon next to active threads\n * @param {function} setShowCreateThread callback is used to show/hide the createThread modal\n * @returns A div where user can create a new Thread\n */\nconst CreateThread = ({ showCreateThread, setShowCreateThread }) => {\n\n   /* Add event listener so we can detect clicks outside create thread modal */\n   useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n   /*Handle click outside createThread modal */\n   const handleClick = (e) => {\n    console.log(e.target);\n    if (showCreateThread == true){\n      console.log(\"almost inside\");\n      if(monad.current.contains(e.target)) {\n        console.log(\"INSIDE \");\n        console.log(createThread.current);\n        // inside click\n        return;\n      }else {\n        console.log(\"OUTSIDE\");\n      \n        setShowCreateThread(false);\n    }\n   }\n   else{\n     console.log(showCreateThread);\n     setShowCreateThread(!showCreateThread);\n     console.log(\"Kukens\");\n   } \n  };\n\n  const monad = useRef();\n\n  /*get the current server */\n  const server = useSelector((state) => state.socketState.server);\n\n  /*get the currently logged in user*/\n  const username = useSelector((state) => state.socketState.username);\n\n  /*Local state for the summary*/\n  const [summary, setSummary] = useState(\"\");\n\n  /*Local state for the details */\n  const [details, setDetails] = useState(\"\");\n\n   /* useDispatch from dispatch function from store */\n   const dispatch = useDispatch();\n\n   const createThread= ()=>{\n     if(summary != \"\" && details != \"\"){\n     const data = {server: server, user: username, summary: summary, details: details};\n    dispatch(actions.createThread(data));\n     }else {\n       setShowCreateThread(false);\n     }\n   };\n\n  return (\n\n      <div className=\"addFriend-custom-modal\" ref={monad}>\n        <div className=\"addFriend-custom-modal-body\">\n          <label htmlFor=\"AddFriend\" className=\"text-base\">\n            {\" \"}\n            Enter the header for your thread:\n          </label>\n          <input\n            id=\"Summary\"\n            placeholder=\"Summary...\"\n            onChange={(e) => {\n              setSummary(e.target.value);\n            }}\n            className=\" flex flex-wrap shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            type=\"text\"\n          ></input>\n          <h1 className=\"mt-2\">Enter a detailed description:</h1>\n\n          <textarea\n            onChange={(e) => {\n              setDetails(e.target.value);\n            }}\n            placeholder=\"Details..\"\n            type=\"text\"\n            className=\"mb-2 h-20 flex flex-warp shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n          ></textarea>\n          {/* On add, do a friend request and update success state accordingly */}\n          <button onClick={createThread}className=\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border border-green-700 rounded\">\n            Create\n          </button>\n          <button\n            className=\"bg-red-900 hover:bg-red-700 text-white font-bold py-2 px-4 border border-red-700 rounded\"\n            //onClick={() => {\n              //setShowCreateThread(false);\n           // }}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n\n  );\n};\n\nexport default CreateThread;\n"]},"metadata":{},"sourceType":"module"}