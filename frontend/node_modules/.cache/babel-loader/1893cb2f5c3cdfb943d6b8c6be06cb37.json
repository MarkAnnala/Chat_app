{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ChatContainer/ChatContainer.js\";\nimport React, { useState } from \"react\";\nimport \"../../assets/main.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Chat from \"../Chat/Chat\";\nimport ChatInput from \"../ChatInput/ChatInput\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/**\n * ChatContainer holds the layout of the focused view of a selected chat\n * @property {string} focusedChat the name of the chat that we are currently focusing on\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\n\nconst ChatContainer = ({\n  focusedChat\n}) => {\n  const dispatch = useDispatch();\n  /* State and callback functions for the SearchBar */\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n\n  const handleSearchInput = event => {\n    setSearching(false);\n    setSearchTerm(event.target.value);\n  };\n  /* used as a check if we are currenyly displaying searched messages */\n\n\n  const [searching, setSearching] = React.useState(false);\n  /**\n   * TODO Trigger the search of the searchTerm in the actuall focused chat\n   * @param event the event object of the window\n   */\n\n  const handleSearchSubmit = event => {\n    setSearching(true);\n    var filteredChat = [];\n    messages.map(chat => {\n      if (chat.message.includes(searchTerm)) {\n        filteredChat.push(chat);\n      }\n    });\n    setMessages(filteredChat);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n\n  const myUsername = useSelector(state => state.socketState.username);\n  const listOfDms = useSelector(state => state.socketState.listOfDms);\n  /**\n   * Check for the right DM object chatID wich matches the focusedChat prop\n   * @param {array} list the list containing Dm objects\n   * @return {array} array containing the list of message objects from the corresponding DM object\n   */\n\n  const rightChat = list => {\n    for (const chat of list) {\n      if (chat.chatID === focusedChat) {\n        return chat.messages;\n      }\n    }\n\n    return [];\n  };\n\n  const getChatName = list => {\n    for (const chat of list) {\n      if (chat.chatID === focusedChat) {\n        return chat.chatName;\n      }\n    }\n\n    return \"\";\n  };\n\n  const [messages, setMessages] = React.useState([]);\n  const [newMessage, setNewMessage] = React.useState(\"\");\n  /**\n   * Set the messages state setting it to include the \"newMessage\" message\n   * @param event the event object of the window\n   */\n\n  const sendMessage = event => {\n    const today = new Date();\n    const month = today.getMonth() + 1; //January is 0, need to add 1\n\n    var hours = today.getHours() - 2; //convert to UTC\n\n    var minutes = today.getMinutes();\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes.toString();\n    } else {\n      minutes = minutes.toString();\n    }\n\n    if (hours < 10) {\n      hours = \"0\" + hours.toString();\n    } else {\n      hours = hours.toString();\n    }\n\n    const timestamp = today.getFullYear().toString() + \"-\" + month.toString() + \"-\" + today.getDate().toString() + \" \" + hours + \":\" + minutes + \":\" + today.getSeconds().toString();\n    event.preventDefault();\n    setMessages([...messages, {\n      message: newMessage,\n      username: myUsername,\n      timestamp: timestamp\n    }]);\n    dispatch(actions.sendMessage({\n      message: newMessage,\n      username: myUsername,\n      chatID: focusedChat,\n      timestamp: timestamp\n    }));\n    setNewMessage(\"\");\n  };\n  /**\n   * Set the newMessage state to whatever value is in event target\n   * @param event the event object of the window\n   */\n\n\n  const handleMessage = event => {\n    setNewMessage(event.target.value);\n  };\n\n  const [chatName, setChatName] = useState(\"\");\n  /* HANDLING THE DISPLAY OF NEW MESSAGES AND NEW FOCUSED CHAT */\n\n  React.useEffect(() => {\n    if (listOfDms !== null && searching === false) {\n      setMessages(rightChat(listOfDms));\n      setChatName(getChatName(listOfDms));\n\n      if (focusedChat) {\n        dispatch(actions.resetLastSeen({\n          chatID: focusedChat\n        }));\n      }\n    }\n  }, [focusedChat, listOfDms, searching]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col content-center focused-view-custom-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-3xl text-white self-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, chatName), focusedChat ? /*#__PURE__*/React.createElement(SearchBar, {\n    id: \"search-chat\",\n    placeHolder: \"Search in this chat...\",\n    value: searchTerm,\n    onButtonClick: handleSearchSubmit,\n    onInputChange: handleSearchInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }) : null, searching ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-white p-2 input-box-custom-bg self-center cursor-pointer mt-4\",\n    onClick: e => {\n      setSearching(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, \"Cancel Search\") : null, /*#__PURE__*/React.createElement(Chat, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), focusedChat ? /*#__PURE__*/React.createElement(ChatInput, {\n    message: newMessage,\n    handleInputChange: handleMessage,\n    handleButtonClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }) : null);\n};\n\nexport default ChatContainer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ChatContainer/ChatContainer.js"],"names":["React","useState","SearchBar","Chat","ChatInput","actions","useDispatch","useSelector","ChatContainer","focusedChat","dispatch","searchTerm","setSearchTerm","handleSearchInput","event","setSearching","target","value","searching","handleSearchSubmit","filteredChat","messages","map","chat","message","includes","push","setMessages","preventDefault","myUsername","state","socketState","username","listOfDms","rightChat","list","chatID","getChatName","chatName","newMessage","setNewMessage","sendMessage","today","Date","month","getMonth","hours","getHours","minutes","getMinutes","toString","timestamp","getFullYear","getDate","getSeconds","handleMessage","setChatName","useEffect","resetLastSeen","e"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"../../assets/main.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Chat from \"../Chat/Chat\";\nimport ChatInput from \"../ChatInput/ChatInput\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/**\n * ChatContainer holds the layout of the focused view of a selected chat\n * @property {string} focusedChat the name of the chat that we are currently focusing on\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\nconst ChatContainer = ({ focusedChat }) => {\n  const dispatch = useDispatch();\n\n  /* State and callback functions for the SearchBar */\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n  const handleSearchInput = (event) => {\n    setSearching(false);\n    setSearchTerm(event.target.value);\n  };\n\n  /* used as a check if we are currenyly displaying searched messages */\n  const [searching, setSearching] = React.useState(false);\n  /**\n   * TODO Trigger the search of the searchTerm in the actuall focused chat\n   * @param event the event object of the window\n   */\n  const handleSearchSubmit = (event) => {\n    setSearching(true);\n    var filteredChat = [];\n    messages.map((chat) => {\n      if (chat.message.includes(searchTerm)) {\n        filteredChat.push(chat);\n      }\n    });\n\n    setMessages(filteredChat);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n\n  const myUsername = useSelector((state) => state.socketState.username);\n  const listOfDms = useSelector((state) => state.socketState.listOfDms);\n\n  /**\n   * Check for the right DM object chatID wich matches the focusedChat prop\n   * @param {array} list the list containing Dm objects\n   * @return {array} array containing the list of message objects from the corresponding DM object\n   */\n  const rightChat = (list) => {\n    for (const chat of list) {\n      if (chat.chatID === focusedChat) {\n        return chat.messages;\n      }\n    }\n    return [];\n  };\n\n  const getChatName = (list) => {\n    for (const chat of list) {\n      if (chat.chatID === focusedChat) {\n        return chat.chatName;\n      }\n    }\n    return \"\";\n  };\n\n  const [messages, setMessages] = React.useState([]);\n\n  const [newMessage, setNewMessage] = React.useState(\"\");\n\n  /**\n   * Set the messages state setting it to include the \"newMessage\" message\n   * @param event the event object of the window\n   */\n  const sendMessage = (event) => {\n    const today = new Date();\n    const month = today.getMonth() + 1; //January is 0, need to add 1\n    var hours = today.getHours() - 2; //convert to UTC\n    var minutes = today.getMinutes();\n    if (minutes < 10) {\n      minutes = \"0\" + minutes.toString();\n    } else {\n      minutes = minutes.toString();\n    }\n    if (hours < 10) {\n      hours = \"0\" + hours.toString();\n    } else {\n      hours = hours.toString();\n    }\n    const timestamp =\n      today.getFullYear().toString() +\n      \"-\" +\n      month.toString() +\n      \"-\" +\n      today.getDate().toString() +\n      \" \" +\n      hours +\n      \":\" +\n      minutes +\n      \":\" +\n      today.getSeconds().toString();\n    event.preventDefault();\n    setMessages([\n      ...messages,\n      { message: newMessage, username: myUsername, timestamp: timestamp },\n    ]);\n    dispatch(\n      actions.sendMessage({\n        message: newMessage,\n        username: myUsername,\n        chatID: focusedChat,\n        timestamp: timestamp,\n      })\n    );\n    setNewMessage(\"\");\n  };\n\n  /**\n   * Set the newMessage state to whatever value is in event target\n   * @param event the event object of the window\n   */\n  const handleMessage = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n  const [chatName, setChatName] = useState(\"\");\n  /* HANDLING THE DISPLAY OF NEW MESSAGES AND NEW FOCUSED CHAT */\n  React.useEffect(() => {\n    if (listOfDms !== null && searching === false) {\n      setMessages(rightChat(listOfDms));\n      setChatName(getChatName(listOfDms));\n      if (focusedChat) {\n        dispatch(actions.resetLastSeen({ chatID: focusedChat }));\n      }\n    }\n  }, [focusedChat, listOfDms, searching]);\n\n  return (\n    <div className=\"flex flex-col content-center focused-view-custom-bg\">\n      <div className=\"text-3xl text-white self-center\">{chatName}</div>\n      {focusedChat ? (\n        <SearchBar\n          id=\"search-chat\"\n          placeHolder=\"Search in this chat...\"\n          value={searchTerm}\n          onButtonClick={handleSearchSubmit}\n          onInputChange={handleSearchInput}\n        />\n      ) : null}\n      {searching ? (\n        <div\n          className=\"text-white p-2 input-box-custom-bg self-center cursor-pointer mt-4\"\n          onClick={(e) => {\n            setSearching(false);\n          }}\n        >\n          Cancel Search\n        </div>\n      ) : null}\n      <Chat messages={messages} />\n      {focusedChat ? (\n        <ChatInput\n          message={newMessage}\n          handleInputChange={handleMessage}\n          handleButtonClick={sendMessage}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default ChatContainer;\n"]},"metadata":{},"sourceType":"module"}