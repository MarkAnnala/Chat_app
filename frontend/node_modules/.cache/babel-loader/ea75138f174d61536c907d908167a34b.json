{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Server.js\";\nimport React from 'react';\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst axios = require(\"axios\");\n/**\n * Component for displaying the global server\n * @property {function} handleFocusedPage Callback function passed down from LandingPage - Used to get id of what page we click on\n * @property {object} server the global server object\n * @property {Function} resetFocusedThread - callback for resetting the currently focused thread\n * @returns the button of the global server\n */\n\n\nconst Server = ({\n  server,\n  handleFocusedPage,\n  resetFocusedThread\n}) => {\n  /* useDispatch from dispatch function from store */\n  const dispatch = useDispatch();\n  /*Get the username, magictoken and list of threads from store */\n\n  const username = useSelector(state => state.socketState.username);\n  const magic_token = useSelector(state => state.socketState.magicToken); //const listOfThreads = useSelector((state) => state.socketState.server.listOfThreads );\n\n  /*Reset the focused thread, so we show all threads in focusedview */\n\n  const handle = e => {\n    fetchThreads();\n    resetFocusedThread();\n    handleFocusedPage(e);\n  };\n\n  async function fetchThreads() {\n    try {\n      const response = await axios.post(\"/\", JSON.stringify({\n        action: \"fetch_server_contents\",\n        server_name: server.serverName,\n        magic_token: magic_token,\n        username: username\n      }));\n      const data = await response;\n\n      switch (data.status) {\n        case 200:\n          {\n            console.log(data.data);\n            /*only update the threads if there's new ones */\n            //TODO: dunno if this is ok, cus what happens if there's a new comment in one of the threads..that won't trigger a refresh of all threads \n\n            if (listOfThreads.length != data.data.threads.length) {\n              /*The threads in the list of threads recieced looks different, need to create new thredobjects from that information */\n              let threads = [];\n\n              for (const thread of data.data.threads) {\n                threads.push({\n                  rootPost: {\n                    rootHeader: thread.header,\n                    rootComment: thread.text\n                  },\n                  username: thread.creator,\n                  timestamp: thread.timestamp,\n                  comments: thread.comment_list,\n                  id: thread.thread_id\n                });\n              }\n\n              ;\n              dispatch(actions.addThreads(threads));\n            }\n\n            break;\n          }\n\n        case 404:\n          {\n            console.log(data);\n            break;\n          }\n\n        default:\n          alert(\"cannot fetch threads from server\");\n          break;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: server.serverName,\n    onClick: handle,\n    className: \"rounded-full h-16 w-16 mb-2 mt-2 input-box-custom-bg hover:bg-gray-500 flex items-center justify-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, server.serverName);\n};\n\nexport default Server;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/SideDisplayList/Server.js"],"names":["React","actions","useDispatch","useSelector","axios","require","Server","server","handleFocusedPage","resetFocusedThread","dispatch","username","state","socketState","magic_token","magicToken","handle","e","fetchThreads","response","post","JSON","stringify","action","server_name","serverName","data","status","console","log","listOfThreads","length","threads","thread","push","rootPost","rootHeader","header","rootComment","text","creator","timestamp","comments","comment_list","id","thread_id","addThreads","alert","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;AAEA;;;;;;;;;AAOA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,iBAAV;AAA6BC,EAAAA;AAA7B,CAAD,KAAuD;AAElE;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA;;AACA,QAAMS,QAAQ,GAAGR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBF,QAA9B,CAA5B;AACA,QAAMG,WAAW,GAAGX,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBE,UAA9B,CAA/B,CAPkE,CASlE;;AAEA;;AACA,QAAMC,MAAM,GAAIC,CAAD,IAAK;AAChBC,IAAAA,YAAY;AACZT,IAAAA,kBAAkB;AAClBD,IAAAA,iBAAiB,CAACS,CAAD,CAAjB;AACH,GAJD;;AAMA,iBAAeC,YAAf,GAA8B;AAC1B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAN,CACrB,GADqB,EAErBC,IAAI,CAACC,SAAL,CAAe;AACbC,QAAAA,MAAM,EAAE,uBADK;AAEbC,QAAAA,WAAW,EAAEjB,MAAM,CAACkB,UAFP;AAGbX,QAAAA,WAAW,EAAEA,WAHA;AAIbH,QAAAA,QAAQ,EAAEA;AAJG,OAAf,CAFqB,CAAvB;AASA,YAAMe,IAAI,GAAG,MAAMP,QAAnB;;AACA,cAAQO,IAAI,CAACC,MAAb;AACE,aAAK,GAAL;AAAU;AACRC,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACA,IAAjB;AACA;AACA;;AACA,gBAAGI,aAAa,CAACC,MAAd,IAAwBL,IAAI,CAACA,IAAL,CAAUM,OAAV,CAAkBD,MAA7C,EAAoD;AAChD;AACA,kBAAIC,OAAO,GAAG,EAAd;;AACA,mBAAK,MAAMC,MAAX,IAAqBP,IAAI,CAACA,IAAL,CAAUM,OAA/B,EAAuC;AACnCA,gBAAAA,OAAO,CAACE,IAAR,CAAa;AAACC,kBAAAA,QAAQ,EAAE;AAACC,oBAAAA,UAAU,EAAEH,MAAM,CAACI,MAApB;AAA4BC,oBAAAA,WAAW,EAAEL,MAAM,CAACM;AAAhD,mBAAX;AAAkE5B,kBAAAA,QAAQ,EAAEsB,MAAM,CAACO,OAAnF;AAA4FC,kBAAAA,SAAS,EAAER,MAAM,CAACQ,SAA9G;AAAyHC,kBAAAA,QAAQ,EAAET,MAAM,CAACU,YAA1I;AAAwJC,kBAAAA,EAAE,EAAEX,MAAM,CAACY;AAAnK,iBAAb;AACH;;AAAA;AACDnC,cAAAA,QAAQ,CAACT,OAAO,CAAC6C,UAAR,CAAmBd,OAAnB,CAAD,CAAR;AACH;;AACD;AACD;;AACD,aAAK,GAAL;AAAU;AACRJ,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA;AACD;;AACD;AACEqB,UAAAA,KAAK,CAAC,kCAAD,CAAL;AACA;AArBJ;AAuBD,KAlCH,CAkCI,OAAOC,KAAP,EAAc;AACdpB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,KAAZ;AACD;AACN;;AAAA;AAED,sBACI;AAAK,IAAA,EAAE,EAAEzC,MAAM,CAACkB,UAAhB;AAA4B,IAAA,OAAO,EAAET,MAArC;AAA6C,IAAA,SAAS,EAAC,yGAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,MAAM,CAACkB,UADZ,CADJ;AAKH,CA/DD;;AAiEA,eAAenB,MAAf","sourcesContent":["import React from 'react';\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst axios = require(\"axios\");\n\n/**\n * Component for displaying the global server\n * @property {function} handleFocusedPage Callback function passed down from LandingPage - Used to get id of what page we click on\n * @property {object} server the global server object\n * @property {Function} resetFocusedThread - callback for resetting the currently focused thread\n * @returns the button of the global server\n */\nconst Server = ({ server, handleFocusedPage, resetFocusedThread }) => {\n\n    /* useDispatch from dispatch function from store */\n    const dispatch = useDispatch();\n\n    /*Get the username, magictoken and list of threads from store */\n    const username = useSelector((state) => state.socketState.username);\n    const magic_token = useSelector((state) => state.socketState.magicToken);\n  \n    //const listOfThreads = useSelector((state) => state.socketState.server.listOfThreads );\n\n    /*Reset the focused thread, so we show all threads in focusedview */\n    const handle = (e)=>{\n        fetchThreads();\n        resetFocusedThread();\n        handleFocusedPage(e);\n    }\n\n    async function fetchThreads() {\n        try {\n            const response = await axios.post(\n              \"/\",\n              JSON.stringify({\n                action: \"fetch_server_contents\",\n                server_name: server.serverName,\n                magic_token: magic_token ,\n                username: username\n              })\n            );\n            const data = await response;\n            switch (data.status) {\n              case 200: {\n                console.log(data.data);\n                /*only update the threads if there's new ones */\n                //TODO: dunno if this is ok, cus what happens if there's a new comment in one of the threads..that won't trigger a refresh of all threads \n                if(listOfThreads.length != data.data.threads.length){\n                    /*The threads in the list of threads recieced looks different, need to create new thredobjects from that information */\n                    let threads = [];\n                    for (const thread of data.data.threads){\n                        threads.push({rootPost: {rootHeader: thread.header, rootComment: thread.text}, username: thread.creator, timestamp: thread.timestamp, comments: thread.comment_list, id: thread.thread_id });\n                    };\n                    dispatch(actions.addThreads(threads));\n                }   \n                break;\n              }\n              case 404: {\n                console.log(data);\n                break;\n              }\n              default:\n                alert(\"cannot fetch threads from server\");\n                break;\n            }\n          } catch (error) {\n            console.log(error);\n          }\n    };\n\n    return (\n        <div id={server.serverName} onClick={handle} className=\"rounded-full h-16 w-16 mb-2 mt-2 input-box-custom-bg hover:bg-gray-500 flex items-center justify-center\"> \n            {server.serverName}\n        </div>\n    )\n}\n\nexport default Server;"]},"metadata":{},"sourceType":"module"}