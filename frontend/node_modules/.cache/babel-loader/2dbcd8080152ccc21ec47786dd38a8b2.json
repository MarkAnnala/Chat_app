{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/LandingPage/LandingPage.js\";\nimport React from \"react\";\nimport \"../../assets/main.css\";\nimport SideDisplayList from \"../SideDisplayList/SideDisplayList\";\nimport FocusedView from \"../FocusedView/FocusedView\";\nimport InfoDisplayList from \"../InfoDisplayList/InfoDisplayList\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/**\n * LandingPage holds the layout design grid of the app. Also manages\n * the routing and display of everything inside SideDisplayList, InfoDisplayList and FocusedView\n *\n * @returns a div containing the SideDisplayList, InfoDisplayList and FocusedView components\n */\n\nconst LandingPage = () => {\n  const dispatch = useDispatch();\n  /* state to check what chat we are currently focusing on */\n\n  const [focusedChat, setFocusedChat] = React.useState(null);\n  /*state to check what thread we are focuing on */\n\n  const [focusedThread, setFocusedThread] = React.useState(null);\n  /* callback function for getting the id of the direct message div that we are clicking on */\n\n  const handleFocusedChat = event => {\n    setFocusedChat(event.target.id);\n  };\n  /*callback for focusing a thread */\n\n\n  const handleFocusedThread = event => {\n    setFocusedThread(event.target.id);\n  };\n  /* callback for resetting the focused thread */\n\n\n  const resetFocusedThread = () => {\n    setFocusedThread(null);\n  };\n  /* The global server object */\n\n\n  const [server, setServer] = React.useState({});\n  /* Used for locking the threads when updating them from the server */\n\n  const [threadLock, setThreadLock] = React.useState(true); //server object from redux\n\n  const serverObject = useSelector(state => state.socketState.server);\n  React.useEffect(() => {\n    if (serverObject !== null) {\n      setServer(serverObject);\n    }\n  }, [serverObject]);\n  React.useEffect(() => {\n    if (focusedChat) {\n      dispatch(actions.resetLastSeen({\n        chatID: focusedChat\n      }));\n    }\n  }, [focusedChat]);\n  /* state to check what page we are focusing on - some server or the home page*/\n\n  /* Focusing on Home always on start*/\n\n  const [focusedPage, setFocusedPage] = React.useState(\"Home\");\n  /* callback function for getting the id of the page that we are clicking on */\n\n  const handleFocusedPage = event => {\n    setFocusedPage(event.target.id);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-custom h-screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SideDisplayList, {\n    resetFocusedThread: resetFocusedThread,\n    handleFocusedPage: handleFocusedPage,\n    server: server,\n    setThreadLock: setThreadLock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayList, {\n    handleFocusedChat: handleFocusedChat,\n    focusedPage: focusedPage,\n    focusedChat: focusedChat,\n    handleFocusedThread: handleFocusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FocusedView, {\n    focusedChat: focusedChat,\n    focusedPage: focusedPage,\n    handleFocusedThread: handleFocusedThread,\n    focusedThread: focusedThread,\n    resetFocusedThread: resetFocusedThread,\n    threadLock: threadLock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default LandingPage;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/LandingPage/LandingPage.js"],"names":["React","SideDisplayList","FocusedView","InfoDisplayList","actions","useDispatch","useSelector","LandingPage","dispatch","focusedChat","setFocusedChat","useState","focusedThread","setFocusedThread","handleFocusedChat","event","target","id","handleFocusedThread","resetFocusedThread","server","setServer","threadLock","setThreadLock","serverObject","state","socketState","useEffect","resetLastSeen","chatID","focusedPage","setFocusedPage","handleFocusedPage"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"../../assets/main.css\";\nimport SideDisplayList from \"../SideDisplayList/SideDisplayList\";\nimport FocusedView from \"../FocusedView/FocusedView\";\nimport InfoDisplayList from \"../InfoDisplayList/InfoDisplayList\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/**\n * LandingPage holds the layout design grid of the app. Also manages\n * the routing and display of everything inside SideDisplayList, InfoDisplayList and FocusedView\n *\n * @returns a div containing the SideDisplayList, InfoDisplayList and FocusedView components\n */\nconst LandingPage = () => {\n  const dispatch = useDispatch();\n\n  /* state to check what chat we are currently focusing on */\n  const [focusedChat, setFocusedChat] = React.useState(null);\n\n  /*state to check what thread we are focuing on */\n  const [focusedThread, setFocusedThread] = React.useState(null);\n\n  /* callback function for getting the id of the direct message div that we are clicking on */\n  const handleFocusedChat = (event) => {\n    setFocusedChat(event.target.id);\n  };\n\n  /*callback for focusing a thread */\n\n  const handleFocusedThread = (event) => {\n    setFocusedThread(event.target.id);\n  };\n\n  /* callback for resetting the focused thread */\n  const resetFocusedThread = ()=> {Â \n    setFocusedThread(null);\n  }\n\n  /* The global server object */\n  const [server, setServer] = React.useState({});\n\n  /* Used for locking the threads when updating them from the server */ \n  const [threadLock, setThreadLock] = React.useState(true);\n\n  //server object from redux\n  const serverObject = useSelector((state) => state.socketState.server);\n\n  React.useEffect(() => {\n    if (serverObject !== null) {\n      setServer(serverObject);\n    }\n  }, [serverObject]);\n\n  React.useEffect(() => {\n    if(focusedChat){\n      dispatch(actions.resetLastSeen({chatID:focusedChat}));\n    }\n  },[focusedChat])\n  /* state to check what page we are focusing on - some server or the home page*/\n  /* Focusing on Home always on start*/\n  const [focusedPage, setFocusedPage] = React.useState(\"Home\");\n\n  /* callback function for getting the id of the page that we are clicking on */\n  const handleFocusedPage = (event) => {\n    setFocusedPage(event.target.id);\n  };\n\n  return (\n    <div className=\"grid grid-cols-custom h-screen\">\n      <SideDisplayList\n        resetFocusedThread={resetFocusedThread}\n        handleFocusedPage={handleFocusedPage}\n        server={server}\n        setThreadLock={setThreadLock} />\n      <InfoDisplayList\n        handleFocusedChat={handleFocusedChat}\n        focusedPage={focusedPage}\n        focusedChat={focusedChat}\n        handleFocusedThread={handleFocusedThread}\n      />\n\n      <FocusedView\n        focusedChat={focusedChat}\n        focusedPage={focusedPage}\n        handleFocusedThread={handleFocusedThread}\n        focusedThread={focusedThread}\n        resetFocusedThread={resetFocusedThread}\n        threadLock={threadLock}\n      />\n    </div>\n  );\n};\n\nexport default LandingPage;\n"]},"metadata":{},"sourceType":"module"}