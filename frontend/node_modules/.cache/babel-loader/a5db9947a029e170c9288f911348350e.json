{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/OriginalPost.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst OriginalPost = ({\n  focusedThread\n}) => {\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(state => state.socketState.server.listOfThreads); //helper function for retrieving the right thread from state\n\n  const rightThread = list => {\n    for (const thread of list) {\n      if (thread.rootPost.rootHeader === focusedThread) {\n        return thread;\n      }\n    }\n\n    return [];\n  };\n  /*local state for actual thread object*/\n\n\n  const [thread, setThread] = useState(rightThread(listOfThreads));\n  /*update the focused thread when clicked */\n\n  useEffect(() => {\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      setThread(actual);\n    }\n  }, [focusedThread]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rounded border border-solid border-black w-full mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \" text-4xl text-white \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, thread.rootPost.rootHeader), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-2xl text-white ml-5 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, thread.rootPost.rootComment), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"justify-end text-small text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }, thread.username));\n};\n\nexport default OriginalPost;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/OriginalPost.js"],"names":["React","useEffect","useState","useSelector","OriginalPost","focusedThread","listOfThreads","state","socketState","server","rightThread","list","thread","rootPost","rootHeader","setThread","actual","rootComment","username"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAC1C;AACA,QAAMC,aAAa,GAAGH,WAAW,CAC9BI,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBH,aADL,CAAjC,CAF0C,CAM1C;;AACA,QAAMI,WAAW,GAAIC,IAAD,IAAU;AAC5B,SAAK,MAAMC,MAAX,IAAqBD,IAArB,EAA2B;AACzB,UAAIC,MAAM,CAACC,QAAP,CAAgBC,UAAhB,KAA+BT,aAAnC,EAAkD;AAChD,eAAOO,MAAP;AACD;AACF;;AACD,WAAO,EAAP;AACD,GAPD;AASA;;;AACA,QAAM,CAACA,MAAD,EAASG,SAAT,IAAsBb,QAAQ,CAACQ,WAAW,CAACJ,aAAD,CAAZ,CAApC;AAEA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAMU,MAAM,GAAGN,WAAW,CAACJ,aAAD,CAA1B;AACAS,MAAAA,SAAS,CAACC,MAAD,CAAT;AACD;AACF,GALQ,EAKN,CAACX,aAAD,CALM,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,sDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,MAAM,CAACC,QAAP,CAAgBC,UADnB,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4CF,MAAM,CAACC,QAAP,CAAgBI,WAA5D,CAJF,eAKF;AAAK,IAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoDL,MAAM,CAACM,QAA3D,CALE,CADF;AASD,CApCD;;AAsCA,eAAed,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst OriginalPost = ({ focusedThread }) => {\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(\n    (state) => state.socketState.server.listOfThreads\n  );\n\n  //helper function for retrieving the right thread from state\n  const rightThread = (list) => {\n    for (const thread of list) {\n      if (thread.rootPost.rootHeader === focusedThread) {\n        return thread;\n      }\n    }\n    return [];\n  };\n\n  /*local state for actual thread object*/\n  const [thread, setThread] = useState(rightThread(listOfThreads));\n\n  /*update the focused thread when clicked */\n  useEffect(() => {\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      setThread(actual);\n    }\n  }, [focusedThread]);\n\n  return (\n    <div className=\"rounded border border-solid border-black w-full mt-2\" >\n      <div className=\" text-4xl text-white \">\n        {thread.rootPost.rootHeader}\n      </div>\n      <div className=\"text-2xl text-white ml-5 \">{thread.rootPost.rootComment}</div>\n  <div className=\"justify-end text-small text-white\">{thread.username}</div>\n    </div>\n  );\n};\n\nexport default OriginalPost;\n"]},"metadata":{},"sourceType":"module"}