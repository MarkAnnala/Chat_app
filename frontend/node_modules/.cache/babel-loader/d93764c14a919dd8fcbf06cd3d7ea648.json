{"ast":null,"code":"const initialState = {\n  socket: null,\n  wsOnline: false\n};\n/**\n * perform a task depending on the action dispatched\n *\n * @property {*} state the current state that is being held by the redux store\n * @property {*} action contains the type and payload\n */\n\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      return { ...state,\n        socket: action.payload,\n        wsOnline: true\n      };\n\n    case \"LOGIN\":\n      /* Handle LOGIN -- store user somewhere? */\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return;\n\n    case \"REGISTER\":\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return state;\n\n    case \"SEND_MESSAGE\":\n      /* TODO handle sending on socket messages */\n      return state;\n\n    case \"RESPONSE\"\n    /* TODO decipher and handle response here!! */\n    :\n      console.log(\"handle the response bro pls\");\n      console.log(action.payload);\n      return state;\n\n    case \"DISCONNECTED\":\n      return { ...state,\n        socket: action.payload,\n        wsOnline: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/reducers/socketReducer.js"],"names":["initialState","socket","wsOnline","socketReducer","state","action","type","console","log","payload","send"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AAAEC,EAAAA,MAAM,EAAE,IAAV;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAArB;AAEA;;;;;;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,aAAO,EAAE,GAAGJ,KAAL;AAAYH,QAAAA,MAAM,EAAEI,MAAM,CAACI,OAA3B;AAAoCP,QAAAA,QAAQ,EAAG;AAA/C,OAAP;;AACF,SAAK,OAAL;AACE;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACAL,MAAAA,KAAK,CAACH,MAAN,CAAaS,IAAb,CAAkBL,MAAM,CAACI,OAAzB;AACA;;AACF,SAAK,UAAL;AACEF,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACAL,MAAAA,KAAK,CAACH,MAAN,CAAaS,IAAb,CAAkBL,MAAM,CAACI,OAAzB;AACA,aAAOL,KAAP;;AACF,SAAK,cAAL;AACE;AACA,aAAOA,KAAP;;AACF,SAAK;AAAW;AAAhB;AACEG,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACI,OAAnB;AACA,aAAOL,KAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGA,KAAL;AAAYH,QAAAA,MAAM,EAAEI,MAAM,CAACI,OAA3B;AAAoCP,QAAAA,QAAQ,EAAG;AAA/C,OAAP;;AACF;AACE,aAAOE,KAAP;AAxBJ;AA0BD,CA3BD;;AA6BA,eAAeD,aAAf","sourcesContent":["const initialState = { socket: null, wsOnline: false };\n\n/**\n * perform a task depending on the action dispatched\n *\n * @property {*} state the current state that is being held by the redux store\n * @property {*} action contains the type and payload\n */\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      return { ...state, socket: action.payload, wsOnline : true };\n    case \"LOGIN\":\n      /* Handle LOGIN -- store user somewhere? */\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return;\n    case \"REGISTER\":\n      console.log(action.payload);\n      state.socket.send(action.payload);\n      return state;\n    case \"SEND_MESSAGE\":\n      /* TODO handle sending on socket messages */\n      return state;\n    case \"RESPONSE\" /* TODO decipher and handle response here!! */:\n      console.log(\"handle the response bro pls\");\n      console.log(action.payload);\n      return state;\n    case \"DISCONNECTED\":\n      return { ...state, socket: action.payload, wsOnline : false };\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;\n"]},"metadata":{},"sourceType":"module"}