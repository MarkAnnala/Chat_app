{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadContainer.js\";\nimport React from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport OriginalPost from \"./OriginalPost\";\nimport { useSelector } from \"react-redux\";\nimport CommentContainer from \"../CommentContainer/CommentContainer\";\nimport ThreadInfo from \"./ThreadInfo\";\n/**\n * ThreadContainer holds all information about a thread; rootpost, comments etc\n * @property {string} focusedThread the threadId of the thread we're currently focusing on \n * @property {Function} handleFocusedThread - callback funktion for setting the focused thread\n * @property {function} resetFocusedThread callback for resetting the focused thread\n * @returns a div with the Originalpost and comments\n */\n\nconst ThreadContainer = ({\n  focusedThread,\n  handleFocusedThread,\n  resetFocusedThread\n}) => {\n  /* State and callback functions for the SearchBar */\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n\n  const handleSearchInput = event => {\n    setSearchTerm(event.target.value);\n  };\n  /**\n   * Trigger the search of the searchTerm in the actuall focused chat\n   * event parameter is displayed only to prevent he windows default action when pressing a submit button\n   * @param event the event object of the window\n   */\n\n\n  const handleSearchSubmit = event => {\n    /* TODO Actually search for threads containing the text in searchTerm and only allow that\n     to be displayed in the threadContainer\n    */\n    console.log(searchTerm);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  }; // list of all threads in server object from redux store\n\n\n  const listOfThreads = useSelector(state => state.socketState.server.listOfThreads); //helper function for retrieving the right thread from state\n\n  const rightThread = list => {\n    for (const thread of list) {\n      if (thread.id === focusedThread) {\n        return thread;\n      }\n    }\n\n    return null;\n  };\n  /*local state for actual thread object*/\n\n\n  const [thread, setThread] = React.useState(rightThread(listOfThreads));\n  /* state for thread comments */\n\n  /*update the focused thread when clicked, refire when focusedThread or state's thread is updated */\n\n  React.useEffect(() => {\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      setThread(actual);\n    }\n  }, [focusedThread, listOfThreads]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"focused-view-custom-bg text-white flex flex-col content-center \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h-screen75\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, !focusedThread ? listOfThreads.map((thread, index) => {\n    return /*#__PURE__*/React.createElement(ThreadInfo, {\n      handleFocusedThread: handleFocusedThread,\n      thread: thread,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 18\n      }\n    });\n  }) : null, focusedThread && thread ? /*#__PURE__*/React.createElement(OriginalPost, {\n    handleFocusedThread: handleFocusedThread,\n    thread: thread,\n    focusedThread: focusedThread,\n    resetFocusedThread: resetFocusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 34\n    }\n  }) : null, focusedThread && thread ? /*#__PURE__*/React.createElement(CommentContainer, {\n    thread: thread,\n    focusedThread: focusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 34\n    }\n  }) : null));\n};\n\nexport default ThreadContainer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadContainer.js"],"names":["React","SearchBar","OriginalPost","useSelector","CommentContainer","ThreadInfo","ThreadContainer","focusedThread","handleFocusedThread","resetFocusedThread","searchTerm","setSearchTerm","useState","handleSearchInput","event","target","value","handleSearchSubmit","console","log","preventDefault","listOfThreads","state","socketState","server","rightThread","list","thread","id","setThread","useEffect","actual","map","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport OriginalPost from \"./OriginalPost\";\nimport {useSelector} from \"react-redux\"\nimport CommentContainer from \"../CommentContainer/CommentContainer\"\nimport ThreadInfo from \"./ThreadInfo\";\n/**\n * ThreadContainer holds all information about a thread; rootpost, comments etc\n * @property {string} focusedThread the threadId of the thread we're currently focusing on \n * @property {Function} handleFocusedThread - callback funktion for setting the focused thread\n * @property {function} resetFocusedThread callback for resetting the focused thread\n * @returns a div with the Originalpost and comments\n */\nconst ThreadContainer = ({focusedThread, handleFocusedThread, resetFocusedThread }) => {\n  /* State and callback functions for the SearchBar */\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   */\n  const handleSearchInput = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  /**\n   * Trigger the search of the searchTerm in the actuall focused chat\n   * event parameter is displayed only to prevent he windows default action when pressing a submit button\n   * @param event the event object of the window\n   */\n  const handleSearchSubmit = (event) => {\n    /* TODO Actually search for threads containing the text in searchTerm and only allow that\n     to be displayed in the threadContainer\n  */\n    console.log(searchTerm);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n  \n    // list of all threads in server object from redux store\n    const listOfThreads = useSelector(\n      (state) => state.socketState.server.listOfThreads\n    );\n  \n    //helper function for retrieving the right thread from state\n    const rightThread = (list) => {\n      for (const thread of list) {\n        if (thread.id === focusedThread) {\n          return thread;\n        }\n      }\n      return null;\n    };\n  \n    /*local state for actual thread object*/\n    const [thread, setThread] = React.useState(rightThread(listOfThreads));\n    /* state for thread comments */\n  \n    /*update the focused thread when clicked, refire when focusedThread or state's thread is updated */\n    React.useEffect(() => {\n      if (listOfThreads != null) {\n        const actual = rightThread(listOfThreads);\n        setThread(actual);\n      }\n    }, [focusedThread, listOfThreads]);\n  return (\n    <div className=\"focused-view-custom-bg text-white flex flex-col content-center \">\n     {/*<SearchBar\n        id=\"search-chat\"\n        value={searchTerm}\n        onButtonClick={handleSearchSubmit}\n        onInputChange={handleSearchInput}\n      /> */}\n      \n      <div className=\"h-screen75\">\n      { !focusedThread ? \n        listOfThreads.map((thread, index) => {\n          return <ThreadInfo handleFocusedThread={handleFocusedThread}thread={thread} key={index}/>\n      }):null }\n      {focusedThread && thread ? <OriginalPost handleFocusedThread={handleFocusedThread} thread={thread} focusedThread={focusedThread} resetFocusedThread={resetFocusedThread} /> : null}\n      {focusedThread && thread ? <CommentContainer thread={thread} focusedThread={focusedThread} /> : null}\n      </div>\n    </div>\n  );\n};\n\nexport default ThreadContainer;\n"]},"metadata":{},"sourceType":"module"}