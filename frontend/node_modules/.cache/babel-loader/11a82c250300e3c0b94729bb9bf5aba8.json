{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadInfo.js\";\nimport React from \"react\";\nimport comments from \"../../img/comments.svg\";\nimport startChat from \"../../img/startChat.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../actions/actions.js\";\nimport ReactTooltip from \"react-tooltip\";\n/**\n * Threadinfo shows initial information about a thread\n * @property {object} thread the current thread object\n * @property {Function} handleFocusedThread - callback funktion for setting which thread we are focusing on\n * @returns a div with information about thread\n */\n\nconst ThreadInfo = ({\n  thread,\n  handleFocusedThread\n}) => {\n  const username = useSelector(state => state.socketState.username);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: thread.id,\n    style: {\n      backgroundColor: \"#2C2F33\"\n    },\n    onClick: handleFocusedThread,\n    className: \"w-full p-2 mt-3 flex flex-col shadow-inner shadow-lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: thread.id,\n    className: \"flex flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: thread.id,\n    className: \"border-2 w-20 h-20 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: thread.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: thread.id,\n    className: \"text-xs pl-2 text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, \"Posted by: \", thread.username, \" on \", thread.timestamp), /*#__PURE__*/React.createElement(\"div\", {\n    id: thread.id,\n    className: \" text-3xl text-white pl-2 w-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }, thread.rootPost.rootHeader)), thread.username !== username ? /*#__PURE__*/React.createElement(\"img\", {\n    \"data-tip\": true,\n    \"data-for\": \"createChatOP\",\n    className: \"self-end ml-auto cursor-pointer\",\n    src: startChat,\n    onClick: () => {\n      dispatch(actions.startChat({\n        chatName: thread.username,\n        from: username,\n        members: [username, thread.username]\n      }));\n    },\n    alt: \"add chat button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"createChatOP\",\n    place: \"left\",\n    effect: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"Create a chat with OP!\"), /*#__PURE__*/React.createElement(\"img\", {\n    id: thread.id,\n    src: comments,\n    className: thread.username !== username ? \"self-end\" : \"self-end ml-auto\",\n    alt: \"displaying num of comments\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"self-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, thread.comments.length)));\n};\n\nexport default ThreadInfo;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/ThreadInfo.js"],"names":["React","useSelector","useDispatch","actions","ReactTooltip","ThreadInfo","thread","handleFocusedThread","username","state","socketState","dispatch","id","backgroundColor","timestamp","rootPost","rootHeader","startChat","chatName","from","members","comments","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport comments from \"../../img/comments.svg\";\nimport startChat from \"../../img/startChat.svg\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as actions from \"../../actions/actions.js\";\nimport ReactTooltip from \"react-tooltip\";\n\n/**\n * Threadinfo shows initial information about a thread\n * @property {object} thread the current thread object\n * @property {Function} handleFocusedThread - callback funktion for setting which thread we are focusing on\n * @returns a div with information about thread\n */\nconst ThreadInfo = ({ thread, handleFocusedThread }) => {\n  const username = useSelector((state) => state.socketState.username);\n  const dispatch = useDispatch();\n\n  return (\n    <div\n      id={thread.id}\n      style={{ backgroundColor: \"#2C2F33\" }}\n      onClick={handleFocusedThread}\n      className=\"w-full p-2 mt-3 flex flex-col shadow-inner shadow-lg\"\n    >\n      <div id={thread.id} className=\"flex flex-row\">\n        <div id={thread.id} className=\"border-2 w-20 h-20 \"></div>\n        <div id={thread.id}>\n          <div id={thread.id} className=\"text-xs pl-2 text-white\">\n            Posted by: {thread.username} on {thread.timestamp}\n          </div>\n          <div id={thread.id} className=\" text-3xl text-white pl-2 w-auto\">\n            {thread.rootPost.rootHeader}\n          </div>\n        </div>\n        {thread.username !== username ? (\n          <img\n            data-tip\n            data-for=\"createChatOP\"\n            className=\"self-end ml-auto cursor-pointer\"\n            src={startChat}\n            onClick={() => {\n              dispatch(\n                actions.startChat({\n                  chatName: thread.username,\n                  from: username,\n                  members: [username, thread.username],\n                })\n              );\n            }}\n            alt=\"add chat button\"\n          />\n        ) : (\n          \"\"\n        )}\n        <ReactTooltip id=\"createChatOP\" place=\"left\" effect=\"solid\">\n          Create a chat with OP!\n        </ReactTooltip>\n        <img\n          id={thread.id}\n          src={comments}\n          className={\n            thread.username !== username ? \"self-end\" : \"self-end ml-auto\"\n          }\n          alt=\"displaying num of comments\"\n        />\n        <span className=\"self-end\">{thread.comments.length}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default ThreadInfo;\n"]},"metadata":{},"sourceType":"module"}