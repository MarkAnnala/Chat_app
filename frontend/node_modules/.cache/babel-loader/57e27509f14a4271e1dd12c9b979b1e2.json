{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/OriginalPost.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n/**\n * OriginalPost is the first post of a Thread\n * @property {string} focusedThread the name of the thread that we are currently focusing on\n * @returns a div containing all the information regarding the original post\n */\n\nconst OriginalPost = ({\n  focusedThread\n}) => {\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(state => state.socketState.server.listOfThreads); //helper function for retrieving the right thread from state\n\n  const rightThread = list => {\n    for (const thread of list) {\n      if (thread.id === focusedThread) {\n        console.log(thread);\n        return thread;\n      }\n    }\n\n    return [];\n  };\n  /*local state for actual thread object*/\n\n\n  const [thread, setThread] = useState(rightThread(listOfThreads));\n  /*update the focused thread when clicked, refire when focusedThread or state's thread is updated */\n\n  useEffect(() => {\n    console.log(thread);\n\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      setThread(actual);\n    }\n  }, [focusedThread, listOfThreads]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h-screen75 rounded border-2 border-solid border-black w-full p-2 mt-2 flex flex-col shadow-inner shadow-lg bg-gray-700\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \" text-4xl text-white pl-2 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, thread.rootPost.rootHeader), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-2xl text-white ml-5 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, thread.rootPost.rootComment), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"self-end text-xs text-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }\n  }, \"Posted by: \", thread.username, \" on \", thread.timestamp));\n};\n\nexport default OriginalPost;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/OriginalPost.js"],"names":["React","useEffect","useState","useSelector","OriginalPost","focusedThread","listOfThreads","state","socketState","server","rightThread","list","thread","id","console","log","setThread","actual","rootPost","rootHeader","rootComment","username","timestamp"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;;;;;;AAKA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAE1C;AACA,QAAMC,aAAa,GAAGH,WAAW,CAC9BI,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBH,aADL,CAAjC,CAH0C,CAO1C;;AACA,QAAMI,WAAW,GAAIC,IAAD,IAAU;AAC5B,SAAK,MAAMC,MAAX,IAAqBD,IAArB,EAA2B;AACzB,UAAIC,MAAM,CAACC,EAAP,KAAcR,aAAlB,EAAiC;AAC7BS,QAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACF,eAAOA,MAAP;AACD;AACF;;AACD,WAAO,EAAP;AACD,GARD;AAUA;;;AACA,QAAM,CAACA,MAAD,EAASI,SAAT,IAAsBd,QAAQ,CAACQ,WAAW,CAACJ,aAAD,CAAZ,CAApC;AAEA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;;AACF,QAAIN,aAAa,IAAI,IAArB,EAA2B;AACzB,YAAMW,MAAM,GAAGP,WAAW,CAACJ,aAAD,CAA1B;AACAU,MAAAA,SAAS,CAACC,MAAD,CAAT;AACD;AACF,GANQ,EAMN,CAACZ,aAAD,EAAgBC,aAAhB,CANM,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,wHAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,MAAM,CAACM,QAAP,CAAgBC,UADnB,CADF,eAIE;AAAK,IAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4CP,MAAM,CAACM,QAAP,CAAgBE,WAA5D,CAJF,eAKF;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyDR,MAAM,CAACS,QAAhE,UAA8ET,MAAM,CAACU,SAArF,CALE,CADF;AASD,CAvCD;;AAyCA,eAAelB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * OriginalPost is the first post of a Thread\n * @property {string} focusedThread the name of the thread that we are currently focusing on\n * @returns a div containing all the information regarding the original post\n */\nconst OriginalPost = ({ focusedThread }) => {\n\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(\n    (state) => state.socketState.server.listOfThreads\n  );\n\n  //helper function for retrieving the right thread from state\n  const rightThread = (list) => {\n    for (const thread of list) {\n      if (thread.id === focusedThread) {\n          console.log(thread);\n        return thread;\n      }\n    }\n    return [];\n  };\n\n  /*local state for actual thread object*/\n  const [thread, setThread] = useState(rightThread(listOfThreads));\n\n  /*update the focused thread when clicked, refire when focusedThread or state's thread is updated */\n  useEffect(() => {\n      console.log(thread);\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      setThread(actual);\n    }\n  }, [focusedThread, listOfThreads]);\n  \n  return (\n    <div className=\"h-screen75 rounded border-2 border-solid border-black w-full p-2 mt-2 flex flex-col shadow-inner shadow-lg bg-gray-700\" >\n      <div className=\" text-4xl text-white pl-2 \">\n        {thread.rootPost.rootHeader}\n      </div>\n      <div className=\"text-2xl text-white ml-5 \">{thread.rootPost.rootComment}</div>\n  <div className=\"self-end text-xs text-white\">Posted by: {thread.username} on {thread.timestamp}</div>\n    </div>\n  );\n};\n\nexport default OriginalPost;\n"]},"metadata":{},"sourceType":"module"}