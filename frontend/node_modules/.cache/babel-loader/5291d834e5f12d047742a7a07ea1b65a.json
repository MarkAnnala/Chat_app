{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/LandingPage/LandingPage.js\";\nimport React from \"react\";\nimport \"../../assets/main.css\";\nimport SideDisplayList from \"../SideDisplayList/SideDisplayList\";\nimport FocusedView from \"../FocusedView/FocusedView\";\nimport InfoDisplayList from \"../InfoDisplayList/InfoDisplayList\";\nimport { useSelector } from \"react-redux\";\n/**\n * LandingPage holds the layout design grid of the app. Also manages\n * the routing and display of everything inside SideDisplayList, InfoDisplayList and FocusedView\n *\n * @returns a div containing the SideDisplayList, InfoDisplayList and FocusedView components\n */\n\nconst LandingPage = () => {\n  /* state to check what chat we are currently focusing on */\n  const [focusedChat, setFocusedChat] = React.useState(null);\n  /*state to check what thread we are focuing on */\n\n  const [focusedThread, setFocusedThread] = React.useState(null);\n  /* callback function for getting the id of the direct message div that we are clicking on */\n\n  const handleFocusedChat = event => {\n    setFocusedChat(event.target.id);\n  };\n  /*callback for focusing a thread */\n\n\n  const handleFocusedThread = event => {\n    console.log(event.target);\n    setFocusedThread(event.target.id);\n  };\n\n  const resetFocusedThread = () => {\n    setFocusedThread(null);\n  };\n  /* The global server object */\n\n\n  const [server, setServer] = React.useState({}); //server object from redux\n\n  const serverObject = useSelector(state => state.socketState.server);\n  React.useEffect(() => {\n    if (serverObject !== null) {\n      setServer(serverObject);\n    }\n  }, [serverObject]);\n  /* state to check what page we are focusing on - some server or the home page*/\n\n  /* Focusing on Home always on start*/\n\n  const [focusedPage, setFocusedPage] = React.useState(\"Home\");\n  /* callback function for getting the id of the page that we are clicking on */\n\n  const handleFocusedPage = event => {\n    setFocusedPage(event.target.id);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-cols-custom h-screen\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SideDisplayList, {\n    resetFocusedThread: resetFocusedThread,\n    handleFocusedPage: handleFocusedPage,\n    server: server,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(InfoDisplayList, {\n    handleFocusedChat: handleFocusedChat,\n    focusedPage: focusedPage,\n    handleFocusedThread: handleFocusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FocusedView, {\n    focusedChat: focusedChat,\n    focusedPage: focusedPage,\n    handleFocusedThread: handleFocusedThread,\n    focusedThread: focusedThread,\n    resetFocusedThread: resetFocusedThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default LandingPage;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/LandingPage/LandingPage.js"],"names":["React","SideDisplayList","FocusedView","InfoDisplayList","useSelector","LandingPage","focusedChat","setFocusedChat","useState","focusedThread","setFocusedThread","handleFocusedChat","event","target","id","handleFocusedThread","console","log","resetFocusedThread","server","setServer","serverObject","state","socketState","useEffect","focusedPage","setFocusedPage","handleFocusedPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;;;;;;;AAMA,MAAMC,WAAW,GAAG,MAAM;AACxB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAAtC;AAEA;;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,KAAK,CAACQ,QAAN,CAAe,IAAf,CAA1C;AAEA;;AACA,QAAMG,iBAAiB,GAAIC,KAAD,IAAW;AACnCL,IAAAA,cAAc,CAACK,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAd;AACD,GAFD;AAIA;;;AAEA,QAAMC,mBAAmB,GAAIH,KAAD,IAAW;AACrCI,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACC,MAAlB;AACAH,IAAAA,gBAAgB,CAACE,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAhB;AACD,GAHD;;AAKA,QAAMI,kBAAkB,GAAG,MAAK;AAC9BR,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD,GAFD;AAIA;;;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBpB,KAAK,CAACQ,QAAN,CAAe,EAAf,CAA5B,CAxBwB,CA0BxB;;AACA,QAAMa,YAAY,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBJ,MAA9B,CAAhC;AAEAnB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACpB,QAAIH,YAAY,KAAK,IAArB,EAA2B;AACzBD,MAAAA,SAAS,CAACC,YAAD,CAAT;AACD;AACF,GAJD,EAIG,CAACA,YAAD,CAJH;AAMA;;AACA;;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgC1B,KAAK,CAACQ,QAAN,CAAe,MAAf,CAAtC;AAEA;;AACA,QAAMmB,iBAAiB,GAAIf,KAAD,IAAW;AACnCc,IAAAA,cAAc,CAACd,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAd;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AACE,IAAA,kBAAkB,EAAEI,kBADtB;AAEE,IAAA,iBAAiB,EAAES,iBAFrB;AAGE,IAAA,MAAM,EAAER,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,eAAD;AACE,IAAA,iBAAiB,EAAER,iBADrB;AAEE,IAAA,WAAW,EAAEc,WAFf;AAGE,IAAA,mBAAmB,EAAEV,mBAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAWE,oBAAC,WAAD;AACE,IAAA,WAAW,EAAET,WADf;AAEE,IAAA,WAAW,EAAEmB,WAFf;AAGE,IAAA,mBAAmB,EAAEV,mBAHvB;AAIE,IAAA,aAAa,EAAEN,aAJjB;AAKE,IAAA,kBAAkB,EAAES,kBALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF;AAqBD,CAjED;;AAmEA,eAAeb,WAAf","sourcesContent":["import React from \"react\";\nimport \"../../assets/main.css\";\nimport SideDisplayList from \"../SideDisplayList/SideDisplayList\";\nimport FocusedView from \"../FocusedView/FocusedView\";\nimport InfoDisplayList from \"../InfoDisplayList/InfoDisplayList\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * LandingPage holds the layout design grid of the app. Also manages\n * the routing and display of everything inside SideDisplayList, InfoDisplayList and FocusedView\n *\n * @returns a div containing the SideDisplayList, InfoDisplayList and FocusedView components\n */\nconst LandingPage = () => {\n  /* state to check what chat we are currently focusing on */\n  const [focusedChat, setFocusedChat] = React.useState(null);\n\n  /*state to check what thread we are focuing on */\n  const [focusedThread, setFocusedThread] = React.useState(null);\n\n  /* callback function for getting the id of the direct message div that we are clicking on */\n  const handleFocusedChat = (event) => {\n    setFocusedChat(event.target.id);\n  };\n\n  /*callback for focusing a thread */\n\n  const handleFocusedThread = (event) => {\n    console.log(event.target);\n    setFocusedThread(event.target.id);\n  };\n\n  const resetFocusedThread = ()=> {Â \n    setFocusedThread(null);\n  }\n\n  /* The global server object */\n  const [server, setServer] = React.useState({});\n\n  //server object from redux\n  const serverObject = useSelector((state) => state.socketState.server);\n\n  React.useEffect(() => {\n    if (serverObject !== null) {\n      setServer(serverObject);\n    }\n  }, [serverObject]);\n\n  /* state to check what page we are focusing on - some server or the home page*/\n  /* Focusing on Home always on start*/\n  const [focusedPage, setFocusedPage] = React.useState(\"Home\");\n\n  /* callback function for getting the id of the page that we are clicking on */\n  const handleFocusedPage = (event) => {\n    setFocusedPage(event.target.id);\n  };\n\n  return (\n    <div className=\"grid grid-cols-custom h-screen\">\n      <SideDisplayList\n        resetFocusedThread={resetFocusedThread}\n        handleFocusedPage={handleFocusedPage}\n        server={server} />\n      <InfoDisplayList\n        handleFocusedChat={handleFocusedChat}\n        focusedPage={focusedPage}\n        handleFocusedThread={handleFocusedThread}\n      />\n\n      <FocusedView\n        focusedChat={focusedChat}\n        focusedPage={focusedPage}\n        handleFocusedThread={handleFocusedThread}\n        focusedThread={focusedThread}\n        resetFocusedThread={resetFocusedThread}\n      />\n    </div>\n  );\n};\n\nexport default LandingPage;\n"]},"metadata":{},"sourceType":"module"}