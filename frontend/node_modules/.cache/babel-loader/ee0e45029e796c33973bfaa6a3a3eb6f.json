{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/FriendsList/FriendsList.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport add_friend from \"../../../img/add_friend.svg\";\nimport AddFriend from \"./AddFriend\";\nimport * as actions from \"../../../actions/actions\";\nimport ReactTooltip from \"react-tooltip\";\n/**\n * FriendsList contains a list of the users friends\n * @param {string} myUsername The currently logged in used\n * @returns a div containing all friends for the logged in user\n */\n\nconst FriendsList = ({\n  myUsername,\n  handleFocusedChat,\n  setFocusedChat\n}) => {\n  const dispatch = useDispatch();\n  const currentFriends = useSelector(state => state.socketState.listOfFriends);\n  const currentChats = useSelector(state => state.socketState.listOfDms);\n  const [allChats, setAllChats] = useState([]);\n  const [friends, setFriends] = useState([]);\n  /* state to toggle modal, state should preferably probably be handled\n   inside modal for scalability and safety. Also refactor to use createPortal when as it is recommended.. */\n\n  const [show, setShow] = useState(false);\n  /* State that contains the username of the user we're trying to add */\n\n  const [username, setUsername] = useState(\"\");\n  /* state controlling if the friend request was successful or not, TODO: addSuccessful must be set to false and username false once friend is added */\n\n  const [addSuccessful, setAddSuccessful] = useState(false);\n  /*Used to toggle hover effect*/\n\n  const [hovered, setHovered] = useState(false);\n  /* Gets the username of the user doing the friend request */\n\n  const requester = useSelector(state => state.socketState.username);\n  /**\n   * set the username of the user we want to add\n   * @param event the event of the window object\n   */\n\n  const handleInputChange = event => {\n    setUsername(event.target.value);\n  };\n  /* when addSuccesful changes and username is not null, refire and add a friend into the array of friends */\n\n\n  React.useEffect(() => {\n    if (addSuccessful && username) {\n      dispatch(actions.addFriend({\n        username\n      }));\n      setUsername(\"\");\n      setAddSuccessful(false);\n    }\n  }, [addSuccessful]);\n  const [firstRender, setFirstRender] = useState(false);\n  React.useEffect(() => {\n    if (currentChats != null && currentChats != []) {\n      let difference = currentChats.filter(x => !allChats.includes(x));\n      setAllChats(currentChats);\n      console.log(difference);\n\n      if (firstRender && difference != [] && allChats != []) {\n        console.log(\"IN IFCASE\");\n        setFocusedChat(difference[0].chatID);\n      }\n\n      setFirstRender(true);\n    }\n  }, [currentChats]);\n  /* when currentFriends changes - refire useEffect and add the new friends to friends state */\n\n  React.useEffect(() => {\n    if (currentFriends != null) {\n      setFriends(currentFriends);\n    }\n  }, [currentFriends]);\n\n  const startChat = e => {\n    //cant start a chat if there's allready one with that person \n    if (!allChats.includes(e.target.id)) {\n      const data = {\n        chatName: e.target.id,\n        from: myUsername,\n        members: [myUsername, e.target.id]\n      };\n      dispatch(actions.startChat(data));\n      console.log(currentChats); //handleFocusedChat(e);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"friends\",\n    className: \"text-white text-xl h-auto border-solid border-b-2 border-gray-700 flex flex-row justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Friends\", /*#__PURE__*/React.createElement(\"img\", {\n    \"data-tip\": true,\n    \"data-for\": \"addFriendTip\",\n    src: add_friend,\n    alt: \"\",\n    className: hovered ? \"h-6 w-6 plusIcon-custom-hover cursor-pointer\" : \"h-6 w-6 cursor-pointer\",\n    onClick: () => setShow(true),\n    onMouseEnter: () => {\n      setHovered(!hovered);\n    },\n    onMouseLeave: () => {\n      setHovered(!hovered);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ReactTooltip, {\n    id: \"addFriendTip\",\n    place: \"right\",\n    effect: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Add a new friend!\"), show ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"addFriend-custom-overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AddFriend, {\n    userInput: username,\n    requester: requester,\n    handleInputChange: handleInputChange,\n    setAddSuccessful: setAddSuccessful,\n    currentFriends: currentFriends,\n    show: show,\n    setShow: setShow,\n    from: requester,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  })) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, friends.map((friend, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-white text-xl hover:bg-gray-500 cursor-pointer\",\n      key: index,\n      onClick: e => {\n        startChat(e);\n      },\n      id: friend,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, friend);\n  })));\n};\n\nexport default FriendsList;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/FriendsList/FriendsList.js"],"names":["React","useState","useDispatch","useSelector","AddFriend","actions","ReactTooltip","FriendsList","myUsername","handleFocusedChat","setFocusedChat","dispatch","currentFriends","state","socketState","listOfFriends","currentChats","listOfDms","allChats","setAllChats","friends","setFriends","show","setShow","username","setUsername","addSuccessful","setAddSuccessful","hovered","setHovered","requester","handleInputChange","event","target","value","useEffect","addFriend","firstRender","setFirstRender","difference","filter","x","includes","console","log","chatID","startChat","e","id","data","chatName","from","members","add_friend","map","friend","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport add_friend from \"../../../img/add_friend.svg\";\nimport AddFriend from \"./AddFriend\";\nimport * as actions from \"../../../actions/actions\";\nimport ReactTooltip from \"react-tooltip\";\n/**\n * FriendsList contains a list of the users friends\n * @param {string} myUsername The currently logged in used\n * @returns a div containing all friends for the logged in user\n */\n\nconst FriendsList = ({ myUsername, handleFocusedChat, setFocusedChat}) => {\n  const dispatch = useDispatch();\n\n  const currentFriends = useSelector(\n    (state) => state.socketState.listOfFriends\n  );\n  \n\n  const currentChats = useSelector(\n    (state) => state.socketState.listOfDms\n  ); \n\n  const [allChats, setAllChats] = useState([]);\n  const [friends, setFriends] = useState([]);\n\n  /* state to toggle modal, state should preferably probably be handled\n   inside modal for scalability and safety. Also refactor to use createPortal when as it is recommended.. */\n  const [show, setShow] = useState(false);\n  /* State that contains the username of the user we're trying to add */\n  const [username, setUsername] = useState(\"\");\n  /* state controlling if the friend request was successful or not, TODO: addSuccessful must be set to false and username false once friend is added */\n  const [addSuccessful, setAddSuccessful] = useState(false);\n  /*Used to toggle hover effect*/\n  const [hovered, setHovered] = useState(false);\n  /* Gets the username of the user doing the friend request */\n  const requester = useSelector((state) => state.socketState.username);\n  /**\n   * set the username of the user we want to add\n   * @param event the event of the window object\n   */\n  const handleInputChange = (event) => {\n    setUsername(event.target.value);\n  };\n\n  /* when addSuccesful changes and username is not null, refire and add a friend into the array of friends */\n  React.useEffect(() => {\n    if (addSuccessful && username) {\n      dispatch(actions.addFriend({ username }));\n      setUsername(\"\");\n      setAddSuccessful(false);\n    }\n  }, [addSuccessful]);\n\n  const [firstRender, setFirstRender] = useState(false);\n  React.useEffect(()=>{\n    if(currentChats !=null && currentChats !=[]){\n      let difference = currentChats.filter(x => !allChats.includes(x));\n      setAllChats(currentChats);\n      console.log(difference);\n      if(firstRender && difference != [] && allChats != []){\n        console.log(\"IN IFCASE\");\n        setFocusedChat(difference[0].chatID);\n      }\n      setFirstRender(true);\n    }\n  }, [currentChats]);\n  /* when currentFriends changes - refire useEffect and add the new friends to friends state */\n  React.useEffect(() => {\n    if (currentFriends != null) {\n      setFriends(currentFriends);\n    }\n  }, [currentFriends]);\n\n  const startChat = (e) => {\n    //cant start a chat if there's allready one with that person \n\n    if(!allChats.includes(e.target.id)){\n      const data = { chatName: e.target.id , from: myUsername, members: [myUsername, e.target.id] };\n      dispatch(actions.startChat(data));\n      console.log(currentChats);\n      //handleFocusedChat(e);\n    }\n  };\n  return (\n    <div className=\"flex flex-col ml-2\">\n      <div\n        id=\"friends\"\n        className=\"text-white text-xl h-auto border-solid border-b-2 border-gray-700 flex flex-row justify-between\"\n      >\n        Friends\n        <img\n          data-tip\n          data-for=\"addFriendTip\"\n          src={add_friend}\n          alt=\"\"\n          className={\n            hovered\n              ? \"h-6 w-6 plusIcon-custom-hover cursor-pointer\"\n              : \"h-6 w-6 cursor-pointer\"\n          }\n          onClick={() => setShow(true)}\n          onMouseEnter={() => {\n            setHovered(!hovered);\n          }}\n          onMouseLeave={() => {\n            setHovered(!hovered);\n          }}\n        />\n        <ReactTooltip id=\"addFriendTip\" place=\"right\" effect=\"solid\">\n          Add a new friend!\n        </ReactTooltip>\n        {show ? (\n          <div className=\"addFriend-custom-overlay\">\n            <AddFriend\n              userInput={username}\n              requester={requester}\n              handleInputChange={handleInputChange}\n              setAddSuccessful={setAddSuccessful}\n              currentFriends={currentFriends}\n              show={show}\n              setShow={setShow}\n              from={requester}\n            ></AddFriend>\n          </div>\n        ) : null}\n      </div>\n      <div className=\"flex flex-col\">\n        {friends.map((friend, index) => {\n          return (\n            <div\n              className=\"text-white text-xl hover:bg-gray-500 cursor-pointer\"\n              key={index}\n              onClick ={(e)=>{startChat(e)}}\n              id={friend}\n            >\n              {friend}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default FriendsList;\n"]},"metadata":{},"sourceType":"module"}