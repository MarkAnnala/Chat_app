{"ast":null,"code":"const loginState = {\n  loginSuccess: false,\n  username: null,\n  loginResponse: null\n};\n/**\n * loginReducer handles actions of login\n * \n * @param {object} state\n * @property {bool} loginSuccess true if login was successfull, otherwise false\n * @property {string} username holds the username that we successfully logged in with\n * @property {string} loginResponse holds the response from the http request\n * @param {object} action \n * @property {string} type what type of action it is\n * @property {object} payload contains nescessary data for that particular action type\n * \n * @returns updated state\n */\n\nconst loginReducer = (state = loginState, action) => {\n  switch (action.type) {\n    case \"SUCCESS\":\n      {\n        return { ...state,\n          loginSuccess: true,\n          username: action.payload.username,\n          loginResponse: action.payload.response\n        };\n      }\n\n    case \"FAILURE\":\n      {\n        /* Failure simply returns loginState as false */\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/reducers/loginReducer.js"],"names":["loginState","loginSuccess","username","loginResponse","loginReducer","state","action","type","payload","response"],"mappings":"AAAA,MAAMA,UAAU,GAAG;AAAEC,EAAAA,YAAY,EAAE,KAAhB;AAAuBC,EAAAA,QAAQ,EAAE,IAAjC;AAAuCC,EAAAA,aAAa,EAAG;AAAvD,CAAnB;AAGA;;;;;;;;;;;;;;AAaA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGL,UAAT,EAAqBM,MAArB,KAAgC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AAAgB;AACd,eAAO,EAAC,GAAGF,KAAJ;AAAWJ,UAAAA,YAAY,EAAE,IAAzB;AAA+BC,UAAAA,QAAQ,EAAGI,MAAM,CAACE,OAAP,CAAeN,QAAzD;AAAmEC,UAAAA,aAAa,EAAEG,MAAM,CAACE,OAAP,CAAeC;AAAjG,SAAP;AACD;;AACD,SAAK,SAAL;AAAgB;AACZ;AACF,eAAOJ,KAAP;AACD;;AACD;AACE,aAAOA,KAAP;AATJ;AAWD,CAZD;;AAcA,eAAeD,YAAf","sourcesContent":["const loginState = { loginSuccess: false, username: null, loginResponse : null };\n\n\n/**\n * loginReducer handles actions of login\n * \n * @param {object} state\n * @property {bool} loginSuccess true if login was successfull, otherwise false\n * @property {string} username holds the username that we successfully logged in with\n * @property {string} loginResponse holds the response from the http request\n * @param {object} action \n * @property {string} type what type of action it is\n * @property {object} payload contains nescessary data for that particular action type\n * \n * @returns updated state\n */\nconst loginReducer = (state = loginState, action) => {\n  switch (action.type) {\n    case \"SUCCESS\": {\n      return {...state, loginSuccess: true, username : action.payload.username, loginResponse: action.payload.response};\n    }\n    case \"FAILURE\": {\n        /* Failure simply returns loginState as false */\n      return state;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n\n"]},"metadata":{},"sourceType":"module"}