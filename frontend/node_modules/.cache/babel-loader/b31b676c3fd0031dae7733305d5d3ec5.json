{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Chat/Chat.js\";\nimport React from \"react\";\nimport \"../../assets/main.css\";\nimport Message from \"./Message\";\nimport { useSelector } from \"react-redux\";\n/**\n * Chat holds the layout of all messages and the input/sent\n * @property messages the state containing list of chat messages\n * @returns a div containing all messages\n */\n\nconst Chat = ({\n  messages\n}) => {\n  const incomingChats = useSelector(state => state.socketState.incomingChats);\n  const allMessages = incomingChats.concat(messages);\n  /* Using ref to makes sure that we scroll to end of chat area if it overflows */\n\n  const messagesEndRef = React.useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  React.useEffect(scrollToBottom, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-area\",\n    className: \" h-screen75 w-full pl-2 pr-2 mt-10 overflow-y-scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, allMessages.map((message, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Chat/Chat.js"],"names":["React","Message","useSelector","Chat","messages","incomingChats","state","socketState","allMessages","concat","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","behavior","useEffect","map","message","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA;;;;;;AAKA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAE3B,QAAMC,aAAa,GAAGH,WAAW,CAC5BI,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBF,aADA,CAAjC;AAGA,QAAMG,WAAW,GAAGH,aAAa,CAACI,MAAd,CAAqBL,QAArB,CAApB;AAEF;;AACA,QAAMM,cAAc,GAAGV,KAAK,CAACW,MAAN,CAAa,IAAb,CAAvB;;AACA,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,cAAc,CAACG,OAAf,CAAuBC,cAAvB,CAAsC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAtC;AACD,GAFD;;AAGAf,EAAAA,KAAK,CAACgB,SAAN,CAAgBJ,cAAhB,EAAgC,CAACR,QAAD,CAAhC;AAEA,sBACE;AACE,IAAA,EAAE,EAAC,WADL;AAEE,IAAA,SAAS,EAAC,sDAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGI,WAAW,CAACS,GAAZ,CAAgB,CAACC,OAAD,EAAUC,KAAV,kBACf,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEA,KAAd;AAAqB,IAAA,OAAO,EAAED,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CALH,eASE;AAAK,IAAA,GAAG,EAAER,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CA3BD;;AA6BA,eAAeP,IAAf","sourcesContent":["import React from \"react\";\nimport \"../../assets/main.css\";\nimport Message from \"./Message\";\nimport { useSelector } from \"react-redux\";\n/**\n * Chat holds the layout of all messages and the input/sent\n * @property messages the state containing list of chat messages\n * @returns a div containing all messages\n */\nconst Chat = ({ messages }) => {\n\n    const incomingChats = useSelector(\n        (state) => state.socketState.incomingChats\n      );\n    const allMessages = incomingChats.concat(messages);\n\n  /* Using ref to makes sure that we scroll to end of chat area if it overflows */\n  const messagesEndRef = React.useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  React.useEffect(scrollToBottom, [messages]);\n\n  return (\n    <div\n      id=\"chat-area\"\n      className=\" h-screen75 w-full pl-2 pr-2 mt-10 overflow-y-scroll\"\n    >\n      {/* Loop through the state messages and print a message component for each message  */}\n      {allMessages.map((message, index) => (\n        <Message key={index} message={message} />\n      ))}\n\n      <div ref={messagesEndRef} />\n    </div>\n  );\n};\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}