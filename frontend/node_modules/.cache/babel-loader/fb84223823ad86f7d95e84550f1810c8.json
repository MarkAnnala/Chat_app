{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/MessagesList.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport plus from \"../../img/plus.svg\";\nimport StartChat from \"./StartChat\";\nimport { useSelector } from \"react-redux\";\n/**\n * contains the list of available direct messages that we can chat in\n *\n * @param {function} callback function used to get the target of what we are clicking on\n * @property {string} username  username of the logged in user\n * returns a div containing all direct messages\n */\n\nconst MessagesList = ({\n  handleFocusedChat,\n  username\n}) => {\n  /* Get friendslist from redux store */\n  const friends = useSelector(state => state.socketState.listOfFriends);\n  /* Get list of dms from redux store */\n\n  const chatObjects = useSelector(state => state.socketState.listOfDms);\n  const [chats, setChats] = useState([]);\n  useEffect(() => {\n    if (chatObjects !== null) {\n      setChats(chatObjects);\n    }\n  }, [chatObjects]);\n  /* Determens if we're showing the add chat modal */\n\n  const [showAddChat, setShowAddChat] = useState(false);\n  const [hover, setHover] = useState(false);\n  /*On mount, add event listerner for click outside ref addChatModal*/\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n  /*Handle click outside addChatModal */\n\n  const handleClick = e => {\n    if (addChatModal.current.contains(e.target)) {\n      // inside click\n      return;\n    } else {\n      setShowAddChat(false);\n    }\n  };\n  /*Keep track of the modal */\n\n\n  const addChatModal = useRef();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col ml-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"messagesList\",\n    className: \"mt-5 text-white text-xl h-auto border-solid border-b-2 border-gray-700 flex flex-row justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Direct Messages\", /*#__PURE__*/React.createElement(\"img\", {\n    onClick: () => {\n      setShowAddChat(true);\n    },\n    src: plus,\n    onMouseEnter: setHover(true),\n    onMouseLeave: setHover(false),\n    alt: \"Create a new chat!\",\n    className: \"h-6 w-6\" + hover ? \"plusIcon-custom-hover\" : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: addChatModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, showAddChat ? /*#__PURE__*/React.createElement(StartChat, {\n    setShowAddChat: setShowAddChat,\n    username: username,\n    friends: friends,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, chats.map((chat, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"text-white text-xl hover:bg-gray-500 cursor-pointer\",\n      onClick: handleFocusedChat,\n      key: index,\n      id: chat.chatID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, chat.chatName);\n  })));\n};\n\nexport default MessagesList;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/InfoDisplayList/MessagesList.js"],"names":["React","useState","useEffect","useRef","StartChat","useSelector","MessagesList","handleFocusedChat","username","friends","state","socketState","listOfFriends","chatObjects","listOfDms","chats","setChats","showAddChat","setShowAddChat","hover","setHover","document","addEventListener","handleClick","removeEventListener","e","addChatModal","current","contains","target","plus","map","chat","index","chatID","chatName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport plus from \"../../img/plus.svg\";\nimport StartChat from \"./StartChat\";\nimport { useSelector } from \"react-redux\";\n\n/**\n * contains the list of available direct messages that we can chat in\n *\n * @param {function} callback function used to get the target of what we are clicking on\n * @property {string} username  username of the logged in user\n * returns a div containing all direct messages\n */\nconst MessagesList = ({ handleFocusedChat, username }) => {\n  /* Get friendslist from redux store */\n  const friends = useSelector((state) => state.socketState.listOfFriends);\n\n  /* Get list of dms from redux store */\n  const chatObjects = useSelector((state) => state.socketState.listOfDms);\n\n  const [chats, setChats] = useState([]);\n\n  useEffect(() => {\n    if (chatObjects !== null) {\n      setChats(chatObjects);\n    }\n  }, [chatObjects]);\n\n  /* Determens if we're showing the add chat modal */\n  const [showAddChat, setShowAddChat] = useState(false);\n  const [hover, setHover] = useState(false);\n\n  /*On mount, add event listerner for click outside ref addChatModal*/\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", handleClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClick);\n    };\n  }, []);\n\n  /*Handle click outside addChatModal */\n  const handleClick = (e) => {\n    if (addChatModal.current.contains(e.target)) {\n      // inside click\n      return;\n    } else {\n      setShowAddChat(false);\n    }\n  };\n  /*Keep track of the modal */\n  const addChatModal = useRef();\n\n  return (\n    <div className=\"flex flex-col ml-2\">\n      <div\n        id=\"messagesList\"\n        className=\"mt-5 text-white text-xl h-auto border-solid border-b-2 border-gray-700 flex flex-row justify-between\"\n      >\n        Direct Messages\n        <img\n          onClick={() => {\n            setShowAddChat(true);\n          }}\n          src={plus}\n          onMouseEnter= {setHover(true)}\n          onMouseLeave ={setHover(false)}\n          alt=\"Create a new chat!\"\n          className={\"h-6 w-6\" +  hover ? \"plusIcon-custom-hover\" : null}\n        />\n        </div>\n\n      <div ref={addChatModal}>\n        {showAddChat ? (\n          <StartChat\n            setShowAddChat={setShowAddChat}\n            username={username}\n            friends={friends}\n          />\n        ) : null}\n      </div>\n      <div className=\"flex flex-col\">\n        {chats.map((chat, index) => {\n          return (\n            <div\n              className=\"text-white text-xl hover:bg-gray-500 cursor-pointer\"\n              onClick={handleFocusedChat}\n              key={index}\n              id={chat.chatID}\n            >\n              {chat.chatName}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MessagesList;\n"]},"metadata":{},"sourceType":"module"}