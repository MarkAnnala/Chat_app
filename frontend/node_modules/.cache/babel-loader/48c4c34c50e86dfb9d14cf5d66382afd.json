{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/OriginalPost.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst OriginalPost = ({\n  focusedThread\n}) => {\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(state => state.socketState.server.listOfThreads);\n  /*local state for actual thread object*/\n\n  const [thread, setThread] = useState(rightThread(listOfThreads));\n\n  const rightThread = list => {\n    for (const thread of list) {\n      if (thread.rootPost.rootHeader === focusedThread) {\n        return thread;\n      }\n    }\n\n    return [];\n  };\n\n  useEffect(() => {\n    if (listOfThreads != null) {\n      const actual = rightThread(listOfThreads);\n      console.log(actual);\n      setThread(() => {\n        return actual;\n      });\n      console.log(thread);\n    }\n  }, [focusedThread]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \" w-full rounded border border-solid border-black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default OriginalPost;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ThreadContainer/OriginalPost.js"],"names":["React","useEffect","useState","useSelector","OriginalPost","focusedThread","listOfThreads","state","socketState","server","thread","setThread","rightThread","list","rootPost","rootHeader","actual","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AAC1C;AACA,QAAMC,aAAa,GAAGH,WAAW,CAC9BI,KAAD,IAAWA,KAAK,CAACC,WAAN,CAAkBC,MAAlB,CAAyBH,aADL,CAAjC;AAIA;;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACU,WAAW,CAACN,aAAD,CAAZ,CAApC;;AAEA,QAAMM,WAAW,GAAIC,IAAD,IAAU;AAC5B,SAAK,MAAMH,MAAX,IAAqBG,IAArB,EAA2B;AACzB,UAAIH,MAAM,CAACI,QAAP,CAAgBC,UAAhB,KAA+BV,aAAnC,EAAkD;AAChD,eAAOK,MAAP;AACD;AACF;;AACD,WAAO,EAAP;AACD,GAPD;;AASAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,aAAa,IAAI,IAApB,EAAyB;AACvB,YAAMU,MAAM,GAAGJ,WAAW,CAACN,aAAD,CAA1B;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAL,MAAAA,SAAS,CAAC,MAAI;AAAC,eAAOK,MAAP;AAAe,OAArB,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACD;AACJ,GAPQ,EAON,CAACL,aAAD,CAPM,CAAT;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,kDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD,CAhCD;;AAkCA,eAAeD,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\n\nconst OriginalPost = ({ focusedThread }) => {\n  // list of all threads in server object from redux store\n  const listOfThreads = useSelector(\n    (state) => state.socketState.server.listOfThreads\n  );\n\n  /*local state for actual thread object*/\n  const [thread, setThread] = useState(rightThread(listOfThreads));\n\n  const rightThread = (list) => {\n    for (const thread of list) {\n      if (thread.rootPost.rootHeader === focusedThread) {\n        return thread;\n      }\n    }\n    return [];\n  };\n\n  useEffect(() => {\n      if(listOfThreads != null){\n        const actual = rightThread(listOfThreads);\n        console.log(actual);\n        setThread(()=>{return actual;});\n        console.log(thread);\n      }\n  }, [focusedThread]);\n\n  return (\n    <div className=\" w-full rounded border border-solid border-black\">\n      {/*thread.rootPost.rootHeader*/}\n    </div>\n  );\n};\n\nexport default OriginalPost;\n"]},"metadata":{},"sourceType":"module"}