{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ChatContainer/ChatContainer.js\";\nimport React from \"react\";\nimport \"../../assets/main.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Chat from \"../Chat/Chat\";\nimport ChatInput from \"../ChatInput/ChatInput\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch } from \"react-redux\";\n/**\n * ChatContainer holds the layout of the focused view of a selected chat\n *\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\n\nconst ChatContainer = () => {\n  const dispatch = useDispatch();\n  /* State and callback functions for the SearchBar */\n\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   *\n   */\n\n  const handleSearchInput = event => {\n    setSearchTerm(event.target.value);\n  };\n  /**\n   * Trigger the search of the searchTerm in the actuall focused chat\n   * event parameter is displayed only to prevent he windows default action when pressing a submit button\n   * @param event the event object of the window\n   *\n   */\n\n\n  const handleSearchSubmit = event => {\n    /* TODO Actually search for chat messages containing the text in searchTerm and only allow that\n       to be displayed in the chat\n    */\n    console.log(searchTerm);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n  /* State and callback functions for Chat and ChatInput */\n\n  /*All old messages, these are hardcoded. The self field is if you've sent the message or not */\n\n\n  const [messages, setMessages] = React.useState([]);\n  /*This is the state used when typing a new message*/\n\n  const [newMessage, setNewMessage] = React.useState(\"\");\n  /**\n   * Set the messages state by updating it with the \"newMessage\" message\n   * @param event the event object of the window\n   */\n\n  const sendMessage = event => {\n    event.preventDefault();\n    setMessages(prev => [...prev, {\n      message: newMessage,\n      self: true\n    }]);\n    dispatch(actions.sendMessage({\n      message: newMessage,\n      username: \"Skoben\"\n    }));\n    setNewMessage(\"\");\n  };\n  /**\n   * Set the newMessage state to whatever value is in event target\n   * @param event the event object of the window\n   */\n\n\n  const handleMessage = event => {\n    setNewMessage(event.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col content-center focused-view-custom-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    id: \"search-chat\",\n    value: searchTerm,\n    onButtonClick: handleSearchSubmit,\n    onInputChange: handleSearchInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Chat, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ChatInput, {\n    message: newMessage,\n    handleInputChange: handleMessage,\n    handleButtonClick: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ChatContainer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/ChatContainer/ChatContainer.js"],"names":["React","SearchBar","Chat","ChatInput","actions","useDispatch","ChatContainer","dispatch","searchTerm","setSearchTerm","useState","handleSearchInput","event","target","value","handleSearchSubmit","console","log","preventDefault","messages","setMessages","newMessage","setNewMessage","sendMessage","prev","message","self","username","handleMessage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA;;;;;;AAKA,MAAMC,aAAa,GAAG,MAAM;AAE1B,QAAMC,QAAQ,GAAGF,WAAW,EAA5B;AAEA;;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BT,KAAK,CAACU,QAAN,CAAe,EAAf,CAApC;AAEA;;;;;;AAKA,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnCH,IAAAA,aAAa,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;AAIA;;;;;;;;AAMA,QAAMC,kBAAkB,GAAIH,KAAD,IAAW;AACpC;;;AAGAI,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAZ;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAG,IAAAA,KAAK,CAACM,cAAN;AACD,GAPD;AAUA;;AAEA;;;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpB,KAAK,CAACU,QAAN,CAAe,EAAf,CAAhC;AACA;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BtB,KAAK,CAACU,QAAN,CAAe,EAAf,CAApC;AACA;;;;;AAIA,QAAMa,WAAW,GAAIX,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACM,cAAN;AACAE,IAAAA,WAAW,CAAEI,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAU;AAAEC,MAAAA,OAAO,EAAEJ,UAAX;AAAuBK,MAAAA,IAAI,EAAE;AAA7B,KAAV,CAAX,CAAX;AACAnB,IAAAA,QAAQ,CAACH,OAAO,CAACmB,WAAR,CAAoB;AAACE,MAAAA,OAAO,EAAEJ,UAAV;AAAsBM,MAAAA,QAAQ,EAAE;AAAhC,KAApB,CAAD,CAAR;AACAL,IAAAA,aAAa,CAAC,EAAD,CAAb;AAED,GAND;AAQA;;;;;;AAIA,QAAMM,aAAa,GAAIhB,KAAD,IAAW;AAC/BU,IAAAA,aAAa,CAACV,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,qDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,EAAE,EAAC,aADL;AAEE,IAAA,KAAK,EAAEN,UAFT;AAGE,IAAA,aAAa,EAAEO,kBAHjB;AAIE,IAAA,aAAa,EAAEJ,iBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAQE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEQ,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,eASE,oBAAC,SAAD;AACE,IAAA,OAAO,EAAIE,UADb;AAEE,IAAA,iBAAiB,EAAEO,aAFrB;AAGE,IAAA,iBAAiB,EAAEL,WAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAiBD,CA7ED;;AA+EA,eAAejB,aAAf","sourcesContent":["import React from \"react\";\nimport \"../../assets/main.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Chat from \"../Chat/Chat\";\nimport ChatInput from \"../ChatInput/ChatInput\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch } from \"react-redux\";\n\n/**\n * ChatContainer holds the layout of the focused view of a selected chat\n *\n * @returns a div containing the SearchBar, Chat and ChatInput components\n */\nconst ChatContainer = () => {\n\n  const dispatch = useDispatch();\n  \n  /* State and callback functions for the SearchBar */\n  const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n  /**\n   * Set the state of searchTerm to the value of the input field when that changes\n   * @param event the event object of the window\n   *\n   */\n  const handleSearchInput = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  /**\n   * Trigger the search of the searchTerm in the actuall focused chat\n   * event parameter is displayed only to prevent he windows default action when pressing a submit button\n   * @param event the event object of the window\n   *\n   */\n  const handleSearchSubmit = (event) => {\n    /* TODO Actually search for chat messages containing the text in searchTerm and only allow that\n       to be displayed in the chat\n    */\n    console.log(searchTerm);\n    setSearchTerm(\"\");\n    event.preventDefault();\n  };\n\n  \n  /* State and callback functions for Chat and ChatInput */\n\n  /*All old messages, these are hardcoded. The self field is if you've sent the message or not */\n  const [messages, setMessages] = React.useState([]);\n  /*This is the state used when typing a new message*/\n  const [newMessage, setNewMessage] = React.useState(\"\");\n  /**\n   * Set the messages state by updating it with the \"newMessage\" message\n   * @param event the event object of the window\n   */\n  const sendMessage = (event) => {\n    event.preventDefault();\n    setMessages((prev) => [...prev, { message: newMessage, self: true }]);\n    dispatch(actions.sendMessage({message: newMessage, username: \"Skoben\"}));\n    setNewMessage(\"\");\n\n  };\n  \n  /**\n   * Set the newMessage state to whatever value is in event target\n   * @param event the event object of the window\n   */\n  const handleMessage = (event) => {\n    setNewMessage(event.target.value);\n  };\n\n\n\n  return (\n    <div className=\"flex flex-col content-center focused-view-custom-bg\">\n      <SearchBar\n        id=\"search-chat\"\n        value={searchTerm}\n        onButtonClick={handleSearchSubmit}\n        onInputChange={handleSearchInput}\n      />\n\n      <Chat messages={messages} />\n      <ChatInput\n        message = {newMessage}\n        handleInputChange={handleMessage}\n        handleButtonClick={sendMessage}\n      />\n    </div>\n  );\n};\n\nexport default ChatContainer;\n"]},"metadata":{},"sourceType":"module"}