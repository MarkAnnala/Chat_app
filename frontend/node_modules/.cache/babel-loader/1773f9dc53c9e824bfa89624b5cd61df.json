{"ast":null,"code":"/*\n initialState is the state object that we send into the redux store and can manipulate with the reducers\n */\nconst initialState = {\n  socket: null,\n  wsOnline: false,\n  socketServer: null,\n  firstWelcome: null,\n  username: null,\n  listOfDms: null,\n  listOfFriends: null\n};\n/**\n * TODO!!! what if multiple chats have the same chatName? maybe not allow that? cause it will be problem to check if we get the\n * correct chatID in return\n * \n * helper function used by action type SENDMESSAGE to locate the correct chat id\n * @param {array} list containing all direct messages of the user\n * @param {string} chatName used to identify the correct dm object\n *\n * @returns the chatID of the dm object\n */\n\nconst getChatID = (list, chatName) => {\n  let index = 0;\n\n  for (const chat of list) {\n    if (chat.chatName === chatName) {\n      return [chat.chatID, index];\n    }\n\n    index++;\n  }\n\n  return [null, -1]; // this line will only be reached if we give an invalid chatName\n};\n/**\n * helper function used by action type \"RESPONSE\" and action \"send_message\" to locate the correct dm object index\n * @param {array} list containing all direct messages of the user\n * @param {string} chatID used to identify the correct dm object\n *\n * @returns the index of the correct dm object\n */\n\n\nconst getChatIndex = (list, chatID) => {\n  let index = 0;\n\n  for (const chat of list) {\n    if (chat.chatID === chatID) {\n      return index;\n    }\n\n    index++;\n  }\n\n  return -1; // this line will only be reached if we give an invalid chatID\n};\n/**\n * performs a task depending on the action.type dispatched - acts more as a middleware for socket handling\n *\n * !!! Reducers shouldn't do sideeffects which this one does - consider this one more as a middleware than a real reducer\n *\n * @param {object} state the current state that is being held by the redux store\n * @property {object} socket contains the actual socket that we communicate with\n * @property {bool} wsOnline is true when the socket is online (used to handle disconnects/time outs)\n * @property {string} socketServer the url of server that we create a websocket with\n * @property {bool} firstWelcome used to know if we've made our first repsonse to socket after login  (TODO maybe better way)\n * @property {array} listOfMessages holds all chatroom objects\n * @property {array} listOfFriends holds all friends usernames\n * @property {string} username holds the username of logged in user\n * @param {object} action contains the type and payload\n * @property {string} action.type what kind of action should the reducer do\n * @property {object} action.payload check actions.js for what it may contain\n * @property {object} action.identifier used for identifying something inside state object .. eg: chatID of specific chat\n *\n * @returns updated state\n */\n\n\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      var firstWelcome;\n\n      if (state.firstWelcome === null) {\n        firstWelcome = true;\n      } else {\n        firstWelcome = state.firstWelcome ? true : false;\n      }\n\n      return { ...state,\n        socket: new WebSocket(state.socketServer),\n        wsOnline: true,\n        firstWelcome: firstWelcome\n      };\n\n    case \"CHAT_REQUEST\":\n      console.log(action.payload);\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    case \"RESPONSE\":\n      /* if data is ack or welcome there's nothning we need to do */\n      if (action.payload.data === \"Welcome\" || action.payload.data === \"ACK\") {\n        return state;\n        /* first response */\n      } else if (action.payload.action === \"login\") {\n        /* need to respond to socket with action = login, username, and magictoken to establish connection */\n        state.socket.send(JSON.stringify(action.payload));\n        /* \n          This if ann else cases handles the fact that we accidentely get 2 login responses from backend right now\n          not to trigger useEffect in ChatContainer we have this case here.. TODO remove it after backend fixes it\n        */\n\n        if (state.firstWelcome == false) {\n          console.log(\"Duplicate welcome login response...\");\n          return state;\n        } else {\n          console.log(\"first welcome login response\");\n          return { ...state,\n            firstWelcome: false,\n            // no longer first welcome..\n\n            /* \n            TESTING -- TODO - HARDCODED the login object that we should get in accordance with doc\n            in accordance with doc it should be a response with action \"init_login\" but we will do \n            it here right now\n                         each user gets 2 hard coded chatrooms on login\n                        each user gets 4 hard coded friends on login\n                        user get's its username  ( not hardcoded it comes from action.payload.username )\n             */\n            listOfDms: [{\n              chatName: \"Skooben\",\n              chatID: \"1a\",\n              messages: [{\n                message: \"test\",\n                username: \"Markipie\"\n              }]\n            }, {\n              chatName: \"Grabbarna Grus\",\n              chatID: \"2a\",\n              messages: [{\n                message: \"Axel mitt sexdjur?\",\n                username: \"Anton\"\n              }, {\n                message: \"axel e arg p√• dig\",\n                username: \"Axel\"\n              }]\n            }],\n            listOfFriends: [\"Skooben\", \"Markipie\", \"Mustafa\", \"Pallerkan\"],\n            username: action.payload.username\n          };\n        }\n      } else {\n        const parsedData = JSON.parse(action.payload.data);\n        /* We respond differently depending on the action/type of received data */\n\n        switch (parsedData.action) {\n          case \"send_message\":\n            /* add the new msg object to the right dm object */\n            const index = getChatIndex(state.listOfDms, parsedData.chat_id);\n            return { ...state,\n              listOfDms: [...state.listOfDms, state.listOfDms[index].messages.push({\n                message: parsedData.message,\n                username: parsedData.user_id\n              })]\n            };\n\n          case \"friend_request\":\n            console.log(parsedData);\n            return state;\n\n          case \"chat_request\":\n            console.log(parsedData);\n            return state;\n\n          default:\n            return state;\n        }\n      }\n\n    case \"DISCONNECTED\":\n      return { ...state,\n        socket: action.payload,\n        wsOnline: false,\n        firstWelcome: null,\n        listOfDms: null,\n        listOfFriends: null,\n        username: null\n      };\n\n    case \"SETSERVER\":\n      return { ...state,\n        socketServer: action.payload\n      };\n\n    case \"SENDMESSAGE\":\n      const [chatID, index] = getChatID(state.listOfDms, action.identifier);\n\n      if (chatID !== null && index !== -1) {\n        const msgObject = { ...action.payload,\n          chat_id: chatID\n        };\n        state.socket.send(JSON.stringify(msgObject));\n        /* update listOfDms in state */\n\n        return { ...state,\n          listOfDms: [...state.listOfDms, state.listOfDms[index].messages.push({\n            message: msgObject.message,\n            username: msgObject.user_id\n          })]\n        };\n      }\n\n      return state;\n\n    case \"ADDFRIEND\":\n      console.log(action.payload);\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/reducers/socketReducer.js"],"names":["initialState","socket","wsOnline","socketServer","firstWelcome","username","listOfDms","listOfFriends","getChatID","list","chatName","index","chat","chatID","getChatIndex","socketReducer","state","action","type","console","log","WebSocket","payload","send","JSON","stringify","data","messages","message","parsedData","parse","chat_id","push","user_id","identifier","msgObject"],"mappings":"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","sourcesContent":["/*\n initialState is the state object that we send into the redux store and can manipulate with the reducers\n */\nconst initialState = {\n  socket: null,\n  wsOnline: false,\n  socketServer: null,\n  firstWelcome: null,\n  username: null,\n  listOfDms: null,\n  listOfFriends: null,\n};\n\n/**\n * TODO!!! what if multiple chats have the same chatName? maybe not allow that? cause it will be problem to check if we get the\n * correct chatID in return\n * \n * helper function used by action type SENDMESSAGE to locate the correct chat id\n * @param {array} list containing all direct messages of the user\n * @param {string} chatName used to identify the correct dm object\n *\n * @returns the chatID of the dm object\n */\nconst getChatID = (list, chatName) => {\n  let index = 0;\n  for (const chat of list) {\n    if (chat.chatName === chatName) {\n      return [chat.chatID, index];\n    }\n    index++;\n  }\n  return [null, -1]; // this line will only be reached if we give an invalid chatName\n};\n/**\n * helper function used by action type \"RESPONSE\" and action \"send_message\" to locate the correct dm object index\n * @param {array} list containing all direct messages of the user\n * @param {string} chatID used to identify the correct dm object\n *\n * @returns the index of the correct dm object\n */\nconst getChatIndex = (list, chatID) => {\n  let index = 0;\n  for (const chat of list) {\n    if (chat.chatID === chatID) {\n      return index;\n    }\n    index++;\n  }\n  return -1; // this line will only be reached if we give an invalid chatID\n};\n\n/**\n * performs a task depending on the action.type dispatched - acts more as a middleware for socket handling\n *\n * !!! Reducers shouldn't do sideeffects which this one does - consider this one more as a middleware than a real reducer\n *\n * @param {object} state the current state that is being held by the redux store\n * @property {object} socket contains the actual socket that we communicate with\n * @property {bool} wsOnline is true when the socket is online (used to handle disconnects/time outs)\n * @property {string} socketServer the url of server that we create a websocket with\n * @property {bool} firstWelcome used to know if we've made our first repsonse to socket after login  (TODO maybe better way)\n * @property {array} listOfMessages holds all chatroom objects\n * @property {array} listOfFriends holds all friends usernames\n * @property {string} username holds the username of logged in user\n * @param {object} action contains the type and payload\n * @property {string} action.type what kind of action should the reducer do\n * @property {object} action.payload check actions.js for what it may contain\n * @property {object} action.identifier used for identifying something inside state object .. eg: chatID of specific chat\n *\n * @returns updated state\n */\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      var firstWelcome;\n      if (state.firstWelcome === null) {\n        firstWelcome = true;\n      } else {\n        firstWelcome = state.firstWelcome ? true : false;\n      }\n      return {\n        ...state,\n        socket: new WebSocket(state.socketServer),\n        wsOnline: true,\n        firstWelcome: firstWelcome,\n      };\n    case \"CHAT_REQUEST\":\n      console.log(action.payload);\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n    case \"RESPONSE\":\n      /* if data is ack or welcome there's nothning we need to do */\n      if (action.payload.data === \"Welcome\" || action.payload.data === \"ACK\") {\n        return state;\n\n        /* first response */\n      } else if (action.payload.action === \"login\") {\n        /* need to respond to socket with action = login, username, and magictoken to establish connection */\n        state.socket.send(JSON.stringify(action.payload));\n\n        /* \n          This if ann else cases handles the fact that we accidentely get 2 login responses from backend right now\n          not to trigger useEffect in ChatContainer we have this case here.. TODO remove it after backend fixes it\n        */\n        if (state.firstWelcome == false) {\n          console.log(\"Duplicate welcome login response...\");\n          return state;\n        } else {\n          console.log(\"first welcome login response\");\n          return {\n            ...state,\n            firstWelcome: false, // no longer first welcome..\n            /* \n            TESTING -- TODO - HARDCODED the login object that we should get in accordance with doc\n            in accordance with doc it should be a response with action \"init_login\" but we will do \n            it here right now\n\n                        each user gets 2 hard coded chatrooms on login\n                        each user gets 4 hard coded friends on login\n                        user get's its username  ( not hardcoded it comes from action.payload.username )\n\n            */\n            listOfDms: [\n              {\n                chatName: \"Skooben\",\n                chatID: \"1a\",\n                messages: [{ message: \"test\", username: \"Markipie\" }],\n              },\n              {\n                chatName: \"Grabbarna Grus\",\n                chatID: \"2a\",\n                messages: [\n                  { message: \"Axel mitt sexdjur?\", username: \"Anton\" },\n                  { message: \"axel e arg p√• dig\", username: \"Axel\" },\n                ],\n              },\n            ],\n            listOfFriends: [\"Skooben\", \"Markipie\", \"Mustafa\", \"Pallerkan\"],\n            username: action.payload.username,\n          };\n        }\n      } else {\n        const parsedData = JSON.parse(action.payload.data);\n\n        /* We respond differently depending on the action/type of received data */\n        switch (parsedData.action) {\n          case \"send_message\":\n            /* add the new msg object to the right dm object */\n            const index = getChatIndex(state.listOfDms, parsedData.chat_id);\n            return {\n              ...state,\n              listOfDms: [\n                ...state.listOfDms,\n                state.listOfDms[index].messages.push({\n                  message: parsedData.message,\n                  username: parsedData.user_id,\n                }),\n              ],\n            };\n          case \"friend_request\":\n            console.log(parsedData);\n            return state;\n          case \"chat_request\":\n            console.log(parsedData);\n            return state;\n          default:\n            return state;\n        }\n      }\n\n    case \"DISCONNECTED\":\n      return {\n        ...state,\n        socket: action.payload,\n        wsOnline: false,\n        firstWelcome: null,\n        listOfDms: null,\n        listOfFriends: null,\n        username: null,\n      };\n\n    case \"SETSERVER\":\n      return { ...state, socketServer: action.payload };\n\n    case \"SENDMESSAGE\":\n      const [chatID, index] = getChatID(state.listOfDms, action.identifier);\n\n      if (chatID !== null && index !== -1) {\n        const msgObject = { ...action.payload, chat_id: chatID };\n        state.socket.send(JSON.stringify(msgObject));\n        /* update listOfDms in state */\n        return {\n          ...state,\n          listOfDms: [\n            ...state.listOfDms,\n            state.listOfDms[index].messages.push({\n              message: msgObject.message,\n              username: msgObject.user_id,\n            }),\n          ],\n        };\n      }\n      return state;\n    case \"ADDFRIEND\":\n      console.log(action.payload);\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;\n"]},"metadata":{},"sourceType":"module"}