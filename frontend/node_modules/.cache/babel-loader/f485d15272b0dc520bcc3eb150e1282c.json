{"ast":null,"code":"/**\n * Contains actions that can be called by a dispatcher\n * \n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\",\n      // type of action \n      chat_id: \"\",\n      user_id: data.username,\n      message: data.message,\n      timestamp: null\n    },\n    identifier: data.chatName\n    /* used by helper function in socketReducer to get correct chat_id */\n\n  };\n}\n/* action functions */\n\nexport function connect() {\n  return {\n    type: CONNECT,\n    payload: null\n  };\n}\n/* action functions */\n\nexport function disconnected(data) {\n  return {\n    type: DISCONNECTED,\n    payload: data\n  };\n}\nexport function login({\n  values\n}) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function startChat(values) {\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chatName: values.chatName,\n      from: values.from,\n      members: values.members\n    }\n  };\n}\n;\nexport function loginSuccess(data) {\n  return {\n    type: SUCCESS,\n    payload: data\n  };\n}\nexport function loginFailure(data) {\n  return {\n    type: FAILURE,\n    payload: data\n  };\n}\nexport function response(data) {\n  return {\n    type: RESPONSE,\n    payload: data\n  };\n}\nexport function setServer(server) {\n  return {\n    type: SET,\n    payload: server\n  };\n}","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/actions/actions.js"],"names":["CONNECT","LOGIN","RESPONSE","REGISTER","DISCONNECTED","SET","SUCCESS","FAILURE","SENDMESSAGE","CHAT_REQUEST","sendMessage","data","type","payload","action","chat_id","user_id","username","message","timestamp","identifier","chatName","connect","disconnected","login","values","console","log","Username","password","Password","register","startChat","from","members","loginSuccess","loginFailure","response","setServer","server"],"mappings":"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","sourcesContent":["\n/**\n * Contains actions that can be called by a dispatcher\n * \n */\n\n /* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\"\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\n\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n        action: \"send_message\",      // type of action \n        chat_id: \"\",     \n        user_id: data.username ,\n        message: data.message , \n        timestamp: null\n    },\n    identifier: data.chatName, /* used by helper function in socketReducer to get correct chat_id */\n  };\n}\n/* action functions */\nexport function connect() {\n  return { type: CONNECT, payload: null };\n}  \n\n/* action functions */\nexport function disconnected(data) {\n  return { type: DISCONNECTED, payload: data };\n}  \n\nexport function login({ values }) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function register( values ) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function startChat(values){\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chatName: values.chatName,\n      from: values.from, \n      members: values.members,\n    },\n  };\n};\nexport function loginSuccess(data){\n  return { type: SUCCESS, payload: data}\n}\nexport function loginFailure(data){\n  return {type: FAILURE, payload: data}\n}\n\nexport function response(data) {\n  return { type: RESPONSE, payload: data};\n}\n\nexport function setServer(server){\n  return {type: SET, payload: server};\n}\n\n\n"]},"metadata":{},"sourceType":"module"}