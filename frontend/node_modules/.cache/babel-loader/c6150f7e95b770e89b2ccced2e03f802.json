{"ast":null,"code":"/*\n initialState is the state object that we send into the redux store and can manipulate with the reducers\n */\nconst initialState = {\n  socket: null,\n  wsOnline: false,\n  socketServer: null,\n  firstWelcome: null,\n  magicToken: null,\n  username: null,\n  listOfDms: null,\n  listOfFriends: null,\n  server: null\n};\n/**\n * helper function used by action type \"RESPONSE\" and action \"send_message\" to locate the correct dm object index\n * @param {array} list containing all direct messages of the user\n * @param {string} chatID used to identify the correct dm object\n *\n * @returns the index of the correct dm object\n */\n\nconst getChatIndex = (list, chatID) => {\n  let index = 0;\n\n  for (const chat of list) {\n    if (chat.chatID === chatID) {\n      return index;\n    }\n\n    index++;\n  }\n\n  return -1; // this line will only be reached if we give an invalid chatID\n};\n/**\n * performs a task depending on the action.type dispatched - acts more as a middleware for socket handling\n *\n * !!! Reducers shouldn't do sideeffects which this one does - consider this one more as a middleware than a real reducer\n *\n * @param {object} state the current state that is being held by the redux store\n * @property {object} socket contains the actual socket that we communicate with\n * @property {bool} wsOnline is true when the socket is online (used to handle disconnects/time outs)\n * @property {string} socketServer the url of server that we create a websocket with\n * @property {bool} firstWelcome used to know if we've made our first repsonse to socket after login  (TODO maybe better way)\n * @property {array} listOfMessages holds all chatroom objects\n * @property {array} listOfFriends holds all friends usernames\n * @property {string} username holds the username of logged in user\n * @param {object} action contains the type and payload\n * @property {string} action.type what kind of action should the reducer do\n * @property {object} action.payload check actions.js for what it may contain\n *\n * @returns updated state\n */\n\n\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      var firstWelcome;\n\n      if (state.firstWelcome === null) {\n        firstWelcome = true;\n      } else {\n        firstWelcome = state.firstWelcome ? true : false;\n      }\n\n      return { ...state,\n        socket: new WebSocket(state.socketServer),\n        wsOnline: true,\n        firstWelcome: firstWelcome\n      };\n\n    case \"ADD_COMMENT\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    case \"CREATE_THREAD\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    case \"ADD_THREADS\":\n      return { ...state,\n        server: { ...state.server,\n          listOfThreads: action.payload.threads\n        }\n      };\n\n    case \"ADDFRIEND\":\n      return { ...state,\n        listOfFriends: state.listOfFriends.concat(action.payload.username)\n      };\n\n    case \"CHAT_REQUEST\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n\n    case \"RESPONSE\":\n      /* if data is ack or welcome there's nothning we need to do */\n      if (action.payload.data === \"Welcome\" || action.payload.data === \"ACK\") {\n        return state;\n        /* first response */\n      } else if (action.payload.action === \"login\") {\n        /* need to respond to socket with action = login, username, and magictoken to establish connection */\n        state.socket.send(JSON.stringify(action.payload));\n        /* TODO TODO\n          This if and else cases handles the fact that we accidentely get 2 login responses from backend right now\n          not to trigger useEffect in ChatContainer we have this case here.. TODO remove it after backend fixes it\n        */\n\n        if (state.firstWelcome === false) {\n          console.log(\"Duplicate welcome login response...\");\n          return state;\n        } else {\n          console.log(\"first welcome login response\");\n          return { ...state,\n            firstWelcome: false,\n            // no longer first welcome..\n            magicToken: action.payload.magictoken.magic_token,\n\n            /* \n            TESTING -- TODO - HARDCODED the login object that we should get in accordance with doc\n            in accordance with doc it should be a response with action \"init_login\" but we will do \n            it here right now\n             */\n            listOfDms: [],\n            listOfFriends: [],\n            username: action.payload.username,\n\n            /* set hardcoded server oject with name of GLOBAL, empty thread list and member list with only urself */\n            server: {\n              serverName: \"0\",\n              serverInformation: \"This is the global server that everyone joins. Make threads, comment and be happy peeps.\",\n              listOfThreads: [{\n                rootPost: {\n                  rootHeader: \"Hjälp med linux!\",\n                  rootComment: \"Hej, har nån bra koll på mint??\"\n                },\n                username: \"Skooben\",\n                timestamp: \"2020-01-10\",\n                comments: [],\n                id: \"1\"\n              }, {\n                rootPost: {\n                  rootHeader: \"Knarka i helgen?\",\n                  rootComment: \"Tjena, skulle vilja knarka med någon i helgen. Sugen?\"\n                },\n                username: \"Rövpannan\",\n                timestamp: \"2019-12-24\",\n                comments: [],\n                id: \"2\"\n              }],\n              members: [action.payload.username]\n            }\n          };\n        }\n      } else {\n        const parsedData = JSON.parse(action.payload.data);\n        /* We respond differently depending on the action/type of received data */\n\n        switch (parsedData.action) {\n          case \"insert_comment\":\n            for (const thread of state.server.listOfThreads) {\n              if (thread.id === parsedData.thread_id) {\n                thread.comments.push({\n                  user_id: parsedData.user_id,\n                  comment: parsedData.comment,\n                  reply: parsedData.reply\n                });\n              }\n            }\n\n            break;\n\n          case \"init_login\":\n            const listOfDms = parsedData.list_of_dms.map(obj => {\n              return { ...obj,\n                sinceLastSeen: 0\n              };\n              /* used for notifications */\n            });\n            return { ...state,\n              listOfDms: listOfDms,\n              listOfFriends: parsedData.list_of_friends,\n              username: parsedData.user_id\n            };\n\n          case \"send_message\":\n            /* add the new msg object to the right dm object */\n            const index = getChatIndex(state.listOfDms, parsedData.chat_id);\n            return { ...state,\n              listOfDms: [...state.listOfDms, state.listOfDms[index].sinceLastSeen++, state.listOfDms[index].messages.push({\n                message: parsedData.message,\n                username: parsedData.user_id\n              })]\n            };\n\n          case \"chat_request\":\n            /* insert a new chat object to listOfDms */\n            if (parsedData.status === \"ok\") {\n              return { ...state,\n                listOfDms: [...state.listOfDms,\n                /* newly inserted object */\n                {\n                  chatName: parsedData.chat_name,\n                  chatID: parsedData.chat_id,\n                  messages: [],\n                  members: parsedData.members,\n                  creator: parsedData.creator,\n                  sinceLastSeen: 0\n                  /* used for notifications */\n\n                }]\n              };\n            }\n\n            return state;\n\n          case \"create_thread\":\n            return { ...state,\n              server: { ...state.server,\n                listOfThreads: [...state.server.listOfThreads, {\n                  rootPost: {\n                    rootHeader: parsedData.root_post.root_header,\n                    rootComment: parsedData.root_post.root_comment\n                  },\n                  username: parsedData.username,\n                  timestamp: parsedData.timestamp,\n                  comments: parsedData.commentList,\n                  id: parsedData.thread_id\n                }]\n              }\n            };\n\n          default:\n            return state;\n        }\n      }\n\n    case \"DISCONNECTED\":\n      return { ...state,\n        socket: action.payload,\n        wsOnline: false,\n        firstWelcome: null,\n        listOfDms: null,\n        listOfFriends: null,\n        username: null\n      };\n\n    case \"SETSERVER\":\n      return { ...state,\n        socketServer: action.payload\n      };\n\n    case \"SENDMESSAGE\":\n      const index = getChatIndex(state.listOfDms, action.payload.chat_id);\n\n      if (index !== -1) {\n        const msgObject = action.payload;\n        state.socket.send(JSON.stringify(msgObject));\n        /* update listOfDms in state */\n\n        var updateListOfDms = state.listOfDms;\n        updateListOfDms[index].messages.push({\n          message: msgObject.message,\n          username: msgObject.user_id\n        });\n        return { ...state,\n          listOfDms: updateListOfDms\n        };\n      }\n\n      return state;\n\n    case \"LOGOUT\":\n      /* RESET STATE */\n      return { ...state,\n        socket: null,\n        wsOnline: false,\n        socketServer: null,\n        firstWelcome: null,\n        magicToken: null,\n        username: null,\n        listOfDms: null,\n        listOfFriends: null\n      };\n\n    case \"RESET_LAST_SEEN\":\n      /* Reset the since last seen counter to 0 */\n      console.log(action.payload);\n      const i = getChatIndex(state.listOfDms, action.payload.chatID);\n      return { ...state,\n        listOfDms: [...state.listOfDms, state.listOfDms[i].sinceLastSeen = 0]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/reducers/socketReducer.js"],"names":["initialState","socket","wsOnline","socketServer","firstWelcome","magicToken","username","listOfDms","listOfFriends","server","getChatIndex","list","chatID","index","chat","socketReducer","state","action","type","console","log","WebSocket","send","JSON","stringify","payload","listOfThreads","threads","concat","data","magictoken","magic_token","serverName","serverInformation","rootPost","rootHeader","rootComment","timestamp","comments","id","members","parsedData","parse","thread","thread_id","push","user_id","comment","reply","list_of_dms","map","obj","sinceLastSeen","list_of_friends","chat_id","messages","message","status","chatName","chat_name","creator","root_post","root_header","root_comment","commentList","msgObject","updateListOfDms","i"],"mappings":"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","sourcesContent":["/*\n initialState is the state object that we send into the redux store and can manipulate with the reducers\n */\nconst initialState = {\n  socket: null,\n  wsOnline: false,\n  socketServer: null,\n  firstWelcome: null,\n  magicToken: null,\n  username: null,\n  listOfDms: null,\n  listOfFriends: null,\n  server: null,\n};\n\n/**\n * helper function used by action type \"RESPONSE\" and action \"send_message\" to locate the correct dm object index\n * @param {array} list containing all direct messages of the user\n * @param {string} chatID used to identify the correct dm object\n *\n * @returns the index of the correct dm object\n */\nconst getChatIndex = (list, chatID) => {\n  let index = 0;\n  for (const chat of list) {\n    if (chat.chatID === chatID) {\n      return index;\n    }\n    index++;\n  }\n  return -1; // this line will only be reached if we give an invalid chatID\n};\n\n/**\n * performs a task depending on the action.type dispatched - acts more as a middleware for socket handling\n *\n * !!! Reducers shouldn't do sideeffects which this one does - consider this one more as a middleware than a real reducer\n *\n * @param {object} state the current state that is being held by the redux store\n * @property {object} socket contains the actual socket that we communicate with\n * @property {bool} wsOnline is true when the socket is online (used to handle disconnects/time outs)\n * @property {string} socketServer the url of server that we create a websocket with\n * @property {bool} firstWelcome used to know if we've made our first repsonse to socket after login  (TODO maybe better way)\n * @property {array} listOfMessages holds all chatroom objects\n * @property {array} listOfFriends holds all friends usernames\n * @property {string} username holds the username of logged in user\n * @param {object} action contains the type and payload\n * @property {string} action.type what kind of action should the reducer do\n * @property {object} action.payload check actions.js for what it may contain\n *\n * @returns updated state\n */\nconst socketReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECT\":\n      /* store websocket in state.socket */\n      console.log(\"connecting to ws\");\n      var firstWelcome;\n      if (state.firstWelcome === null) {\n        firstWelcome = true;\n      } else {\n        firstWelcome = state.firstWelcome ? true : false;\n      }\n      return {\n        ...state,\n        socket: new WebSocket(state.socketServer),\n        wsOnline: true,\n        firstWelcome: firstWelcome,\n      };\n    case \"ADD_COMMENT\":\n      state.socket.send(JSON.stringify(action.payload));\n\n      return state;\n    case \"CREATE_THREAD\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n    \n    case \"ADD_THREADS\": \n    return{\n      ...state,\n      server: {\n        ... state.server, \n        listOfThreads: action.payload.threads     \n        }\n      };\n    case \"ADDFRIEND\":\n      return {\n        ...state,\n        listOfFriends: state.listOfFriends.concat(action.payload.username),\n      };\n    case \"CHAT_REQUEST\":\n      state.socket.send(JSON.stringify(action.payload));\n      return state;\n    case \"RESPONSE\":\n      /* if data is ack or welcome there's nothning we need to do */\n      if (action.payload.data === \"Welcome\" || action.payload.data === \"ACK\") {\n        return state;\n\n        /* first response */\n      } else if (action.payload.action === \"login\") {\n        /* need to respond to socket with action = login, username, and magictoken to establish connection */\n\n        state.socket.send(JSON.stringify(action.payload));\n\n        /* TODO TODO\n          This if and else cases handles the fact that we accidentely get 2 login responses from backend right now\n          not to trigger useEffect in ChatContainer we have this case here.. TODO remove it after backend fixes it\n        */\n        if (state.firstWelcome === false) {\n          console.log(\"Duplicate welcome login response...\");\n          return state;\n        } else {\n          console.log(\"first welcome login response\");\n          return {\n            ...state,\n            firstWelcome: false, // no longer first welcome..\n            magicToken: action.payload.magictoken.magic_token,\n            /* \n            TESTING -- TODO - HARDCODED the login object that we should get in accordance with doc\n            in accordance with doc it should be a response with action \"init_login\" but we will do \n            it here right now\n\n            */\n            listOfDms: [],\n            listOfFriends: [],\n            username: action.payload.username,\n            /* set hardcoded server oject with name of GLOBAL, empty thread list and member list with only urself */\n            server: {\n              serverName: \"0\",\n              serverInformation:\n                \"This is the global server that everyone joins. Make threads, comment and be happy peeps.\",\n              listOfThreads: [\n                {\n                  rootPost: {\n                    rootHeader: \"Hjälp med linux!\",\n                    rootComment: \"Hej, har nån bra koll på mint??\",\n                  },\n                  username: \"Skooben\",\n                  timestamp: \"2020-01-10\",\n                  comments: [],\n                  id: \"1\",\n                },\n                {\n                  rootPost: {\n                    rootHeader: \"Knarka i helgen?\",\n                    rootComment:\n                      \"Tjena, skulle vilja knarka med någon i helgen. Sugen?\",\n                  },\n                  username: \"Rövpannan\",\n                  timestamp: \"2019-12-24\",\n                  comments: [],\n                  id: \"2\",\n                },\n              ],\n              members: [action.payload.username],\n            },\n          };\n        }\n      } else {\n        const parsedData = JSON.parse(action.payload.data);\n\n        /* We respond differently depending on the action/type of received data */\n        switch (parsedData.action) {\n          case \"insert_comment\":\n            for (const thread of state.server.listOfThreads) {\n              if (thread.id === parsedData.thread_id) {\n                thread.comments.push({\n                  user_id: parsedData.user_id,\n                  comment: parsedData.comment,\n                  reply: parsedData.reply,\n                });\n              }\n            }\n            break;\n          case \"init_login\":\n            const listOfDms = parsedData.list_of_dms.map((obj) => {\n              return { ...obj, sinceLastSeen: 0 }; /* used for notifications */\n            });\n            return {\n              ...state,\n              listOfDms: listOfDms,\n              listOfFriends: parsedData.list_of_friends,\n              username: parsedData.user_id,\n            };\n          case \"send_message\":\n            /* add the new msg object to the right dm object */\n            const index = getChatIndex(state.listOfDms, parsedData.chat_id);\n            return {\n              ...state,\n              listOfDms: [\n                ...state.listOfDms,\n                state.listOfDms[index].sinceLastSeen++,\n                state.listOfDms[index].messages.push({\n                  message: parsedData.message,\n                  username: parsedData.user_id,\n                }),\n              ],\n            };\n          case \"chat_request\":\n            /* insert a new chat object to listOfDms */\n            if (parsedData.status === \"ok\") {\n              return {\n                ...state,\n                listOfDms: [\n                  ...state.listOfDms,\n                  /* newly inserted object */\n                  {\n                    chatName: parsedData.chat_name,\n                    chatID: parsedData.chat_id,\n                    messages: [],\n                    members: parsedData.members,\n                    creator: parsedData.creator,\n                    sinceLastSeen: 0 /* used for notifications */,\n                  },\n                ],\n              };\n            }\n            return state;\n          case \"create_thread\":\n            return {\n              ...state,\n              server: {\n                ...state.server,\n                listOfThreads: [\n                  ...state.server.listOfThreads,\n                  {\n                    rootPost: {\n                      rootHeader: parsedData.root_post.root_header,\n                      rootComment: parsedData.root_post.root_comment,\n                    },\n                    username: parsedData.username,\n                    timestamp: parsedData.timestamp,\n                    comments: parsedData.commentList,\n                    id: parsedData.thread_id,\n                  },\n                ],\n              },\n            };\n          default:\n            return state;\n        }\n      }\n\n    case \"DISCONNECTED\":\n      return {\n        ...state,\n        socket: action.payload,\n        wsOnline: false,\n        firstWelcome: null,\n        listOfDms: null,\n        listOfFriends: null,\n        username: null,\n      };\n\n    case \"SETSERVER\":\n      return { ...state, socketServer: action.payload };\n\n    case \"SENDMESSAGE\":\n      const index = getChatIndex(state.listOfDms, action.payload.chat_id);\n\n      if (index !== -1) {\n        const msgObject = action.payload;\n        state.socket.send(JSON.stringify(msgObject));\n\n        /* update listOfDms in state */\n        var updateListOfDms = state.listOfDms;\n        updateListOfDms[index].messages.push({\n          message: msgObject.message,\n          username: msgObject.user_id,\n        });\n\n        return {\n          ...state,\n          listOfDms: updateListOfDms,\n        };\n      }\n      return state;\n    case \"LOGOUT\":\n      /* RESET STATE */\n      return {\n        ...state,\n        socket: null,\n        wsOnline: false,\n        socketServer: null,\n        firstWelcome: null,\n        magicToken: null,\n        username: null,\n        listOfDms: null,\n        listOfFriends: null,\n      };\n    case \"RESET_LAST_SEEN\":\n      /* Reset the since last seen counter to 0 */\n      console.log(action.payload)\n      const i = getChatIndex(state.listOfDms, action.payload.chatID);\n      return {\n        ...state,\n        listOfDms: [\n          ...state.listOfDms,\n          state.listOfDms[i].sinceLastSeen = 0,\n        ],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default socketReducer;\n"]},"metadata":{},"sourceType":"module"}