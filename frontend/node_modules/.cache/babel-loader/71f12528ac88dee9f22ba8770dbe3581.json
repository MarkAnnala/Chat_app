{"ast":null,"code":"/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst LOGOUT = \"LOGOUT\";\nconst RESET = \"RESET\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\",\n      // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: null\n    }\n  };\n}\nexport function addFriend(data) {\n  return {\n    type: ADDFRIEND,\n    payload: {\n      username: data.username\n    }\n  };\n}\nexport function connect() {\n  return {\n    type: CONNECT,\n    payload: null\n  };\n}\nexport function disconnected(data) {\n  return {\n    type: DISCONNECTED,\n    payload: data\n  };\n}\nexport function logOut(data) {\n  return {\n    type: LOGOUT\n  };\n}\nexport function login({\n  values\n}) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password\n    }\n  };\n}\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members\n    }\n  };\n}\nexport function loginSuccess(data) {\n  return {\n    type: SUCCESS,\n    payload: data\n  };\n}\nexport function createThread(values) {\n  return {\n    type: CREATE_THREAD,\n    payload: {\n      serverName: values.server,\n      thread_id: null,\n      //TODO: ? kanske todo, kanske rätt\n      username: values.user,\n      root_post: {\n        root_header: values.summary,\n        root_cooment: values.details\n      },\n      //TODO: Vet inte om detta är ok eller ej, tänkte initialt att det kanske är lättare att sätta timestamp i backend\n      timestamp: null,\n      commentList: []\n    }\n  };\n}\nexport function loginFailure(data) {\n  return {\n    type: FAILURE,\n    payload: data\n  };\n}\nexport function response(data) {\n  return {\n    type: RESPONSE,\n    payload: data\n  };\n}\nexport function setServer(server) {\n  return {\n    type: SET,\n    payload: server\n  };\n}\nexport function resetLoginState() {\n  return {\n    type: RESET\n  };\n}","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/actions/actions.js"],"names":["CONNECT","LOGIN","RESPONSE","REGISTER","DISCONNECTED","SET","SUCCESS","FAILURE","SENDMESSAGE","ADDFRIEND","CHAT_REQUEST","LOGOUT","RESET","CREATE_THREAD","sendMessage","data","type","payload","action","chat_id","chatID","user_id","username","message","timestamp","addFriend","connect","disconnected","logOut","login","values","console","log","Username","password","Password","register","startChat","chat_name","chatName","from","members","loginSuccess","createThread","serverName","server","thread_id","user","root_post","root_header","summary","root_cooment","details","commentList","loginFailure","response","setServer","resetLoginState"],"mappings":"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","sourcesContent":["/**\n * Contains actions that can be called by a dispatcher\n *\n */\n\n/* action types */\nconst CONNECT = \"CONNECT\";\nconst LOGIN = \"LOGIN\";\nconst RESPONSE = \"RESPONSE\";\nconst REGISTER = \"REGISTER\";\nconst DISCONNECTED = \"DISCONNECTED\";\nconst SET = \"SETSERVER\";\nconst SUCCESS = \"SUCCESS\";\nconst FAILURE = \"FAILURE\";\nconst SENDMESSAGE = \"SENDMESSAGE\";\nconst ADDFRIEND = \"ADDFRIEND\";\nconst CHAT_REQUEST = \"CHAT_REQUEST\";\nconst LOGOUT = \"LOGOUT\";\nconst RESET = \"RESET\";\nconst CREATE_THREAD = \"CREATE_THREAD\";\n\nexport function sendMessage(data) {\n  return {\n    type: SENDMESSAGE,\n    payload: {\n      action: \"send_message\", // type of action\n      chat_id: data.chatID,\n      user_id: data.username,\n      message: data.message,\n      timestamp: null,\n    },\n  };\n}\nexport function addFriend(data) {\n  return { type: ADDFRIEND, payload: { username: data.username } };\n}\n\nexport function connect() {\n  return { type: CONNECT, payload: null };\n}\n\nexport function disconnected(data) {\n  return { type: DISCONNECTED, payload: data };\n}\n\nexport function logOut(data) {\n  return { type: LOGOUT };\n}\n\nexport function login({ values }) {\n  console.log(values);\n  return {\n    type: LOGIN,\n    payload: {\n      action: \"login\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function register(values) {\n  console.log(values);\n  return {\n    type: REGISTER,\n    payload: {\n      action: \"register\",\n      username: values.Username,\n      password: values.Password,\n    },\n  };\n}\n\nexport function startChat(values) {\n  console.log(values);\n  return {\n    type: CHAT_REQUEST,\n    payload: {\n      action: \"chat_request\",\n      chat_name: values.chatName,\n      from: values.from,\n      members: values.members,\n    },\n  };\n}\nexport function loginSuccess(data) {\n  return { type: SUCCESS, payload: data };\n}\nexport function createThread(values){\n  return {\n    type: CREATE_THREAD,\n    payload: {\n      serverName: values.server, \n      thread_id: null, //TODO: ? kanske todo, kanske rätt\n      username: values.user, \n      root_post: {root_header: values.summary, \n        root_cooment: values.details,\n      },\n      //TODO: Vet inte om detta är ok eller ej, tänkte initialt att det kanske är lättare att sätta timestamp i backend\n      timestamp: null, \n      commentList: [],\n    },\n  };\n}\n\nexport function loginFailure(data) {\n  return { type: FAILURE, payload: data };\n}\n\nexport function response(data) {\n  return { type: RESPONSE, payload: data };\n}\n\nexport function setServer(server) {\n  return { type: SET, payload: server };\n}\n\nexport function resetLoginState() {\n  return { type: RESET };\n}\n"]},"metadata":{},"sourceType":"module"}