{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Container/Container.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/**\n * Container is the component that makes sure to route to specific component on start page also\n * handles the listener / connection to the websocket\n * @returns returns the actual component that should be rendered depending on pathname\n */\n\nconst Container = () => {\n  /**\n   * HANDLING AND INITIALISATION OF WEBSOCKET EFFECTS\n   */\n\n  /* ws is the websocket that we are connected to */\n  const ws = useSelector(state => state.socketState.socket);\n  /* used in useEffect to check if disconnect is by our own accord */\n\n  const wsOnline = useSelector(state => state.socketState.wsOnline);\n  /* websocket url - will contain address when we call SETSERVER action */\n\n  const url = useSelector(state => state.socketState.socketServer);\n  const dispatch = useDispatch();\n  /* used for first login repsonse to the socket*/\n\n  const loginResponse = useSelector(state => state.loginState.loginResponse);\n  /* used for first login repsonse to the socket*/\n\n  const username = useSelector(state => state.loginState.username); // used to keep a mutable ref object - in this case the websocket which will not change automatically during a re-render\n\n  const wsRef = useRef();\n  wsRef.current = ws;\n  /* \n    used only for checking if we have made our first response for socket\n    We need to do this because the first response has to look a certain way\n    for the webserver to authenticate us\n  */\n\n  var firstWelcome = useSelector(state => state.socketState.firstWelcome);\n  useEffect(() => {\n    /* if current prop of ref is null and ws url is set -> initialize new websocket connection */\n    if (!wsRef.current && url !== null) {\n      dispatch(actions.connect());\n    }\n    /* socket is online  */\n\n\n    if (wsRef.current != null) {\n      /* listening on websocket */\n      wsRef.current.onmessage = msg => {\n        //first time we need to establish an authentication with server\n        if (firstWelcome === true) {\n          dispatch(actions.response({\n            action: \"login\",\n            username: username,\n            magictoken: loginResponse\n          }));\n        } else {\n          dispatch(actions.response(msg));\n        }\n      };\n      /* our websocket disconnected */\n\n\n      wsRef.current.onclose = () => {\n        if (wsOnline) {\n          /* trigger a reconnect */\n          console.log(\"reconnect to new ws\");\n          dispatch(actions.connect());\n        } else {\n          /* disconnect the ws */\n          console.log(\"ws disconnected\");\n          dispatch(actions.disconnected(null));\n        }\n      };\n    }\n  }, [ws, url, firstWelcome]);\n  /* a variable which checks wether we've successfully logged in or not taken from redux store */\n\n  const loginSuccess = useSelector(state => state.loginState.loginSuccess);\n  return /*#__PURE__*/React.createElement(BrowserRouter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    exact: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, loginSuccess ? /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 54\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, loginSuccess ? /*#__PURE__*/React.createElement(LandingPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 27\n    }\n  }) : /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/register\",\n    render: props => /*#__PURE__*/React.createElement(Register, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 52\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Container;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Container/Container.js"],"names":["React","useRef","useEffect","BrowserRouter","Route","Switch","Redirect","LandingPage","Login","Register","actions","useDispatch","useSelector","Container","ws","state","socketState","socket","wsOnline","url","socketServer","dispatch","loginResponse","loginState","username","wsRef","current","firstWelcome","connect","onmessage","msg","response","action","magictoken","onclose","console","log","disconnected","loginSuccess","props"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport LandingPage from \"../LandingPage/LandingPage\";\nimport Login from \"../Login/Login\";\nimport Register from \"../Register/Register\";\n\nimport * as actions from \"../../actions/actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n/**\n * Container is the component that makes sure to route to specific component on start page also\n * handles the listener / connection to the websocket\n * @returns returns the actual component that should be rendered depending on pathname\n */\nconst Container = () => {\n  /**\n   * HANDLING AND INITIALISATION OF WEBSOCKET EFFECTS\n   */\n\n  /* ws is the websocket that we are connected to */\n  const ws = useSelector((state) => state.socketState.socket);\n\n  /* used in useEffect to check if disconnect is by our own accord */\n  const wsOnline = useSelector((state) => state.socketState.wsOnline);\n\n  /* websocket url - will contain address when we call SETSERVER action */\n  const url = useSelector((state) => state.socketState.socketServer);\n\n  const dispatch = useDispatch();\n\n  /* used for first login repsonse to the socket*/\n  const loginResponse = useSelector((state) => state.loginState.loginResponse);\n  /* used for first login repsonse to the socket*/\n  const username = useSelector((state) => state.loginState.username);\n\n  // used to keep a mutable ref object - in this case the websocket which will not change automatically during a re-render\n  const wsRef = useRef();\n  wsRef.current = ws;\n\n  /* \n    used only for checking if we have made our first response for socket\n    We need to do this because the first response has to look a certain way\n    for the webserver to authenticate us\n  */\n  var firstWelcome = useSelector((state) => state.socketState.firstWelcome);\n\n  useEffect(() => {\n    /* if current prop of ref is null and ws url is set -> initialize new websocket connection */\n    if (!wsRef.current && url !== null) {\n      dispatch(actions.connect());\n    }\n\n    /* socket is online  */\n    if (wsRef.current != null) {\n      /* listening on websocket */\n      wsRef.current.onmessage = (msg) => {\n        //first time we need to establish an authentication with server\n        if (firstWelcome === true) {\n          dispatch(\n            actions.response({\n              action: \"login\",\n              username: username,\n              magictoken: loginResponse,\n            })\n          );\n        } else {\n          dispatch(actions.response(msg));\n        }\n      };\n\n      /* our websocket disconnected */\n      wsRef.current.onclose = () => {\n        if (wsOnline) {\n          /* trigger a reconnect */\n          console.log(\"reconnect to new ws\");\n          dispatch(actions.connect());\n        } else {\n          /* disconnect the ws */\n          console.log(\"ws disconnected\");\n          dispatch(actions.disconnected(null));\n        }\n      };\n    }\n  }, [ws, url, firstWelcome]);\n\n  /* a variable which checks wether we've successfully logged in or not taken from redux store */\n  const loginSuccess = useSelector((state) => state.loginState.loginSuccess);\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact>\n          {loginSuccess ? <Redirect to=\"/start\" /> : <Login />}\n        </Route>\n        <Route path=\"/start\">\n          {loginSuccess ? <LandingPage /> : <Redirect to=\"/\" />}\n        </Route>\n        <Route path=\"/register\" render={(props) => <Register {...props} />} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Container;\n"]},"metadata":{},"sourceType":"module"}