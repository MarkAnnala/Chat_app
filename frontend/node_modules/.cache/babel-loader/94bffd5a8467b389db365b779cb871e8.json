{"ast":null,"code":"var _jsxFileName = \"/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Upvote/Upvote.js\";\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Up from \"../../img/uploading.svg\";\nimport Down from \"../../img/multimedia-option.svg\";\nimport * as actions from \"../../actions/actions\";\n\nconst Upvote = ({\n  comment,\n  index\n}) => {\n  const [votes, setVotes] = useState(comment.rating);\n  const [voteUp, setVoteUp] = useState(false);\n  const [voteDown, setVoteDown] = useState(false);\n  const [inFlight, setInFlight] = useState(true);\n  const dispatch = useDispatch();\n  /* sends thread id and index for the comment and if its an upvote or not */\n\n  /*  Added a rating: 0 parameter to each comment*/\n\n  /* What does backend need for information to add upvotes? */\n\n  React.useEffect(() => {\n    if (voteUp === true && inFlight) {\n      setInFlight(false);\n      dispatch(actions.upVote({\n        thread_id: comment.thread_id,\n        index: index.toString()\n      }));\n      setInFlight(true);\n    }\n  }, [voteUp]);\n  React.useEffect(() => {\n    if (voteDown === true && inFlight) {\n      setInFlight(false);\n      dispatch(actions.downVote({\n        thread_id: comment.thread_id,\n        index: index.toString()\n      }));\n      setInFlight(true);\n    }\n  }, [voteDown]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"\",\n    src: Up,\n    className: \"cursor-pointer h-4 w-4\",\n    onClick: () => {\n      setVoteUp(!voteUp);\n      setVoteDown(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cursor-default ml-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, voteUp ? votes + 1 : \"\", voteDown ? votes - 1 : \"\", voteUp || voteDown ? \"\" : votes), /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"\",\n    src: Down,\n    className: \"cursor-pointer h-4 w-4\",\n    onClick: () => {\n      setVoteDown(!voteDown);\n      setInFlight(true);\n      setVoteUp(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Upvote;","map":{"version":3,"sources":["/Users/Mark/Documents/Skola/OSPP/adrenaline/frontend/src/components/Upvote/Upvote.js"],"names":["React","useState","useDispatch","actions","Upvote","comment","index","votes","setVotes","rating","voteUp","setVoteUp","voteDown","setVoteDown","inFlight","setInFlight","dispatch","useEffect","upVote","thread_id","toString","downVote","Up","Down"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAGA,OAAO,KAAKC,OAAZ,MAAyB,uBAAzB;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAwB;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACI,OAAO,CAACI,MAAT,CAAlC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMe,QAAQ,GAAGd,WAAW,EAA5B;AAEA;;AACA;;AACA;;AACAF,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAIP,MAAM,KAAK,IAAX,IAAmBI,QAAvB,EAAiC;AAC/BC,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,MAAAA,QAAQ,CACNb,OAAO,CAACe,MAAR,CAAe;AACbC,QAAAA,SAAS,EAAEd,OAAO,CAACc,SADN;AAEbb,QAAAA,KAAK,EAAEA,KAAK,CAACc,QAAN;AAFM,OAAf,CADM,CAAR;AAMAL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GAXD,EAWG,CAACL,MAAD,CAXH;AAaAV,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,QAAIL,QAAQ,KAAK,IAAb,IAAqBE,QAAzB,EAAmC;AACjCC,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,MAAAA,QAAQ,CACNb,OAAO,CAACkB,QAAR,CAAiB;AACfF,QAAAA,SAAS,EAAEd,OAAO,CAACc,SADJ;AAEfb,QAAAA,KAAK,EAAEA,KAAK,CAACc,QAAN;AAFQ,OAAjB,CADM,CAAR;AAMAL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,GAXD,EAWG,CAACH,QAAD,CAXH;AAaA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,GAAG,EAAC,EADN;AAEE,IAAA,GAAG,EAAEU,EAFP;AAGE,IAAA,SAAS,EAAC,wBAHZ;AAIE,IAAA,OAAO,EAAE,MAAM;AACbX,MAAAA,SAAS,CAAC,CAACD,MAAF,CAAT;AACAG,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,MAAM,GAAGH,KAAK,GAAG,CAAX,GAAe,EADxB,EAEGK,QAAQ,GAAGL,KAAK,GAAG,CAAX,GAAe,EAF1B,EAGGG,MAAM,IAAIE,QAAV,GAAqB,EAArB,GAA0BL,KAH7B,CAVF,eAeE;AACE,IAAA,GAAG,EAAC,EADN;AAEE,IAAA,GAAG,EAAEgB,IAFP;AAGE,IAAA,SAAS,EAAC,wBAHZ;AAIE,IAAA,OAAO,EAAE,MAAM;AACbV,MAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACAG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,MAAAA,SAAS,CAAC,KAAD,CAAT;AACD,KARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF;AA4BD,CAhED;;AAkEA,eAAeP,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Up from \"../../img/uploading.svg\";\nimport Down from \"../../img/multimedia-option.svg\";\nimport * as actions from \"../../actions/actions\";\n\nconst Upvote = ({ comment, index }) => {\n  const [votes, setVotes] = useState(comment.rating);\n  const [voteUp, setVoteUp] = useState(false);\n  const [voteDown, setVoteDown] = useState(false);\n  const [inFlight, setInFlight] = useState(true);\n  const dispatch = useDispatch();\n\n  /* sends thread id and index for the comment and if its an upvote or not */\n  /*  Added a rating: 0 parameter to each comment*/\n  /* What does backend need for information to add upvotes? */\n  React.useEffect(() => {\n    if (voteUp === true && inFlight) {\n      setInFlight(false);\n      dispatch(\n        actions.upVote({\n          thread_id: comment.thread_id,\n          index: index.toString(),\n        })\n      );\n      setInFlight(true);\n    }\n  }, [voteUp]);\n\n  React.useEffect(() => {\n    if (voteDown === true && inFlight) {\n      setInFlight(false);\n      dispatch(\n        actions.downVote({\n          thread_id: comment.thread_id,\n          index: index.toString(),\n        })\n      );\n      setInFlight(true);\n    }\n  }, [voteDown]);\n\n  return (\n    <div>\n      <img\n        alt=\"\"\n        src={Up}\n        className=\"cursor-pointer h-4 w-4\"\n        onClick={() => {\n          setVoteUp(!voteUp);\n          setVoteDown(false);\n        }}\n      ></img>\n      <div className=\"cursor-default ml-1\">\n        {voteUp ? votes + 1 : \"\"}\n        {voteDown ? votes - 1 : \"\"}\n        {voteUp || voteDown ? \"\" : votes}\n      </div>\n      <img\n        alt=\"\"\n        src={Down}\n        className=\"cursor-pointer h-4 w-4\"\n        onClick={() => {\n          setVoteDown(!voteDown);\n          setInFlight(true);\n          setVoteUp(false);\n        }}\n      ></img>\n    </div>\n  );\n};\n\nexport default Upvote;\n"]},"metadata":{},"sourceType":"module"}